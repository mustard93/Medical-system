/**
 *  盘谷医疗前端框架主入口文件
 */

//get root url
(function () {
  var loaderScript=  document.getElementById('requirejs_baseUrlId');
    if(!loaderScript){
      var scripts = document.getElementsByTagName('srcript');
      loaderScript = scripts[scripts.length - 1];
    }
    require.dir = loaderScript.src.match(/[^?#]*\//)[0];

    console.log("require.dir="+require.dir);

    //ueditor编辑器路径配置
    window.UEDITOR_HOME_URL=require.dir+"libs/ueditor1_4_3_3-utf8-jsp/";


    if (!Config.tplPath) {
      Config.tplPath = "";
    }


}());
    // window.UMEDITOR_HOME_URL=Config.serverPath;//编辑器需要 配置服务器地址
require.config({

  map: {
        "*": {
            "css": "../css.min"
        }
    },
    waitSeconds: 0,
    baseUrl: require.dir + 'modules',
    paths: {

          'resizableColumns': '../libs/resizableColumns/jquery.resizableColumns.min',     //jQuery拖动调整表格列宽度
          'store': '../libs/store.min',     //本地存储
          'ZeroClipboard': '../libs/ueditor1_4_3_3-utf8-jsp/third-party/zeroclipboard/ZeroClipboard',//html编辑器

        'ueditor': '../libs/ueditor1_4_3_3-utf8-jsp/ueditor.all.min',//html编辑器
        'ueditor_config': '../libs/ueditor1_4_3_3-utf8-jsp/ueditor.config',//编辑器。require 不支持。
        'ueditor_lang': '../libs/ueditor1_4_3_3-utf8-jsp/lang/zh-cn/zh-cn',//编辑器
        'CanvasBusinessFlow': '../libs/project/CanvasBusinessFlow.min',//业务单图展示
        'WorkflowProcess': '../libs/project/WorkflowProcess.min',//工作流
          'CanvasTreeLayout':"../libs/project/CanvasTreeLayout.min",//流程图布局定义
        'LodopFuncs': '../libs/LodopFuncs_amd',     //打印功能
        'JTopo': '../libs/jtopo-0.4.8.min',
        'jQuery': '../libs/jquery.min',                         //jQuery
        'underscore': '../libs/underscore/underscore-1.5.2.min',
        'moment': '../libs/moment.min',                         //日历插件
        'echarts': '../libs/echarts/echarts-3.2.3.min',         // echars v3.2.3
        'chosen': '../libs/chosen.jquery.pg.min',                  //下拉筛选插件.已修改源码
        'angular': '../libs/angular.min',                           //Angular
        'ngRoute': '../libs/angular-route.min',                     //路由
        'autocomplete': '../libs/jquery.autocomplete.min',      //自动补齐
        'bootstrap': '../libs/bootstrap.min',                   //bootstrap
        'jquery-ui': '../libs/jquery-ui.min',
        'nicescroll': '../libs/jquery-nicescroll.min',          //滚动条美化
        'easypiechart': '../libs/easypiechart/angular.easypiechart',    //jQuery饼图
        'icheck': '../libs/jquery.icheck.min',                  //checkbox美化
        'morris': '../libs/morris-chart/morris.min',                         //日历插件
        'toastr': '../libs/toastr/toastr.min',   //提示窗口
        'raphael': '../libs/morris-chart/raphael.min',                         //日历插件
        // "project/angucomplete": '../libs/project/angucomplete',                         //自动补全
        'clndr': '../libs/calendar/clndr.min'                             //日历插件
    },
    shim: {
      'ueditor_config': {
          deps: ['jQuery']
      },
      // 'ZeroClipboard': {
      //       deps: ['jQuery'],
      //     exports: 'ZeroClipboard'
      // },
      'ueditor': {
          deps: ['jQuery','ZeroClipboard'],
          init:function(ZeroClipboard){
               //导出到全局变量，供ueditor使用
               window.ZeroClipboard = ZeroClipboard;
           }
      },
//,'css!../libs/umeditor1_2_2/themes/default/css/umeditor.min.css'
      'ueditor_lang': {
          deps: ['ueditor','ueditor_config'],
            exports: 'UM'
      },
        'JTopo': {
            exports: 'JTopo'
        },
        'jQuery': {
            exports: 'jQuery'
        },
        'resizableColumns': {
            deps: ['jQuery','css!../libs/resizableColumns/jquery.resizableColumns.css']
        },


        'underscore': {
            exports: '_'
        },
        'toastr': {
            deps: ['jQuery']
        },
        'chosen': {
            deps: ['jQuery']
        },
        'echarts': {
            exports: 'echarts'
        },

        'angular': {
            deps: ['jQuery'],
            exports: 'angular'
        },
        'ngRoute': {
          deps: ['angular'],
          exports: 'ngRoute'
        },
        'autocomplete': {
          deps: ['jQuery'],
          exports: 'autocomplete'
        },
        'bootstrap': {
            deps: ['jQuery'],
            exports: 'bootstrap'
        },
        'jquery-ui': {
            deps: ['jQuery'],
            exports: 'jquery-ui'
        },
        'nicescroll': {
            deps: ['jQuery'],
            exports: 'nicescroll'
        },
        'easypiechart': {
            deps: ['jQuery'],
            exports: 'easypiechart'
        },
        'icheck': {
            deps: ['jQuery'],
            exports: 'icheck'
        },
        'morris': {
            deps: ['raphael'],
            exports: 'morris'
        },
        'clndr': {
            deps: ['jQuery'],
            exports: 'clndr'
        }
    },
    urlArgs: ''
});

require(['bootstrap',
         'jquery-ui',
         'nicescroll',
         'easypiechart',
         'icheck'], function() {});

//@ifdef !production
define('manageApp.template', ['angular'], function () {
    angular.module('manageApp.template', []);
});
//@endif

define('manageApp.main', ['main/init', 'main/services', 'main/controllers', 'main/directives', 'main/filters']);
define('manageApp.project', ['project/init', 'project/services', 'project/controllers', 'project/directives', 'project/filters', 'project/angucomplete']);
define('manageApp.modal', ['modal/init', 'modal/services', 'modal/directives']);
define('manageApp.upload', ['upload/init', 'upload/directives']);
define('datePicker', ['datepicker/datepicker']);

define('manageApp.project-PG16-H', ['project-PG16-H/init', 'project-PG16-H/services', 'project-PG16-H/controllers', 'project-PG16-H/directives', 'project-PG16-H/filters', 'project-PG16-H/angucomplete']);


define('manageApp', [
       'angular',
       'manageApp.template',
       'manageApp.modal',
       'manageApp.main',
       'manageApp.project',
       'manageApp.upload',
       'datePicker'
], function () {
    return angular.module('manageApp', [
        'ngRoute',
        'manageApp.template',
        'manageApp.modal',
        'manageApp.main',
        'manageApp.project',
        'manageApp.upload',
        'datePicker',
        'easypiechart'
    ]);
});

require(['manageApp','ngRoute'], function (app) {



    app.config(['$routeProvider', '$templateRequestProvider','$sceDelegateProvider',
       function ($routeProvider, $templateRequestProvider,$sceDelegateProvider) {

         $sceDelegateProvider.resourceUrlWhitelist([
             // Allow same origin resource loads.
             'self',
             '**',
                'http://192.168.0.211:8080/**',
             // Allow loading from our assets domain.  Notice the difference between * and **.
             'http://localhost:8080/**']);//ng-include $get允许跨越。

        if (window.Config) {
            $routeProvider
                .when("/:page*", {
                    templateUrl: function (param) {
                        var _url = (Config.viewsDir || '') + param.page;
                        delete param.page;
                        var _param = $.param(param);
                        return _param ? _url + "?" + _param : _url;
                    },
                    resolve: {
                        load: function () {
                        }
                    }
                })
                .otherwise({redirectTo: Config.indexPage});
        } else {
            $routeProvider
                .when("/:page*", {
                    templateUrl: function (param) {
                        var _url = param.page;
                        delete param.page;
                        var _param = $.param(param);
                        return _param ? _url + "?" + _param : _url;
                    },
                    resolve: {
                        load: function () {
                        }
                    }
                });
        }

        $templateRequestProvider.httpOptions({
          withCredentials:true
          // ,//ng-include $get允许跨越。
          //   headers: {
          //
          //       'template': '1'
          //   }
        });
    }]);

    angular.bootstrap(document, ['manageApp']);
});

/**
 * Created by hao on 15/11/5.
 */
define('project-PG16-H/controllers', ['project-PG16-H/init'], function() {

});

/**
 * 项目自定义指令
 */
define('project-PG16-H/directives', ['project-PG16-H/init'], function () {

});

/**
 * Created by hao on 16/1/7.
 */
define('project-PG16-H/filters', ['project-PG16-H/init'], function () {

});

/**
 * Created by hao on 15/11/11.
 */
define('project-PG16-H/init', ['angular'], function () {
    angular.module('manageApp.project-PG16-H', []);
});

/**
 * Created by hao on 15/11/18.
 */
define('project-PG16-H/services', ['project-PG16-H/init'], function () {

});

define('datepicker/datepicker', ['moment', 'angular'], function (moment) {
    moment.defineLocale('zh-cn', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '日_一_二_三_四_五_六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'Ah点mm分',
            LTS: 'Ah点m分s秒',
            L: 'YYYY-MM-DD',
            LL: 'YYYY年MMMD日',
            LLL: 'YYYY年MMMD日Ah点mm分',
            LLLL: 'YYYY年MMMD日ddddAh点mm分',
            l: 'YYYY-MM-DD',
            ll: 'YYYY年MMMD日',
            lll: 'YYYY年MMMD日Ah点mm分',
            llll: 'YYYY年MMMD日ddddAh点mm分'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' ||
                meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: function () {
                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
            },
            nextDay: function () {
                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
            },
            lastDay: function () {
                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
            },
            nextWeek: function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            lastWeek: function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() < startOfWeek.unix() ? '[上]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            sameElse: 'LL'
        },
        ordinalParse: /\d{1,2}(日|月|周)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s内',
            past: '%s前',
            s: '几秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年'
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 4  // The week that contains Jan 4th is the first week of the year.
        }
    });


    /* global moment */
    var Module = angular.module('datePicker', []);

    Module.constant('datePickerConfig', {
        template: Config.tplPath + 'tpl/datepicker.html',
        view: 'month',
        views: ['year', 'month', 'date', 'hours', 'minutes'],
        momentNames: {
            year: 'year',
            month: 'month',
            date: 'day',
            hours: 'hours',
            minutes: 'minutes',
        },
        viewConfig: {
            year: ['years', 'isSameYear'],
            month: ['months', 'isSameMonth'],
            hours: ['hours', 'isSameHour'],
            minutes: ['minutes', 'isSameMinutes'],
        },
        step: 5
    });

    //Moment format filter.
    Module.filter('mFormat', function () {
        return function (m, format, tz) {
            if (!(moment.isMoment(m))) {
                return moment(m).format(format);
            }
            return tz ? moment.tz(m, tz).format(format) : m.format(format);
        };
    });

    Module.directive('datePicker', ['datePickerConfig', 'datePickerUtils', function datePickerDirective(datePickerConfig, datePickerUtils) {

        //noinspection JSUnusedLocalSymbols
        return {
            // this is a bug ?
            require: '?ngModel',
            template: '<div ng-include="template"></div>',
            scope: {
                model: '=datePicker',
                after: '=?',
                before: '=?',
                dateSelect: '=?',
                dateMonth: '=?',
                statusList: '=?'
            },
            link: function (scope, element, attrs, ngModel) {
                function prepareViews() {
                    scope.views = datePickerConfig.views.concat();
                    scope.view = attrs.view || datePickerConfig.view;

                    scope.views = scope.views.slice(
                        scope.views.indexOf(attrs.maxView || 'year'),
                        scope.views.indexOf(attrs.minView || 'minutes') + 1
                    );

                    if (scope.views.length === 1 || scope.views.indexOf(scope.view) === -1) {
                        scope.view = scope.views[0];
                    }
                }

                function getDate(name) {
                    return datePickerUtils.getDate(scope, attrs, name);
                }

                datePickerUtils.setParams(attrs.timezone);

                var arrowClick = false,
                    tz = scope.tz = attrs.timezone,
                    createMoment = datePickerUtils.createMoment,
                    eventIsForPicker = datePickerUtils.eventIsForPicker,
                    step = parseInt(attrs.step || datePickerConfig.step, 10),
                    partial = !!attrs.partial,
                    minDate = getDate('minDate'),
                    maxDate = getDate('maxDate'),
                    pickerID = element[0].id,
                    now = scope.now = createMoment(),
                    selected = scope.date = createMoment(scope.model || now),
                    autoclose = attrs.autoClose === 'true';

                if (!scope.model) {
                    selected.minute(Math.ceil(selected.minute() / step) * step).second(0);
                }

                scope.template = attrs.template || datePickerConfig.template;

                scope.watchDirectChanges = attrs.watchDirectChanges !== undefined;
                scope.callbackOnSetDate = attrs.dateChange ? datePickerUtils.findFunction(scope, attrs.dateChange) : undefined;

                prepareViews();

                scope.setView = function (nextView) {
                    if (scope.views.indexOf(nextView) !== -1) {
                        scope.view = nextView;
                    }
                };

                scope.selectDate = function (date) {

                    if (attrs.disabled) {
                        return false;
                    }
                    if (isSame(scope.date, date)) {
                        date = scope.date;
                    }

                    if (scope.view == 'date') {
                        scope.dateSelect && scope.dateSelect(date);
                    }

                    date = clipDate(date);
                    if (!date) {
                        return false;
                    }
                    scope.date = date;

                    var nextView = scope.views[scope.views.indexOf(scope.view) + 1];
                    if ((!nextView || partial) || scope.model) {
                        setDate(date);
                    }

                    if (nextView) {
                        scope.setView(nextView);
                    } else if (autoclose) {
                        element.addClass('hidden');
                        scope.$emit('hidePicker');
                    } else {
                        prepareViewData();
                    }
                };

                function setDate(date) {
                    if (date) {
                        scope.model = date;
                        if (ngModel) {
                            ngModel.$setViewValue(date.format(attrs.format));
                        }
                    }
                    scope.$emit('setDate', scope.model, scope.view);

                    //This is duplicated in the new functionality.
                    if (scope.callbackOnSetDate) {
                        scope.callbackOnSetDate(attrs.datePicker, scope.date);
                    }
                }

                function update() {
                    var view = scope.view;
                    datePickerUtils.setParams(tz);

                    if (scope.model && !arrowClick) {
                        scope.date = createMoment(scope.model);
                        arrowClick = false;
                    }

                    var date = scope.date;

                    switch (view) {
                        case 'year':
                            scope.years = datePickerUtils.getVisibleYears(date);
                            break;
                        case 'month':
                            scope.months = datePickerUtils.getVisibleMonths(date);
                            break;
                        case 'date':
                            scope.weekdays = scope.weekdays || datePickerUtils.getDaysOfWeek();
                            scope.weeks = datePickerUtils.getVisibleWeeks(date);
                            break;
                        case 'hours':
                            scope.hours = datePickerUtils.getVisibleHours(date);
                            break;
                        case 'minutes':
                            scope.minutes = datePickerUtils.getVisibleMinutes(date, step);
                            break;
                    }

                    prepareViewData();
                }

                function watch() {
                    if (scope.view !== 'date') {
                        return scope.view;
                    }
                    return scope.date ? scope.date.month() : null;
                }

                scope.$watch(watch, update);

                if (scope.watchDirectChanges) {
                    scope.$watch('model', function () {
                        arrowClick = false;
                        update();
                    });
                }

                function prepareViewData() {
                    var view = scope.view,
                        date = scope.date,
                        classes = [], classList = '',
                        i, j;

                    datePickerUtils.setParams(tz);

                    if (view === 'date') {
                        var weeks = scope.weeks, week;
                        for (i = 0; i < weeks.length; i++) {
                            week = weeks[i];
                            classes.push([]);
                            for (j = 0; j < week.length; j++) {
                                classList = '';
                                if (datePickerUtils.isSameDay(date, week[j])) {
                                    classList += 'active';
                                }
                                if (isNow(week[j], view)) {
                                    classList += ' now';
                                }
                                //if (week[j].month() !== date.month()) classList += ' disabled';
                                if (week[j].month() !== date.month() || !inValidRange(week[j])) {
                                    classList += ' disabled';
                                }
                                classes[i].push(classList);
                            }
                        }
                    } else {
                        var params = datePickerConfig.viewConfig[view],
                            dates = scope[params[0]],
                            compareFunc = params[1];

                        for (i = 0; i < dates.length; i++) {
                            classList = '';
                            if (datePickerUtils[compareFunc](date, dates[i])) {
                                classList += 'active';
                            }
                            if (isNow(dates[i], view)) {
                                classList += ' now';
                            }
                            if (!inValidRange(dates[i])) {
                                classList += ' disabled';
                            }
                            classes.push(classList);
                        }
                    }
                    scope.classes = classes;
                }

                scope.next = function (delta) {
                    var date = moment(scope.date);
                    delta = delta || 1;
                    switch (scope.view) {
                        case 'year':
                        /*falls through*/
                        case 'month':
                            date.year(date.year() + delta);
                            break;
                        case 'date':
                            date.month(date.month() + delta);
                            scope.dateMonth && scope.dateMonth(date);
                            break;
                        case 'hours':
                        /*falls through*/
                        case 'minutes':
                            date.hours(date.hours() + delta);
                            break;
                    }
                    date = clipDate(date);
                    if (date) {
                        scope.date = date;
                        setDate(date);
                        arrowClick = true;
                        update();
                    }
                };

                function inValidRange(date) {
                    var valid = true;
                    if (minDate && minDate.isAfter(date)) {
                        valid = isSame(minDate, date);
                    }
                    if (maxDate && maxDate.isBefore(date)) {
                        valid &= isSame(maxDate, date);
                    }
                    return valid;
                }

                function isSame(date1, date2) {
                    return date1.isSame(date2, datePickerConfig.momentNames[scope.view]) ? true : false;
                }

                function clipDate(date) {
                    if (minDate && minDate.isAfter(date)) {
                        return minDate;
                    } else if (maxDate && maxDate.isBefore(date)) {
                        return maxDate;
                    } else {
                        return date;
                    }
                }

                function isNow(date, view) {
                    var is = true;

                    switch (view) {
                        case 'minutes':
                            is &= ~~(now.minutes() / step) === ~~(date.minutes() / step);
                        /* falls through */
                        case 'hours':
                            is &= now.hours() === date.hours();
                        /* falls through */
                        case 'date':
                            is &= now.date() === date.date();
                        /* falls through */
                        case 'month':
                            is &= now.month() === date.month();
                        /* falls through */
                        case 'year':
                            is &= now.year() === date.year();
                    }
                    return is;
                }

                scope.prev = function (delta) {
                    return scope.next(-delta || -1);
                };

                if (pickerID) {
                    scope.$on('pickerUpdate', function (event, pickerIDs, data) {
                        if (eventIsForPicker(pickerIDs, pickerID)) {
                            var updateViews = false, updateViewData = false;

                            if (angular.isDefined(data.minDate)) {
                                minDate = data.minDate ? data.minDate : false;
                                updateViewData = true;
                            }
                            if (angular.isDefined(data.maxDate)) {
                                maxDate = data.maxDate ? data.maxDate : false;
                                updateViewData = true;
                            }

                            if (angular.isDefined(data.minView)) {
                                attrs.minView = data.minView;
                                updateViews = true;
                            }
                            if (angular.isDefined(data.maxView)) {
                                attrs.maxView = data.maxView;
                                updateViews = true;
                            }
                            attrs.view = data.view || attrs.view;

                            if (updateViews) {
                                prepareViews();
                            }

                            if (updateViewData) {
                                update();
                            }
                        }
                    });
                }
            }
        };
    }]);
    /* global moment */

    angular.module('datePicker').factory('datePickerUtils', function () {
        var tz;
        var createNewDate = function (year, month, day, hour, minute) {
            var utc = Date.UTC(year | 0, month | 0, day | 0, hour | 0, minute | 0);
            return tz ? moment.tz(utc, tz) : moment(utc);
        };

        return {
            getVisibleMinutes: function (m, step) {
                var year = m.year(),
                    month = m.month(),
                    day = m.date(),
                    hour = m.hours(), pushedDate,
                    offset = m.utcOffset() / 60,
                    minutes = [], minute;

                for (minute = 0; minute < 60; minute += step) {
                    pushedDate = createNewDate(year, month, day, hour - offset, minute);
                    minutes.push(pushedDate);
                }
                return minutes;
            },
            getVisibleWeeks: function (m) {
                m = moment(m);
                var startYear = m.year(),
                    startMonth = m.month();

                //Set date to the first day of the month
                m.date(1);

                //Grab day of the week
                var day = m.day();

                if (day === 0) {
                    //If the first day of the month is a sunday, go back one week.
                    m.date(-6);
                } else {
                    //Otherwise, go back the required number of days to arrive at the previous sunday
                    m.date(1 - day);
                }

                var weeks = [];

                while (weeks.length < 6) {
                    if (m.year() === startYear && m.month() > startMonth) {
                        break;
                    }
                    weeks.push(this.getDaysOfWeek(m));
                    m.add(7, 'd');
                }
                return weeks;
            },
            getVisibleYears: function (d) {
                var m = moment(d),
                    year = m.year();

                m.year(year - (year % 10));
                year = m.year();

                var offset = m.utcOffset() / 60,
                    years = [],
                    pushedDate,
                    actualOffset;

                for (var i = 0; i < 12; i++) {
                    pushedDate = createNewDate(year, 0, 1, 0 - offset);
                    actualOffset = pushedDate.utcOffset() / 60;
                    if (actualOffset !== offset) {
                        pushedDate = createNewDate(year, 0, 1, 0 - actualOffset);
                        offset = actualOffset;
                    }
                    years.push(pushedDate);
                    year++;
                }
                return years;
            },
            getDaysOfWeek: function (m) {
                m = m ? m : (tz ? moment.tz(tz).day(0) : moment().day(0));

                var year = m.year(),
                    month = m.month(),
                    day = m.date(),
                    days = [],
                    pushedDate,
                    offset = m.utcOffset() / 60,
                    actualOffset;

                for (var i = 0; i < 7; i++) {
                    pushedDate = createNewDate(year, month, day, 0 - offset, 0, false);
                    actualOffset = pushedDate.utcOffset() / 60;
                    if (actualOffset !== offset) {
                        pushedDate = createNewDate(year, month, day, 0 - actualOffset, 0, false);
                    }
                    days.push(pushedDate);
                    day++;
                }
                return days;
            },
            getVisibleMonths: function (m) {
                var year = m.year(),
                    offset = m.utcOffset() / 60,
                    months = [],
                    pushedDate,
                    actualOffset;

                for (var month = 0; month < 12; month++) {
                    pushedDate = createNewDate(year, month, 1, 0 - offset, 0, false);
                    actualOffset = pushedDate.utcOffset() / 60;
                    if (actualOffset !== offset) {
                        pushedDate = createNewDate(year, month, 1, 0 - actualOffset, 0, false);
                    }
                    months.push(pushedDate);
                }
                return months;
            },
            getVisibleHours: function (m) {
                var year = m.year(),
                    month = m.month(),
                    day = m.date(),
                    hours = [],
                    hour, pushedDate, actualOffset,
                    offset = m.utcOffset() / 60;

                for (hour = 0; hour < 24; hour++) {
                    pushedDate = createNewDate(year, month, day, hour - offset, 0, false);
                    actualOffset = pushedDate.utcOffset() / 60;
                    if (actualOffset !== offset) {
                        pushedDate = createNewDate(year, month, day, hour - actualOffset, 0, false);
                    }
                    hours.push(pushedDate);
                }

                return hours;
            },
            isAfter: function (model, date) {
                return model && model.unix() >= date.unix();
            },
            isBefore: function (model, date) {
                return model.unix() <= date.unix();
            },
            isSameYear: function (model, date) {
                return model && model.year() === date.year();
            },
            isSameMonth: function (model, date) {
                return this.isSameYear(model, date) && model.month() === date.month();
            },
            isSameDay: function (model, date) {
                return this.isSameMonth(model, date) && model.date() === date.date();
            },
            isSameHour: function (model, date) {
                return this.isSameDay(model, date) && model.hours() === date.hours();
            },
            isSameMinutes: function (model, date) {
                return this.isSameHour(model, date) && model.minutes() === date.minutes();
            },
            setParams: function (zone) {
                tz = zone;
            },
            findFunction: function (scope, name) {
                //Search scope ancestors for a matching function.
                //Can probably combine this and the below function
                //into a single search function and two comparison functions
                //Need to add support for lodash style selectors (eg, 'objectA.objectB.function')
                var parentScope = scope;
                do {
                    parentScope = parentScope.$parent;
                    if (angular.isFunction(parentScope[name])) {
                        return parentScope[name];
                    }
                } while (parentScope.$parent);

                return false;
            },
            findParam: function (scope, name) {
                //Search scope ancestors for a matching parameter.
                var parentScope = scope;
                do {
                    parentScope = parentScope.$parent;
                    if (parentScope[name]) {
                        return parentScope[name];
                    }
                } while (parentScope.$parent);

                return false;
            },
            createMoment: function (m) {
                if (tz) {
                    return moment.tz(m, tz);
                } else {
                    //If input is a moment, and we have no TZ info, we need to remove TZ
                    //info from the moment, otherwise the newly created moment will take
                    //the timezone of the input moment. The easiest way to do that is to
                    //take the unix timestamp, and use that to create a new moment.
                    //The new moment will use the local timezone of the user machine.
                    return moment.isMoment(m) ? moment.unix(m.unix()) : moment(m);
                }
            },
            getDate: function (scope, attrs, name) {
                var result = false;
                if (attrs[name]) {
                    result = this.createMoment(attrs[name]);
                    if (!result.isValid()) {
                        result = this.findParam(scope, attrs[name]);
                        if (result) {
                            result = this.createMoment(result);
                        }
                    }
                }

                return result;
            },
            eventIsForPicker: function (targetIDs, pickerID) {
                //Checks if an event targeted at a specific picker, via either a string name, or an array of strings.
                return (angular.isArray(targetIDs) && targetIDs.indexOf(pickerID) > -1 || targetIDs === pickerID);
            }
        };
    });
    /* global moment */
    var Module = angular.module('datePicker');

    Module.directive('dateRange', ['$compile', 'datePickerUtils', 'dateTimeConfig', function ($compile, datePickerUtils, dateTimeConfig) {
        function getTemplate(attrs, id, model, min, max) {
            return dateTimeConfig.template(angular.extend(attrs, {
                ngModel: model,
                minDate: min && moment.isMoment(min) ? min.format() : false,
                maxDate: max && moment.isMoment(max) ? max.format() : false
            }), id);
        }

        function randomName() {
            return 'picker' + Math.random().toString().substr(2);
        }

        return {
            scope: {
                start: '=',
                end: '='
            },
            link: function (scope, element, attrs) {
                var dateChange = null,
                    pickerRangeID = element[0].id,
                    pickerIDs = [randomName(), randomName()],
                    createMoment = datePickerUtils.createMoment,
                    eventIsForPicker = datePickerUtils.eventIsForPicker;

                scope.dateChange = function (modelName, newDate) {
                    //Notify user if callback exists.
                    if (dateChange) {
                        dateChange(modelName, newDate);
                    }
                };

                function setMax(date) {
                    scope.$broadcast('pickerUpdate', pickerIDs[0], {
                        maxDate: date
                    });
                }

                function setMin(date) {
                    scope.$broadcast('pickerUpdate', pickerIDs[1], {
                        minDate: date
                    });
                }

                if (pickerRangeID) {
                    scope.$on('pickerUpdate', function (event, targetIDs, data) {
                        if (eventIsForPicker(targetIDs, pickerRangeID)) {
                            //If we received an update event, dispatch it to the inner pickers using their IDs.
                            scope.$broadcast('pickerUpdate', pickerIDs, data);
                        }
                    });
                }

                datePickerUtils.setParams(attrs.timezone);

                scope.start = createMoment(scope.start);
                scope.end = createMoment(scope.end);

                scope.$watchGroup(['start', 'end'], function (dates) {
                    //Scope data changed, update picker min/max
                    setMin(dates[0]);
                    setMax(dates[1]);
                });

                if (angular.isDefined(attrs.dateChange)) {
                    dateChange = datePickerUtils.findFunction(scope, attrs.dateChange);
                }

                attrs.onSetDate = 'dateChange';

                var template = '<div><table class="date-range"><tr><td valign="top">' +
                    getTemplate(attrs, pickerIDs[0], 'start', false, scope.end) +
                    '</td><td valign="top">' +
                    getTemplate(attrs, pickerIDs[1], 'end', scope.start, false) +
                    '</td></tr></table></div>';

                var picker = $compile(template)(scope);
                element.append(picker);
            }
        };
    }]);
    /* global moment */
    var PRISTINE_CLASS = 'ng-pristine',
        DIRTY_CLASS = 'ng-dirty';

    var Module = angular.module('datePicker');

    Module.constant('dateTimeConfig', {
        template: function (attrs, id) {
            return '' +
                '<div ' +
                (id ? 'id="' + id + '" ' : '') +
                'date-picker="' + attrs.ngModel + '" ' +
                (attrs.view ? 'view="' + attrs.view + '" ' : '') +
                (attrs.format ? 'format="' + attrs.format + '" ' : '') +
                (attrs.maxView ? 'max-view="' + attrs.maxView + '" ' : '') +
                (attrs.maxDate ? 'max-date="' + attrs.maxDate + '" ' : '') +
                (attrs.autoClose ? 'auto-close="' + attrs.autoClose + '" ' : '') +
                (attrs.template ? 'template="' + attrs.template + '" ' : '') +
                (attrs.minView ? 'min-view="' + attrs.minView + '" ' : '') +
                (attrs.minDate ? 'min-date="' + attrs.minDate + '" ' : '') +
                (attrs.partial ? 'partial="' + attrs.partial + '" ' : '') +
                (attrs.step ? 'step="' + attrs.step + '" ' : '') +
                (attrs.onSetDate ? 'date-change="' + attrs.onSetDate + '" ' : '') +
                (attrs.ngModel ? 'ng-model="' + attrs.ngModel + '" ' : '') +
                (attrs.timezone ? 'timezone="' + attrs.timezone + '" ' : '') +
                'class="date-picker-date-time"></div>';
        },
        format: 'YYYY-MM-DD HH:mm',
        views: ['date', 'year', 'month', 'hours', 'minutes'],
        autoClose: false,
        position: 'relative'
    });

    Module.directive('dateTimeAppend', function () {
        return {
            link: function (scope, element) {
                element.bind('click', function () {
                    element.find('input')[0].focus();
                });
            }
        };
    });

    Module.directive('dateTime', ['$compile', '$document', '$filter', 'dateTimeConfig', '$parse', 'datePickerUtils', '$timeout', function ($compile, $document, $filter, dateTimeConfig, $parse, datePickerUtils, $timeout) {
        var body = $document.find('body');
        var dateFilter = $filter('mFormat');

        return {
            require: 'ngModel',
            scope: true,
            link: function (scope, element, attrs, ngModel) {
                var format = attrs.format || dateTimeConfig.format,
                    parentForm = element.inheritedData('$formController'),
                    views = $parse(attrs.views)(scope) || dateTimeConfig.views.concat(),
                    view = attrs.view || views[0],
                    index = views.indexOf(view),
                    dismiss = attrs.autoClose ? $parse(attrs.autoClose)(scope) : dateTimeConfig.autoClose,
                    picker = null,
                    pickerID = element[0].id,
                    position = attrs.position || dateTimeConfig.position,
                    container = null,
                    minDate = null,
                    minValid = null,
                    maxDate = null,
                    maxValid = null,
                    timezone = attrs.timezone || false,
                    eventIsForPicker = datePickerUtils.eventIsForPicker,
                    dateChange = null,
                    shownOnce = false,
                    template;

                if (index === -1) {
                    views.splice(index, 1);
                }

                views.unshift(view);

                function formatter(value) {
                    var _date = dateFilter(value, format, timezone);
                    //默认值
                    if (!value) {
                        ngModel.$setViewValue(_date);
                        element.val(_date);
                    }
                    return _date;
                }

                function parser(viewValue) {
                    if (viewValue.length === format.length) {
                        return viewValue;
                    }
                    return undefined;
                }

                function setMin(date) {
                    minDate = date;
                    attrs.minDate = date ? date.format() : date;
                    minValid = moment.isMoment(date);
                }

                function setMax(date) {
                    maxDate = date;
                    attrs.maxDate = date ? date.format() : date;
                    maxValid = moment.isMoment(date);
                }

                ngModel.$formatters.push(formatter);
                // ngModel.$parsers.unshift(parser);



                ngModel.$parsers.push(function(val) {
                    if (!val) return;


                    if (attrs.format) {
                        return dateFilter(val, _format);
                    } else {
                        return val.getTime();

                    }
                });
                //
                // ngModel.$formatters.push(function() {
                //     if (!ngModel.$modelValue) return null;
                //     if (attrs.timestamp) {
                //         return new Date(parseInt(ngModel.$modelValue,10)).getTime();
                //     } else {
                //         return new Date(parseInt(ngModel.$modelValue,10));
                //     }
                // });


                if (angular.isDefined(attrs.minDate)) {
                    setMin(datePickerUtils.findParam(scope, attrs.minDate));

                    ngModel.$validators.min = function (value) {
                        //If we don't have a min / max value, then any value is valid.
                        return minValid ? moment.isMoment(value) && (minDate.isSame(value) || minDate.isBefore(value)) : true;
                    };
                }

                if (angular.isDefined(attrs.maxDate)) {
                    setMax(datePickerUtils.findParam(scope, attrs.maxDate));

                    ngModel.$validators.max = function (value) {
                        return maxValid ? moment.isMoment(value) && (maxDate.isSame(value) || maxDate.isAfter(value)) : true;
                    };
                }

                if (angular.isDefined(attrs.dateChange)) {
                    dateChange = datePickerUtils.findFunction(scope, attrs.dateChange);
                }

                function getTemplate() {
                    template = dateTimeConfig.template(attrs);
                }


                function updateInput(event) {
                    event.stopPropagation();
                    if (ngModel.$pristine) {
                        ngModel.$dirty = true;
                        ngModel.$pristine = false;
                        element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);
                        if (parentForm) {
                            parentForm.$setDirty();
                        }
                        ngModel.$render();
                    }
                }

                function clear() {
                    if (picker) {
                        picker.remove();
                        picker = null;
                    }
                    if (container) {
                        container.remove();
                        container = null;
                    }
                }

                if (pickerID) {
                    scope.$on('pickerUpdate', function (event, pickerIDs, data) {
                        if (eventIsForPicker(pickerIDs, pickerID)) {
                            if (picker) {
                                //Need to handle situation where the data changed but the picker is currently open.
                                //To handle this, we can create the inner picker with a random ID, then forward
                                //any events received to it.
                            } else {
                                var validateRequired = false;
                                if (angular.isDefined(data.minDate)) {
                                    setMin(data.minDate);
                                    validateRequired = true;
                                }
                                if (angular.isDefined(data.maxDate)) {
                                    setMax(data.maxDate);
                                    validateRequired = true;
                                }

                                if (angular.isDefined(data.minView)) {
                                    attrs.minView = data.minView;
                                }
                                if (angular.isDefined(data.maxView)) {
                                    attrs.maxView = data.maxView;
                                }
                                attrs.view = data.view || attrs.view;

                                if (validateRequired) {
                                    ngModel.$validate();
                                }
                                if (angular.isDefined(data.format)) {
                                    format = attrs.format = data.format || dateTimeConfig.format;
                                    ngModel.$modelValue = -1; //Triggers formatters. This value will be discarded.
                                }
                                getTemplate();
                            }
                        }
                    });
                }

                function showPicker() {
                    if (picker) {
                        return;
                    }
                    // create picker element
                    picker = $compile(template)(scope);
                    scope.$digest();

                    //If the picker has already been shown before then we shouldn't be binding to events, as these events are already bound to in this scope.
                    if (!shownOnce) {
                        scope.$on('setDate', function (event, date, view) {
                            updateInput(event);
                            if (dateChange) {
                                dateChange(attrs.ngModel, date);
                            }
                            if (dismiss && views[views.length - 1] === view) {
                                clear();
                            }
                        });

                        scope.$on('hidePicker', function () {
                            element.triggerHandler('blur');
                        });

                        scope.$on('$destroy', clear);

                        shownOnce = true;
                    }


                    // move picker below input element

                    if (position === 'absolute') {
                        var pos = angular.extend(element.offset(), {height: element[0].offsetHeight});
                        picker.css({top: pos.top + pos.height, left: pos.left, display: 'block', position: position});
                        body.append(picker);
                    } else {
                        // relative
                        container = angular.element('<div date-picker-wrapper></div>');
                        element[0].parentElement.insertBefore(container[0], element[0]);
                        container.append(picker);
                        //          this approach doesn't work
                        //          element.before(picker);
                        picker.css({top: element[0].offsetHeight + 'px', display: 'block'});
                    }
                    picker.bind('mousedown', function (evt) {
                        evt.preventDefault();
                    });
                }

                element.bind('focus', showPicker);
                element.bind('blur', clear);
                getTemplate();
            }
        };
    }]);

});

/**
 * Created by hao on 15/11/5.
 */

define('main/controllers', ['main/init'], function () {
    /**
     * 主控
     */
    function mainCtrl($scope, $rootScope, $http, $location, store,utils,modal,OPrinter,UICustomTable,watchFormChange,AjaxUtils) {
      //  $http.defaults.withCredentials=true;
        $scope.mainStatus = {
            navFold: document.body.clientWidth < 1500,
            navigation: "",
            msgBubble: 0 //消息气泡
        };
        //当前用户
        $rootScope.curUser={};

        //当前日期
        var getCurrentDate = function () {
          var _t = new Date();
          return _t.getFullYear() + '-' + (_t.getMonth() + 1) + '-' + _t.getDate();
        };
        $scope.currentDate = getCurrentDate();

        // 将Window方法上的Math赋值给当前作用域
        $scope.Math=window.Math;

        // 获取当前Url信息
        var getUrlInfo = function () {
          return {
              absUrl : $location.absUrl(),   // 返回完整url信息
              url : $location.url(),         // 返回#后面的url信息字段
              protocol : $location.protocol(),   // 返回协议
              port : $location.port(),   // 返回端口
              path : $location.path(),   // 返回路径
              hash : $location.hash(),   // 获取哈希
              search : $location.search()  // 获取url的参数的序列化json对象
            };
        };

        $scope.leftSideisShow = true;   //默认显示
        $scope.$on('$locationChangeStart', function (event, newUrl, currentUrl) {
          // 当Url发生变化，则更新Url信息
          $scope.urlInfo = getUrlInfo();

          // 左侧边栏是否隐藏
          if (newUrl.indexOf('personalCenter') !== -1) {
            $scope.leftSideisShow = false;
          } else {
            $scope.leftSideisShow = true;
          }

          // 关闭所有已打开的modal窗体
          modal.closeAll();
        });

        $scope.mainConfig = window.Config || {};

        //页面跳转
        $scope.pageTo = function (_url) {
            window.location.assign(_url);
        };


        // 调转页面
        // $scope.goTo = function (url,confirmMsg) {
        //
        //       url+=(url.indexOf("?")>-1?"&":"?")+"t="+new Date().getTime();
        //
        //     if(confirmMsg){
        //       dialogConfirm(confirmMsg, function () {
        //         window.location.assign(url);
        //       }, null);
        //     }else{
        //         window.location.assign(url);
        //     }
        // };

        //@Deprecated 已移动到$rootScope.utils中 建议使用$rootScope.utils
        $scope.goTo=utils.goTo;
        $rootScope.goTo=$scope.goTo;
        //遍历数组，返回满足属性值等于val的。
        $rootScope.getObjectByKeyOfArr = utils.getObjectByKeyOfArr;
        //推荐使用
        $rootScope.utils=utils;
        //异步请求工具类
        $rootScope.AjaxUtils=AjaxUtils;
        //本地存储
        $rootScope.store=store;
        //    $rootScope.modal.closeAll();
        $rootScope.modal=modal;
        //打印工具
        $rootScope.OPrinter=OPrinter;
          //自定义table工具类
        $rootScope.UICustomTable=UICustomTable;

        //自定义table工具类
      $rootScope.watchFormChange=watchFormChange;
        //当前服务器根上下文路径 http://localhost:3000/src/
        $rootScope.curServerPath=utils.getCurServerPath();





        $scope.httpGet = function(url) {
          if (Config.serverPath) {
              if (url.indexOf("http://") !== 0 && url.indexOf("https://") !== 0) {
                url = Config.serverPath + url;
              }
          }
          return $http.get(url);
        };

        $scope.logout = function(method) {
          var _url = '';

          if (!Config.logoutUrl) {
            alert("请设置注销接口");
            return;
          }

          if (!method) {
            method = 'POST';
          }

          if (Config.serverPath) {
            _url = Config.logoutUrl;
            if (_url.indexOf("http://") !== 0 && _url.indexOf("https://") !== 0) {
              _url = Config.serverPath + _url;
            }
          }

          $.ajax({
            url: _url,
            type: method,
            xhrFields:{withCredentials: true},
            crossDomain:true,
            dataType: 'json',
            success: function (_data) {
              window.location.href = Config.loginHtmlUrl;
            }
          });
        };

        //全局权限控制器
        $scope.hasAuthor = function (author) {
            // var arr=TestAuthor["A_"+$rootScope.curUser.phone];
            if(!author)return true;
            if(!$rootScope.curUser||!$rootScope.curUser.additional||!$rootScope.curUser.additional.Authoritys)return false;
            var arr=$rootScope.curUser.additional.Authoritys;

            if ($.inArray(author, arr) == -1) {
                return false;
            } else {
                return true;
            }
        };
        //全局权限控制器,满足任意一个及返回成功
        $scope.hasAuthorOr = function (authorList) {
          if(angular.isArray(authorList)){
            if(authorList.length==0)return true;
            for(var i=0;i<authorList.length;i++){
              var obj=authorList[i];
              if($scope.hasAuthor(authorList[i]))return true;
            }
            return false;
          }else{
            return $scope.hasAuthor(authorList);
          }
        };

        //全局权限控制器,满足全部权限返回成功
        $scope.hasAuthorAnd = function (authorList) {
          if(angular.isArray(authorList)){
              if(authorList.length==0)return true;
            for(var i=0;i<authorList.length;i++){
              var obj=authorList[i];
              if(!$scope.hasAuthor(authorList[i]))return false;
            }

            return true;
          }else{
            return $scope.hasAuthor(authorList);
          }
        };

        $rootScope.hasAuthor = $scope.hasAuthor;
        $rootScope.hasAuthorOr = $scope.hasAuthorOr;
        $rootScope.hasAuthorAnd = $scope.hasAuthorAnd;



        /**
        加载当前用户信息
        */
        function loadMainInfo(){
          //获取主要信息
          if ($scope.mainConfig.getMainInfo) {
              var _url = $scope.mainConfig.getMainInfo;

              if (Config.serverPath) {
                if (_url.indexOf("http://") !== 0 && _url.indexOf("https://") !== 0) {
                  _url = Config.serverPath + _url;
                }
                // 定义服务器请求路径
                  $scope.mainStatus.serverPath = Config.serverPath;
                //解决 配置同服务器请。/dt/。废弃该参数：mainStatus.requestPath
                  $scope.mainStatus.requestPath="";

                    // require.dir = loaderScript.src.match(/[^?#]*\//)[0];
              }

              $.ajax({
                url: _url,
                type: 'get',
                xhrFields:{withCredentials: true},
                crossDomain:true,
                dataType: 'json',
                success: function (_data) {
                  if (_data.code == 200) {
                    $rootScope.curUser=_data.data;
                      //未绑定用户，跳转到绑定用户绑定
                      if(Config.applyBindUrl){
                        //没有关联组织则跳转到申请绑定页面
                        if(!$rootScope.curUser.additional.HabbitOrganizationId){
                            window.location.href = Config.applyBindUrl;
                            return;
                        }
                          //没有关联部门则跳转到申请绑定页面
                        if(!$rootScope.curUser.additional.DepartmentId){
                            window.location.href = Config.applyBindUrl;
                            return;
                        }
                      }

                    $scope.habbit={mainRole:$scope.getMainRole()};

                    if(window.location.href.indexOf('#'+Config.indexPage)>-1){
                            $scope.goToMainRole($scope.habbit.mainRole);
                    }

                    angular.extend($scope.mainStatus, _data.data);
                    $scope.$digest();
                    // 角色跳转主页面

                  } else if (_data.code == 802){
                      alert(_data.msg || '登录失败');
                    if(Config.loginHtmlUrl)window.location.href = Config.loginHtmlUrl;
                  } else {
                    alert(_data.msg || '登录失败');
                  }
                }
              });

          }
        }

        loadMainInfo();
        //接受广播
        $rootScope.$on("loadMainInfo", function() {
          loadMainInfo();
        });


        //后退
        $(document).on("click", ".top-nav-wrap .backBtn", function () {
            window.history.back();
        });
        //根据角色跳转对应页面
        $scope.goToMainRole = function (mainRole) {



            if(!mainRole)mainRole='客服';
            if(!$scope.habbit)   $scope.habbit={};
            $scope.habbit.mainRole=mainRole;

            store.set('habbit.mainRole',mainRole);
            switch (mainRole) {
              case '客服':$scope.goTo('#/main.html');break;
              case '销售':$scope.goTo('#/authorIndex/main-salemanager.html');break;
              case '总经理':$scope.goTo('#/authorIndex/main-generalmanager.html');break;
              case '采购':$scope.goTo('#/authorIndex/main-purchasemanager.html');break;
              case '库管':$scope.goTo('#/authorIndex/main-repertorymanager.html');break;
              case '验收':$scope.goTo('#/authorIndex/main-checkmanager.html');break;

              default: $scope.goTo('#/main.html');
            }
          }
          //获取主页角色
          $scope.getMainRole = function () {
              var mainRole=store.get('habbit.mainRole');

              var tmp='';
               if($rootScope.hasAuthor('总经理')){
                tmp='总经理';
                if(mainRole==tmp)return tmp;
              }else if($rootScope.hasAuthor('销售单查询')){
                tmp='销售';
                  if(mainRole==tmp)return tmp;
              }
              else if($rootScope.hasAuthor('采购单查询')){
                tmp='采购';
                  if(mainRole==tmp)return tmp;
              }else if($rootScope.hasAuthor('出入库单中心')){
                tmp='库管';
                  if(mainRole==tmp)return tmp;
              }else if($rootScope.hasAuthor('验单中心')){
                tmp='验收';
                  if(mainRole==tmp)return tmp;
              } else if($rootScope.hasAuthor('购需单查询')){
                tmp='客服';
                  if(mainRole==tmp)return tmp;
              }
            return tmp;
        }




    }//end mainCtrl

    /**
     * 侧边菜单
     */
    function sideNav($scope) {
    }

    /**
     *  主页面控制器
     */
    function pageCtrl($scope, modal, dialogConfirm, $timeout) {
        modal.closeAll();

        // 取消返回
        $scope.cancelThis = function (_text, _mode, _title) {
          dialogConfirm(_text, function () {
            window.history.go(-1);
          }, _mode, _title);
        };

        //..
        $scope.handleThisSubmit = function (_text, _mode, _title, _url) {
          dialogConfirm(_text, function () {
            $scope.pageTo(_url);
          }, _mode, _title, _url);
        };

        // easypiechart 全局样式定义
        $scope.easypiechart_options = {
          animate:{
            duration:1000,
            enabled:true
          },
          barColor: '#f30',
          trackColor: '#ffe8ce',
          scaleColor: false,
          lineWidth: 8,
          lineCap: 'round',
          size: 125
        };
    }

    /**
     *用于编辑
     */
    function editCtrl($scope, modal) {
        modal.closeAll();
    }

    angular.module('manageApp.main')
        .controller('mainCtrl',  ["$scope","$rootScope","$http", "$location", "store","utils","modal","OPrinter",
        "UICustomTable","watchFormChange","AjaxUtils", mainCtrl])
        .controller('sideNav',  ["$scope",sideNav])
        .controller('editCtrl',  ["$scope","modal",editCtrl])
        .controller('pageCtrl',  ["$scope","modal", "dialogConfirm", "$timeout", pageCtrl]);
});

/**
 * Created by hao on 15/11/5.
 */

define('main/directives', ['main/init'], function() {

    /**
     * Clear ng-view template cache
     */
    function ngView($route, $templateCache, $routeParams) {
        return {
            restrict: 'A',
            priority: -500,
            link: function($scope, $element) {
                $templateCache.remove($route.current.loadedTemplateUrl);
                $scope.mainStatus.pageParams = $routeParams;
            }
        };
    }


    /**
     * 转换日期
     */
    function convertToDate($filter) {
        var dateFilter = $filter('date');
        return {
            require: 'ngModel',
            link: function($scope, $element, $attrs, ngModel) {
                var _format = $attrs.convertToDate ? $attrs.convertToDate : "yyyy-MM-dd";

                ngModel.$parsers.push(function(val) {
                    if (!val) return;


                    if ($attrs.format) {
                        return dateFilter(val, _format);
                    } else {
                        return val.getTime();

                    }
                });

                ngModel.$formatters.push(function() {
                    if (!ngModel.$modelValue) return null;
                    if ($attrs.timestamp) {
                        return new Date(parseInt(ngModel.$modelValue,10)).getTime();
                    } else {
                        return new Date(parseInt(ngModel.$modelValue,10));
                    }
                });
            }
        };
    }

    /**
     * 转换为数字
     */
    function convertToNumber() {
        return {
            require: 'ngModel',
            link: function(scope, element, attrs, ngModel) {
                ngModel.$parsers.push(function(val) {
                    return parseInt(val, 10);
                });
                ngModel.$formatters.push(function(val) {
                    return '' + val;
                });
            }
        };
    }

    /**
     * JSON转换为
     */
    function convertJsonToObject() {
        return {
            require: 'ngModel',
            link: function(scope, element, attrs, ngModel) {
                ngModel.$parsers.push(function(val) {
                    if (!val) return null;
                    return angular.fromJson(val);
                });
                ngModel.$formatters.push(function(val) {
                    return angular.toJson(val);
                });
            }
        };
    }
    convertJsonToObject.$inject = [];

    /**
    必填参数：
    attrs.ajaxUrl=""：请求数据参数
    可选参数：
    $attrs.ajaxUrlHandler :function(data) 指定回调方法
    $attrs.params  //监听具体值
    $attrs.scopeResponse ：返回数据Response是绑定到 $scope[$attrs.scopeResponse]
    $attrs.scopeData ：返回数据Response.data是绑定到 $scope[$attrs.scopeData]
    $attrs.scopeErrorMsg ：返回数据错误数据是否绑定到 $scope[$attrs.scopeErrorMsg]
    $attrs.alertOk :是否提示请求成功提示。
    $attrs.alertError :是否提示请求失败提示。
    $attrs.ajaxIf :满足条件才异步请求  ajax-if="{{addDataItem.relId}}"

    $attrs.callback:满足条件才异步请求 回调方法。比如 callback="formData={}"

$attrs.callback:异步加载 成功后，回调执行代码行。作用域$scope， callback="formData.courseId=details[0].value"
    请求返回数据格式：
      scopeResponse=  {
          "code": 200,
          "msg": "操作成功",
          "data": {
            "id": "id1",
            "name": "帐号1"
          }
        }

     */
     function ajaxUrl($timeout, requestData, alertOk, alertError, proLoading,utils) {
         return {
             restrict: 'AE',
             // scope: true,
             transclude: true,
             link: function($scope, $element, $attrs, $ctrls, $transclude) {
                 $transclude($scope, function(clone) {
                     $element.append(clone);
                 });

                 $scope.ajaxUrlHandler = $scope.$eval($attrs.ajaxUrlHandler);
                 // if($attrs.responseKey)$scope[$attrs.responseKey]={};
                 var _params = {};
                 if ($attrs.params) {
                     if ($attrs.params.indexOf("{") === 0) {
                         //监听具体值
                         $attrs.$observe("params", function(value) {
                             _params = $scope.$eval(value);
                             getData(_params);
                         });
                     } else {
                         //监听对象
                         $scope.$watch($attrs.params, function(value) {
                             _params = value;
                             getData(_params);
                         }, true);
                     }
                 } else {
                     $attrs.$observe("ajaxUrl", function(value) {
                         getData({});
                     });
                 }



                //  if ($attrs.showLoading) {
                //    proLoading($element, $scope, 'showLoading', {});
                //    $scope.$watch($scope.isLoading, function () {
                //      $('.pr-full-loading').remove();
                //    });
                //  }

                 function getData(params) {
                    //满足条件才异步请求
                    if (angular.isDefined($attrs.ajaxIf)) {
                      if (!$attrs.ajaxIf) return;
                    }
                    if (angular.isDefined($attrs.ajaxIfEval)) {
                        var tmp=$scope.$eval($attrs.ajaxIfEval);
                      if (!tmp) return;
                    }
                    $scope.isLoading = true;
                    var maskObj=null;
                    if (!$attrs.noshowLoading) {
                      maskObj=proLoading($element);
                      //  if(maskObj)maskObj.hide();
                    }
                   if ($attrs.scopeErrorMsg) $scope[$attrs.scopeErrorMsg] ="";
                    requestData($attrs.ajaxUrl, params)
                      .then(function(results) {
                            if(maskObj)maskObj.hide();
                          var data = results[0];

                          if ($scope.ajaxUrlHandler) {
                              data = $scope.ajaxUrlHandler(data);
                          }

                          if ($attrs.scopeResponse) $scope[$attrs.scopeResponse] = results[1];
                          // if ($attrs.scopeData) $scope[$attrs.scopeData] = data;
                          // else $scope.scopeData = data;


                          if ($attrs.scopeData){

                            if(!$scope[$attrs.scopeData]) {
                              if(angular.isArray(results[0])){
                                $scope[$attrs.scopeData]=[];//数组extend 会把数组转化成对象。
                              }else{
                                $scope[$attrs.scopeData]={};
                              }

                            }
                            utils.replaceObject($scope[$attrs.scopeData],results[0]);

                              // if(!$scope[$attrs.scopeData])  $scope[$attrs.scopeData]={};
                              // if(angular.isArray(results[0])){
                              //   $scope[$attrs.scopeData]=results[0];//数组extend 会把数组转化成对象。
                              // }else{
                              //   $.extend( true,$scope[$attrs.scopeData],  results[0]);//解决监听fromdata失败bug。
                              // }

                              // angular.extend(  $scope[$attrs.scopeData],  results[0]);//
                          }

                          if (angular.isDefined($attrs.alertOk)) alertOk(results[1].msg);

                          //回调父级的处理事件;
                          if ($scope.listCallback) {
                            $scope.listCallback(results[1]);
                          }

                          // $scope.$apply();
                          if ($attrs.callback) {
                              $scope.$eval($attrs.callback);
                          }


                          $scope.isLoading = false;
                      })
                      .catch(function(msg) {
                            if(maskObj)maskObj.hide();

                            if ($attrs.errorCallback) {
                                $scope.$eval($attrs.errorCallback);
                            }

                         if ($attrs.scopeErrorMsg) $scope[$attrs.scopeErrorMsg] = (msg);
                         if (angular.isDefined($attrs.alertError)) alertError(msg);
                         $('.pr-full-loading').remove();
                      });

                 }

                 $scope.$on("ajaxUrlReload", function() {
                    //  getData(_detailsParams);
                    getData({});

                 });
             }
         };
     }

    /**
 表单验证
     必填参数：
     attrs.formValidator：
     attrs.action；请求数据参数
     可选参数：
     $attrs.ajaxUrlHandler :function(data) 指定回调方法
     $attrs.params  //监听具体值
     $attrs.scopeResponse ：返回数据Response是绑定到 $scope[$attrs.scopeResponse]
     $attrs.scopeData ：返回数据Response.data是绑定到 $scope[$attrs.scopeData]
     $attrs.scopeErrorMsg ：返回数据错误数据是否绑定到 $scope[$attrs.scopeErrorMsg]
     $attrs.broadcast ：是否发送广播
     $attrs.alertOk :是否提示请求成功提示。
     $attrs.alertError :是否提示请求失败提示。
     $attrs.autoCloseDialog：关闭弹出窗口

     // $scope添加方法：提交表单方法
       $scope.submitForm1();

      if($attrs.formSubmitAfter=="reset"){
          DOMForm.reset(); //清空表格
      }else   if($attrs.formSubmitAfter=="donothing"){
          return;
      }

     请求返回数据格式：
       scopeResponse=  {
           "code": 200,
           "msg": "操作成功",
           "data": {
             "id": "id1",
             "name": "帐号1"
           }
         }


     */
    function formValidator(requestData, modal, alertOk, alertError, dialogConfirm, $timeout,utils) {
        return {
            restrict: 'A',
            // scope: true,
            link: function($scope, $element, $attrs) {
                var formStatus = $scope.formStatus = {
                    submitted: false,
                    submitting: false,
                    submitInfo: ""
                };
                var DOMForm = angular.element($element)[0];
                var scopeForm = $scope.$eval($attrs.name);
                var dialogData = $scope.ngDialogData;


                // $scope.formData = angular.extend({}, $scope.formData);
                if(!$scope.formData)$scope.formData = angular.extend({}, $scope.formData);

                $scope.$watch($attrs.source, function(value) {
                    if (value && angular.isObject(value)) {
                        // angular.extend($scope.formData, value);
                          $.extend( true,$scope.formData, value);//解决监听fromdata失败bug。
                    }
                });

                // var appointScope=$scope;
                // //指定作用域
                // if($attrs.callbackScopeKey){
                //     var appointScope=  utils.getAppointScope($scope,$attrs.callbackScopeKey);
                //
                // }

                function ajax_submit(){
                  if(formStatus.submitting === true) return;
                  formStatus.submitting = true;

                  var parameterBody = false;
                  if (angular.isDefined($attrs.parameterBody)) {
                    parameterBody = true;
                    if($attrs.parameterBody=="false"){
                      parameterBody=false;
                    }
                  }
                  var data= $scope.formData;
                  if($attrs.formData){
                    data=$scope[$attrs.formData];
                  }
                  if ($attrs.scopeErrorMsg) $scope[$attrs.scopeErrorMsg] ="";
                    if ($attrs.scopeOkMsg) $scope[$attrs.scopeOkMsg] ="";
                  var httpMethod="POST"
                  if($attrs.httpMethod){
                    httpMethod=$attrs.httpMethod;
                  }
                  requestData($attrs.action,data,httpMethod, parameterBody)
                    .then(function(results) {
                      var data = results[0];
                      var data1 = results[1];
                      formStatus.submitting = false;
                      formStatus.submitInfo = "";

                      if ($attrs.scopeResponse) $scope[$attrs.scopeResponse] = results[1];
                      if ($attrs.scopeData){
                        if(!$scope[$attrs.scopeData]) {
                          if(angular.isArray(results[0])){
                            $scope[$attrs.scopeData]=[];//数组extend 会把数组转化成对象。
                          }else{
                            $scope[$attrs.scopeData]={};
                          }

                        }
                        utils.replaceObject($scope[$attrs.scopeData],results[0]);
                          // $.extend( true,$scope[$attrs.scopeData],  results[0]);//解决监听fromdata失败bug。
                          // angular.extend(  $scope[$attrs.scopeData],  results[0]);//
                      }

                      if (angular.isDefined($attrs.alertOk)) alertOk(results[1].msg);
                      if ($attrs.scopeOkMsg) $scope[$attrs.scopeOkMsg] =results[1].msg;
                      //重置表单
                      if ($attrs.formSubmitAfter == "reset") {
                          DOMForm.reset();
                      }

                      if ($attrs.callback) {
                        // proMessageTips('测试文字tips');
                        // $timeout(function () {
                        //
                        // }, 3000);
                          $scope.$eval($attrs.callback);
                      }

                      if ($attrs.broadcast) {
                          $scope.$broadcast($attrs.broadcast);
                          $scope.$emit($attrs.broadcast);
                          // if (angular.isDefined($attrs.autoCloseDialog)) {
                          //     modal.close();
                          // }
                          // return;
                      }

                      // 增加属性no-close-dialog设置不自动关闭模态框
                      if (angular.isDefined($attrs.noCloseDialog)) {
                          return;
                      }

                      if (data1 && data1.url) {
                          window.location.assign(data1.url);
                          return;
                      }

                      if (angular.isFunction($scope.submitCallBack)) {
                          $scope.submitCallBack.call($scope, dialogData, data);
                      } else if (data && data.url) {
                          window.location.assign(data.url);
                          // dialogAlert(data.message || '提交成功', function () {
                          //     window.location.assign(data.url);
                          // })
                      } else {
                          $scope.$broadcast("reloadList");
                      }
                      //自动关闭弹窗
                      if (angular.isDefined($attrs.autoCloseDialog)) {
                        modal.close();
                      }
                      //angular.isDefined($attrs.autoCloseDialog) && modal.close();

                  })
                  .catch(function(error) {
                      formStatus.submitting = false;
                      formStatus.submitInfo = error || '提交失败。';
                      if ($attrs.scopeErrorMsg) $scope[$attrs.scopeErrorMsg] =error;
                      if (angular.isDefined($attrs.alertError)) alertError(error);
                      //angular.isFunction($scope.submitCallBack) && $scope.submitCallBack.call($scope, dialogData, "");
                  });
                }

                $element.on("submit", function(e) {
                  e.preventDefault();
                  if ($attrs.beforeConfirmMsg) {
                    dialogConfirm($attrs.beforeConfirmMsg, function () {
                      ajax_submit();
                    }, null);
                  } else {
                    ajax_submit();
                  }
                });

                //提交表单方法
                  $scope.submitForm1=function(){
                      $element.trigger('submit');
                  }

                  // 保存  type:save-草稿,submit-提交订单。
                  function goToFN(key,obj) {
                    if(!key||!obj)return;
                    var goToUrl=obj[key];
                    if(!goToUrl)return;
                    utils.goTo(goToUrl);
                  };

                   function updateStatusFN(key,obj,updateStatus) {

                      var url=updateStatus.url;
                      var data= updateStatus.param;
                      requestData(url,data, 'POST')
                        .then(function (results) {
                          var _data = results[1];
                         //  alertOk(_data.message || '操作成功');
                          goToFN(key,obj);
                        })
                        .catch(function (error) {
                          alertError(error || '出错');
                        });

                  };
                  // 保存  type:save-草稿,submit-提交订单。
                  $scope.submitFormAfter1 = function(key,obj,updateStatus) {
                    $scope.formData.validFlag = false;
                      if(!key)return;
                    if(updateStatus&&key==updateStatus.type){
                      updateStatusFN(key,obj,updateStatus);
                        return;
                    }
                    goToFN(key,obj);

                  };

              $scope.reset = function() {
                  DOMForm.reset();
              };



              if ($attrs.scopeExtend){
                  var scopeExtend=utils.getScopeExtend($scope,$attrs.scopeExtend);
                  if(scopeExtend){
                    scopeExtend.formValidator={};
                    scopeExtend.formValidator.reset=$scope.reset;
                      scopeExtend.formValidator.submitForm1=$scope.submitForm1;

                  }

              }


            }
        };
    }//formValidator




    /**
     * 表格
     */
    function tableList(requestData, modal, dialogConfirm, $timeout, proLoading,alertError) {
        return {
            restrict: 'AE',
            scope: {
                listParams: "=?",
                listSelected: "=?",
                listSource: "=?",
                listObject: "=?"
            },
            transclude: true,
            require: "?^ngModel",
            link: function($scope, $element, $attrs, ngModel, $transclude) {
                var statusInfo = {
                    currentPage: 1,
                    totalCount: 0,
                    pageSize: 10,
                    totalPage: 1,
                    isFinished: false,
                    isLoading: false
                };
                $scope.mainStatus = $scope.$parent.mainStatus;
                $scope.parent = $scope.$parent;
                $scope.status = statusInfo;
                $scope.listData = $attrs.listData;
                $scope.theadList = angular.fromJson($attrs.listThead);
                $scope.tbodyList = [];
                $scope.getListData = getListData;
                if (!angular.isDefined($scope.listParams)) {
                    $scope.listParams = {};
                }
                if (!angular.isDefined($scope.listSelected)) {
                    $scope.listSelected = [];
                }
                if (!angular.isDefined($scope.listObject)) {
                    $scope.listObject = {};
                }

                //批量删除
                $scope.delSelected = function(_url) {
                    dialogConfirm('确定删除这些?', function() {
                        requestData(_url, {
                                ids: $scope.listSelected.join(",")
                            }, 'POST')
                            .then(function() {
                                $scope.$broadcast("reloadList");
                            })
                            .catch(function(error) {
                                alert(error || '删除错误');
                            });
                    });
                };
                //单个删除
                $scope.deleteThis = function(_url, _param) {
                    var _tr = this.tr;
                    dialogConfirm('确定删除?', function() {
                        requestData(_url, {
                                id: _param
                            }, 'POST')
                            .then(function() {
                                $scope.tbodyList.splice($scope.tbodyList.indexOf(_tr), 1);
                                if ($scope.tbodyList.length === 0) {
                                    $scope.$broadcast("reloadList");
                                }
                            })
                            .catch(function(error) {
                                alert(error || '删除错误');
                            });
                    });
                };
                //单个操作
                $scope.dothing = function(_url, _param,tip) {
                    var _tr = this.tr;
                    dialogConfirm(tip, function() {
                        requestData(_url, _param, 'POST')
                            .then(function() {
                                $scope.tbodyList.splice($scope.tbodyList.indexOf(_tr), 1);
                                if ($scope.tbodyList.length !== 0) {
                                    $scope.$broadcast("reloadList");
                                }
                            })
                            .catch(function(error) {
                                alert(error || '删除错误');
                            });
                    });
                };
                //选择当个
                $scope.selectThis = function() {
                    var _tr = this.tr;
                    var _index = $scope.tbodyList.indexOf(_tr);
                    var $tr = $element.find("tbody tr");
                    $tr.removeClass("on").eq(_index).addClass("on");
                    if (ngModel) {
                        ngModel.$setViewValue(angular.copy(_tr));
                    }
                };
                //改变状态
                $scope.changeStatus = function(_url, _text) {
                    var _tr = this.tr;
                    dialogConfirm(_text || '确定?', function() {
                        requestData(_url, {
                                id: _tr.id
                            })
                            .then(function(results) {
                                var _data = results[0];
                                var _index = $scope.tbodyList.indexOf(_tr);
                                $scope.tbodyList[_index] = _data;
                            })
                            .catch(function(error) {
                                alert(error || '请求失败!');
                            });
                    });
                };

                //弹窗修改后的回调
                $scope.submitCallBack = function(_curRow, _data) {
                    modal.closeAll();
                    if (_data && _curRow) { //修改
                        angular.forEach($scope.tbodyList, function(_row, _index) {
                            if (_row.id == _curRow.id) {
                                $scope.tbodyList[_index] = _data;
                            }
                        });
                    } else {
                        $timeout(function() {
                            $scope.$broadcast("reloadList");
                        });
                    }
                };

                var formData = {};
                var timestamp=null;
                function getListData(_callback) {
                  if(!$attrs.listData)return;

                    if ($attrs.listSource) {
                        if ($scope.listSource) {
                            $scope.tbodyList = angular.isArray($scope.listSource) ? $scope.listSource : $scope.listSource.list;
                            if ($scope.listSource.options) {
                                statusInfo.totalCount = $scope.listSource.options.totalCount || statusInfo.totalCount;
                                statusInfo.pageSize = $scope.listSource.options.pageSize || statusInfo.pageSize;
                                statusInfo.totalPage = Math.ceil(statusInfo.totalCount / statusInfo.pageSize);
                            }
                            if (_callback) {
                                _callback();
                            }
                        }
                        return;
                    }

                    //满足条件才异步请求
                    if (angular.isDefined($attrs.ajaxIf)) {
                        if (!$attrs.ajaxIf) return;
                    }
                    if (angular.isDefined($attrs.ajaxIfEval)) {
                        var tmp=$scope.$eval($attrs.ajaxIfEval);
                      if (!tmp) return;
                    }

                    if (statusInfo.isLoading) {
                        return;
                    }
                    statusInfo.isLoading = true;

                    $scope.isLoading = statusInfo.isLoading;

                    var maskObj=null;
                    if (!$attrs.noshowLoading) {
                      maskObj=proLoading($element);
                      //  if(maskObj)maskObj.hide();
                    }

                      //时间戳(用于分页查询时避免翻页时数据变动造成重复数据)
                        if(!(statusInfo.currentPage >1)){
                          timestamp=new Date().getTime();
                        }
                    requestData($attrs.listData, angular.merge({}, formData, {
                            timestamp:timestamp,
                            pageNo: statusInfo.currentPage
                        }))
                        .then(function(results) {
                           if(maskObj)maskObj.hide();
                            var data = results[1];
                            if (data.code == 200) {
                                statusInfo.totalCount = data.totalCount;
                                statusInfo.pageSize = data.pageSize;

                                if (statusInfo.totalCount && statusInfo.pageSize) {
                                    statusInfo.totalPage = Math.ceil(statusInfo.totalCount / statusInfo.pageSize);
                                }

                                if (data.thead) {
                                    $scope.theadList = data.thead;
                                }
                                //自定义 tableList 增加 $scope.resultsData = data
                                $scope.resultsData = data;


                                if (data.data && data.data.length > 0) {
                                    $scope.tbodyList = data.data;
                                } else {
                                    statusInfo.isFinished = true;
                                }
                                statusInfo.loadFailMsg = data.msg;

                            } else {
                                statusInfo.isFinished = true;
                                statusInfo.loadFailMsg = data.msg;

                            }

                            if ($attrs.callback) {
                                $scope.$eval($attrs.callback);
                            }

                            statusInfo.isLoading = false;
                            $scope.isLoading = false;
                            $timeout(bindSelectOneEvent);
                            if (_callback) {
                                _callback();
                            }
                        })
                        .catch(function(error) {
                           if(maskObj)maskObj.hide();
                            statusInfo.isLoading = false;
                            alertError(error);
                            statusInfo.loadFailMsg = error;
                            if (_callback) {
                                _callback();
                            }
                        });
                }

                //设置值
                function setSelectedValue() {
                    //listSelected
                    var _checked = [];
                    $scope.listSelected.length = 0;
                    $(".selectOne:checked", $element).each(function() {
                        _checked.push(this.value);
                    });
                    [].unshift.apply($scope.listSelected, _checked);

                    //ngModel
                    var _selected = [];
                    angular.forEach($scope.tbodyList, function(ls) {
                        angular.forEach($scope.listSelected, function(selected) {
                            if (ls.id == selected) {
                                _selected.push(ls);
                            }
                        });
                    });
                    if (ngModel) {
                        ngModel.$setViewValue(_selected);
                    }
                }
                //删除值
                $scope.$on("deleteSelected", function(event, selected) {
                    $(".selectOne[value=" + selected.id + "]", $element).prop("checked", false);

                    var _selectCount = $(".selectOne", $element).length;
                    var _checkedCount = $(".selectOne:checked", $element).length;
                    if (_checkedCount > 0 && _checkedCount < _selectCount) {
                        $(".selectAll", $element).prop("checked", false).get(0).indeterminate = true;
                    } else if (_selectCount == _checkedCount) {
                        $(".selectAll", $element).prop("checked", true).get(0).indeterminate = false;
                    } else {
                        $(".selectAll", $element).prop("checked", false).get(0).indeterminate = false;
                    }

                    var _checked = [];
                    $scope.listSelected.length = 0;
                    $(".selectOne:checked", $element).each(function() {
                        _checked.push(this.value);
                    });
                    [].unshift.apply($scope.listSelected, _checked);
                    setSelectedValue();
                });

                //直接来自源
                $scope.$watchCollection("listSource", function(value) {
                    if (value) {
                        getListData(setSelectedValue);
                    }
                });

                //


                $scope.$watch("listParams", function() {
                    statusInfo.currentPage = 1;
                    statusInfo.isFinished = false;
                    $scope.tbodyList = [];
                    formData = angular.copy($scope.listParams);

                    // if (formData.q) {
                    //   formData.q = "(?i)" + formData.q;
                    // }

                    getListData(setSelectedValue);
                    //清除选择框
                    if ($(".selectAll", $element).length > 0) {
                        $(".selectAll", $element).prop("checked", false).get(0).indeterminate = false;
                    }
                }, true);

                $attrs.$observe("listData", function(value) {
                    statusInfo.currentPage = 1;
                    statusInfo.isFinished = false;
                    $scope.tbodyList = [];
                    formData = angular.copy($scope.listParams);
                    getListData(setSelectedValue);
                    //清除选择框
                    if ($(".selectAll", $element).length > 0) {
                        $(".selectAll", $element).prop("checked", false).get(0).indeterminate = false;
                    }
                });

                //接受广播
                $scope.$on("reloadList", function() {
                    statusInfo.currentPage = 1;
                    statusInfo.isFinished = false;
                    $scope.tbodyList = [];
                    formData = angular.copy($scope.listParams);
                    getListData(setSelectedValue);
                    //清除选择框
                    if ($(".selectAll", $element).length > 0) {
                        $(".selectAll", $element).prop("checked", false).get(0).indeterminate = false;
                    }
                });


                $($element)
                    //全选
                    .on("click", ".selectAll", function() {
                        if (this.indeterminate) {
                            this.checked = false;
                            $(".selectOne", $element).prop("checked", false);
                        } else {
                            $(".selectOne", $element).prop("checked", this.checked);
                        }

                        setSelectedValue();
                        $scope.$apply();
                    });

                //选择单个
                function bindSelectOneEvent() {
                    $(".selectOne", $element).on("click", function(e) {
                        e.stopPropagation();
                        var _selectCount = $(".selectOne", $element).length;
                        var _checkedCount = $(".selectOne:checked", $element).length;
                        if (_checkedCount > 0 && _checkedCount < _selectCount) {
                            $(".selectAll", $element).prop("checked", false).get(0).indeterminate = true;
                        } else if (_selectCount == _checkedCount) {
                            $(".selectAll", $element).prop("checked", true).get(0).indeterminate = false;
                        } else {
                            $(".selectAll", $element).prop("checked", false).get(0).indeterminate = false;
                        }

                        setSelectedValue();
                        $scope.$apply();
                    });
                }

                $transclude($scope, function(clone) {
                    $element.append(clone);
                });
            }
        };
    }

    /**
     * 表格 单元格
     */
    function tableCell() {
        return {
            restrict: 'AE',
            scope: {
                row: "="
            },
            replace: true,
            templateUrl: Config.tplPath + 'tpl/table-cell.html',
            link: function($scope, $element, $attrs) {
                $scope.cells = [];
                if (angular.isString($scope.row) || angular.isNumber($scope.row)) {
                    $scope.cells.push({
                        text: $scope.row
                    });
                } else if (angular.isArray($scope.row)) {
                    angular.forEach($scope.row, function(_value) {
                        if (angular.isObject(_value)) {
                            $scope.cells.push(_value);
                        } else {
                            $scope.cells.push({
                                text: _value
                            });
                        }
                    });
                } else {
                    $scope.cells.push($scope.row);
                }
            }
        };
    }

    /**
     * 分页
     */
    function pagination() {
        return {
            restrict: 'AE',
            scope: true,
            replace: true,
            templateUrl: Config.tplPath + 'tpl/pagination.html',
            link: function($scope, $element, $attrs) {
                var maxSize = angular.isDefined($attrs.maxSize) ? $scope.$parent.$eval($attrs.maxSize) : 10,
                    rotate = angular.isDefined($attrs.rotate) ? $scope.$parent.$eval($attrs.rotate) : true;

                $scope.start = function() {
                    if ($scope.status.currentPage == 1) {
                        return;
                    }
                    $scope.status.currentPage = 1;
                    $scope.getListData();
                };
                $scope.prev = function() {
                    if ($scope.status.currentPage <= 1) {
                        return;
                    }
                    $scope.status.currentPage--;
                    $scope.getListData();
                };
                $scope.next = function() {
                    if ($scope.status.currentPage >= $scope.status.totalPage) {
                        return;
                    }
                    $scope.status.currentPage++;
                    $scope.getListData();
                };
                $scope.end = function() {
                    if ($scope.status.currentPage == $scope.status.totalPage) {
                        return;
                    }
                    $scope.status.currentPage = $scope.status.totalPage;
                    $scope.getListData();
                };
                $scope.goto = function(_page) {
                    $scope.status.currentPage = _page;
                    $scope.getListData();
                };

                $scope.$watch("status.totalPage", function() {
                    $scope.pages = getPages($scope.status.currentPage, $scope.status.totalPage);
                });
                $scope.$watch("status.currentPage", function() {
                    $scope.pages = getPages($scope.status.currentPage, $scope.status.totalPage);
                });

                function makePage(number, text, isActive) {
                    return {
                        number: number,
                        text: text,
                        active: isActive
                    };
                }

                function getPages(currentPage, totalPages) {
                    var pages = [];

                    // Default page limits
                    var startPage = 1,
                        endPage = totalPages;
                    var isMaxSized = angular.isDefined(maxSize) && maxSize < totalPages;

                    // recompute if maxSize
                    if (isMaxSized) {
                        if (rotate) {
                            // Current page is displayed in the middle of the visible ones
                            startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
                            endPage = startPage + maxSize - 1;

                            // Adjust if limit is exceeded
                            if (endPage > totalPages) {
                                endPage = totalPages;
                                startPage = endPage - maxSize + 1;
                            }
                        } else {
                            // Visible pages are paginated with maxSize
                            startPage = ((Math.ceil(currentPage / maxSize) - 1) * maxSize) + 1;

                            // Adjust last page if limit is exceeded
                            endPage = Math.min(startPage + maxSize - 1, totalPages);
                        }
                    }

                    // Add page number links
                    for (var number = startPage; number <= endPage; number++) {
                        var page = makePage(number, number, number === currentPage);
                        pages.push(page);
                    }

                    // Add links to move between page sets
                    if (isMaxSized && !rotate) {
                        if (startPage > 1) {
                            var previousPageSet = makePage(startPage - 1, '...', false);
                            pages.unshift(previousPageSet);
                        }

                        if (endPage < totalPages) {
                            var nextPageSet = makePage(endPage + 1, '...', false);
                            pages.push(nextPageSet);
                        }
                    }

                    return pages;
                }
            }
        };
    }

    /**
     * 分页2
     */
    function pagination2() {
        return {
            restrict: 'AE',
            scope: true,
            replace: true,
            templateUrl: Config.tplPath + 'tpl/pagination2.html',
            link: function($scope, $element, $attrs) {
                $scope.start = function() {
                    if ($scope.status.currentPage == 1) {
                        return;
                    }
                    $scope.status.currentPage = 1;
                    $scope.getListData();
                };
                $scope.prev = function() {
                    if ($scope.status.currentPage <= 1) {
                        return;
                    }
                    $scope.status.currentPage--;
                    $scope.getListData();
                };
                $scope.next = function() {
                    if ($scope.status.currentPage >= $scope.status.totalPage) {
                        return;
                    }
                    $scope.status.currentPage++;
                    $scope.getListData();
                };
                $scope.end = function() {
                    if ($scope.status.currentPage == $scope.status.totalPage) {
                        return;
                    }
                    $scope.status.currentPage = $scope.status.totalPage;
                    $scope.getListData();
                };
            }
        };
    }

    /**
     * 筛选
     */
    function filterConditions(requestData) {
        return {
            restrict: 'AE',
            scope: {},
            transclude: true,
            link: function($scope, $element, $attrs, $ctrls, $transclude) {
                //筛选
                //var listParams = $scope.$eval($attrs.ngModel);
                $scope.filterParams = {};
                $scope.filterConditions = {
                    list: []
                };
                var filterConditions = $scope.filterConditions;
                $scope.conditionList = {};

                $scope.selectCondition = function(_name, _item) {
                    _item.type = _name;
                    filterConditions[_name] = _item;
                    filterConditions.list.push(_item);
                    updataListParams();
                };

                $scope.deleteCondition = function(_this) {
                    var _index = filterConditions.list.indexOf(_this);
                    filterConditions.list.splice(_index, 1);
                    delete filterConditions[_this.type];
                    updataListParams();
                };

                //
                function updataListParams() {
                    var _data = {};
                    angular.forEach($scope.filterConditions.list, function(condition) {
                        _data[condition.type] = condition.id;
                    });
                    $scope.filterParams = _data;
                }

                //获取筛选条件
                if ($attrs.filterConditions) {
                    (function() {
                        requestData($attrs.filterConditions)
                            .then(function(results) {
                                var _data = results[0];
                                $scope.conditionList = _data;
                            });
                    })();
                }

                $transclude($scope, function(clone) {
                    $element.append(clone);
                });
            }
        }
    };
    filterConditions.$inject = ["requestData"];

    /**
     * 树状列表
     */
    function treeList(buildTree,requestData, $timeout) {
        return {
            restrict: 'AE',
            scope: {},
            require: "?^ngModel",
            templateUrl: Config.tplPath + 'tpl/tree.html',
            link: function($scope, $element, $attrs, ngModel) {
                var isFirstLoad = true;
                $scope.status = {};
                $scope.treeList = [];
                $scope.curTree = {};
                $scope.status.isLoading = true;

                $scope.selectTree = function(tree, e) {
                    var $li = $element.find("li");
                    var $em = $(e.currentTarget);
                    var $parentLi = $em.parent("li");
                    var _tree = angular.copy(tree);
                    if (_tree.nodes.length == 0) {
                        $li.removeClass("on");
                        $parentLi.addClass("on");
                        ngModel && ngModel.$setViewValue(_tree);
                    } else {
                        if ($parentLi.hasClass("fold")) {
                            $parentLi.removeClass("fold");
                        } else {
                            $parentLi.addClass("fold");
                        }
                    }
                };


                function getTreeData() {
                    $scope.status.isLoading = true;
                    requestData($attrs.treeList)
                        .then(function(results) {
                            var data = results[0];
                            $scope.treeList = buildTree(data,$attrs.pidKey);

                            // console.log($scope.treeList);
                            $scope.status.isLoading = false;
                            if (isFirstLoad && angular.isDefined($attrs.selectFirst)) {
                                isFirstLoad = false;
                                $timeout(function() {
                                    var $em = $element.find("em");
                                    for (var i = 0, l = $em.length; i < l; i++) {
                                        $em.eq(i).trigger("click");
                                        if ($em.eq(i).next("ul").length == 0) {
                                            break;
                                        }
                                    }
                                })
                            }
                        })
                        .catch(function() {
                            $scope.status.isLoading = false;
                        });
                }

                $attrs.$observe("treeList", getTreeData)
            }
        }
    };
    treeList.$inject = ["buildTree","requestData", "$timeout"];

    /**
     * 树状列表2
     */
    function treeList2(buildTree,requestData, modal, $timeout, dialogConfirm) {
        return {
            restrict: 'AE',

            require: "?^ngModel",
            link: function($scope, $element, $attrs, ngModel) {
                var canSelectGroup = angular.isDefined($attrs.selectGroup);
                $scope.status = {};
                $scope.treeList = [];
                $scope.curTree = {};
                $scope.status.isLoading = true;
                var listParamsKey="listParams";
                // 默认的是监听listParams
                if($attrs.listParamsKey){
                    listParamsKey=$attrs.listParamsKey;
                    // 自己指定的
                }

                if (!angular.isDefined($scope[listParamsKey])) {
                   $scope[listParamsKey]= {};
               }

                 var formData = {};
                $scope.selectTree = function(tree, e) {
                    var $li = $element.find("li");
                    var $em = $(e.currentTarget);
                    var $parentLi = $em.parent("li");
                    var _tree = angular.copy(tree);
                    if (_tree.nodes.length == 0 || canSelectGroup) {
                        $li.removeClass("on");
                        $parentLi.addClass("on");
                        delete _tree.nodes;
                        ngModel && ngModel.$setViewValue(_tree);
                    } else {
                        if ($parentLi.hasClass("fold")) {
                            $parentLi.removeClass("fold");
                        } else {
                            $parentLi.addClass("fold");
                        }
                    }
                };

                $scope.extendTree = function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var $this = $(e.currentTarget);
                    var $parentLi = $this.parent().parent("li");
                    if ($parentLi.hasClass("fold")) {
                        $parentLi.removeClass("fold");
                        $this.parent().next().hide();
                    } else {
                        $parentLi.addClass("fold");
                        $this.parent().next().show();
                    }
                };

                /**
                 * [extendTree2 description]
                 * @param  {[type]} e             [description]
                 * @param  {[type]} childrenDivId [隐藏或显示的孩子展示区]
                 * @param  {[type]} foldClassId   [展开或隐藏样式绑定的divid]
                 * @param  {[type]} foldClass     [自定义添加展开的样式名]
                 * @return {[type]}               [description]
                 */
                $scope.extendTree2 = function(e,childrenDivId,foldClassId,foldClass) {
                  if(!foldClass)foldClass="fold";
                    // e.preventDefault();
                    // e.stopPropagation();
                    // var $this = $(e.currentTarget);
                    var $parentLi =  $("#"+foldClassId);

                    if ($parentLi.hasClass(foldClass)) {
                        $parentLi.removeClass(foldClass);
                         $("#"+childrenDivId).hide();
                    } else {
                        $parentLi.addClass(foldClass);
                       $("#"+childrenDivId).show();
                    }
                };


                $scope.deleteTree = function(e, _url) {
                    e.preventDefault();
                    e.stopPropagation();
                    dialogConfirm("是否删除?", function() {
                        requestData(_url).then(function() {
                            getTreeData();
                        });
                    });
                };

                $scope.addTree = function(e, _url) {
                    e.preventDefault();
                    e.stopPropagation();

                    modal.closeAll();

                    modal.open({
                        template: _url,
                        className: 'ngdialog-theme-right',
                        cache: false,
                        trapFocus: true,
                        overlay: false,
                        scope: $scope,
                        controller: ["$scope", "$element", function($scope, $element) {
                            $(".ngdialog-content", $element).width(400);
                        }]
                    });
                };

                function getTreeData() {
                    if(!$attrs.treeList2)return;
                    $scope.status.isLoading = true;
                    requestData($attrs.treeList2,formData)
                        .then(function(results) {
                            var data = results[0];
                            $scope.treeList = buildTree(data,$attrs.pidKey);

                                console.log($scope.treeList);

                            $scope.status.isLoading = false;
                        })
                        .catch(function() {
                            $scope.status.isLoading = false;
                        });
                }
                //   $scope[listParamsKey]
                $scope.$watch(listParamsKey, function() {

                   formData = angular.copy($scope[listParamsKey]);

                    getTreeData();
                }, true);

                $attrs.$observe("treeList2", getTreeData);

                //弹窗修改后的回调
                $scope.submitCallBack = function(_curRow, _data) {
                    modal.closeAll();
                    getTreeData();
                };
            }
        }
    };
    treeList2.$inject = ["buildTree","requestData", "modal", "$timeout", "dialogConfirm"];

    /**
     * 导航列表
     */
    function navList(requestData) {
        return {
            restrict: 'AE',
            scope: true,
            transclude: true,
            require: "?^ngModel",
            link: function($scope, $element, $attrs, ngModel, $transclude) {
                $transclude($scope, function(clone) {
                    $element.append(clone);
                });

                var statusInfo = {
                    isLoading: true
                };
                $scope.status = statusInfo;
                $scope.currentSelect = {};

                var formData = {};

                $scope.select = function(_project) {
                    $scope.currentSelect = _project;
                    ngModel && ngModel.$setViewValue(_project);
                };

                function getListData(_callback) {
                    if ($attrs.listSource) {
                        $scope.tbodyList = $scope.listSource;
                        _callback && _callback();
                        return;
                    }
                    statusInfo.isLoading = true;

                    requestData($attrs.navList)
                        .then(function(results) {
                            var data = results[0];
                            $scope.isLoading = false;
                            $scope.listData = data.data;
                            $scope.select($scope.listData[0]);
                        })
                        .catch(function() {
                            $scope.isLoading = false;
                        });
                };

                getListData();
            }
        }
    };
    navList.$inject = ["requestData"];

    /**
     * 异步下拉
     */
    function selectAsync(requestData) {
        return {
            restrict: 'A',
            scope: {},
            require: "?^ngModel",
            link: function($scope, $element, $attrs, ngModel) {

                requestData($attrs.selectAsync)
                    .then(function(results) {
                        var data = results[0];
                        var _options = '<option value="">请选择</option>';
                        if (!data) data = [];
                        var _length = data.length;
                        for (var i = 0; i < _length; i++) {
                            _options += '<option value="' + data[i].value + '">' + data[i].text + '</option>';
                        }
                        $element.html(_options);
                        ngModel && $element.val(ngModel.$viewValue);
                    });
            }
        };
    }
    selectAsync.$inject = ["requestData"];

    /**
     * 级联下拉
     */
    function relativeSelect(requestData, $timeout) {
        return {
            restrict: 'A',
            scope: {},
            require: "?^ngModel",
            link: function($scope, $element, $attrs, ngModel) {
                var _relativeTo = $attrs.relativeTo;
                var _relativeSelect = $attrs.relativeSelect;
                var isSelectFirst = angular.isDefined($attrs.selectFirst);
                var relativeInitload = angular.isDefined($attrs.relativeInitload);

                $element.on("change", changeHandle);

                $element.on("update", function(e, _data) {
                    getData(_data);
                });

                function changeHandle() {
                    var _data = {};
                    _data[$element[0].name] = $element.val();
                    $(_relativeTo).trigger("update", _data);
                }

                function getData(_data) {
                    requestData(_relativeSelect, _data)
                        .then(function(results) {
                            var data = results[0];
                            var _options = isSelectFirst ? '' : '<option value="">请选择</option>';
                            if (!data) data = [];
                            var _length = data.length;
                            var _value = "";
                            for (var i = 0; i < _length; i++) {
                                if (data[i].selected || (isSelectFirst && i === 0)) {
                                    _value = data[i].value;
                                }
                                _options += '<option ' + (data[i].enabled === 0 ? ' class="text-muted"' : '') + ' value="' + data[i].value + '">' + data[i].text + '</option>';
                            }
                            $element.html(_options);
                            //$element.trigger("change");
                            $element.val(_value);
                            ngModel && ngModel.$setViewValue(_value);
                            changeHandle();
                        });
                }

                if (relativeInitload) {
                    $timeout(changeHandle);
                }
            }
        };
    }
    relativeSelect.$inject = ["requestData", "$timeout"];

    /**
     * 图表
     */
    function eChart(requestData, dialogChart, alertError) {
        return {
            restrict: 'A',
            scope: {
                clickToUrl: "@",
                clickToDialog: "@",
                clickTopToUrl: "@",
                clickTopToDialog: "@",
                eChartKey: "@",
                eChartMap: "=",
                eChartMapData: "=",
                chartParams: "="
            },
            require: "?^ngModel",
            link: function($scope, $element, $attrs, ngModel) {
                $scope.isLoading = false;

                require(['echarts'], function(echarts) {
                    var myChart = echarts.init($element[0]);

                    //公布echar对象。用于获取图片等特色操作
                    if ($scope.eChartKey) {
                        if (!$scope.$parent.eChartMap) $scope.$parent.eChartMap = {};
                        $scope.$parent.eChartMap[$scope.eChartKey] = myChart;
                    }

                    function reSize() {
                        myChart.resize();
                    }
                    $(window).on("resize", reSize);
                    $scope.$on('$destroy', function() {
                        $(window).off("resize", reSize);
                        myChart.dispose();
                    });

                    myChart.on("click", function(_data) {

                        console.log(_data);

                        if (_data.data) {
                            if (ngModel) {
                              if($attrs.ngModelDataKey){

                                    ngModel.$setViewValue(_data.data[$attrs.ngModelDataKey]);
                              }else{
                                    ngModel.$setViewValue(_data.data);
                              }

                            }

                            if ($scope.clickToUrl) {
                                // ngModel && ngModel.$setViewValue(_data.data);
                                window.location.assign($scope.clickToUrl);
                            } else if ($scope.clickToDialog) {
                                dialogChart($scope.$parent.mainConfig.viewsDir + $scope.clickToDialog);
                            }

                        } else {

                            if ($scope.clickTopToUrl) {
                                // ngModel && ngModel.$setViewValue(_data);
                                if (ngModel) {
                                  ngModel.$setViewValue(_data);
                                }
                                window.location.assign($scope.clickTopToUrl);
                            } else if ($scope.clickTopToDialog) {
                                // ngModel && ngModel.$setViewValue(_data);
                                if (ngModel) {
                                  ngModel.$setViewValue(_data);
                                }
                                dialogChart($scope.$parent.mainConfig.viewsDir + $scope.clickTopToDialog);
                            }

                        }


                    });//end click

                    if (angular.isDefined($attrs.chartParams)) {
                        //监听具体值
                        $scope.$watch("chartParams", function(value) {
                            loadChart($attrs.chart, value);
                        }, true);
                    } else {
                        $attrs.$observe("chart", function(value) {
                            loadChart($attrs.chart);
                        });
                    }
                    loadChart($attrs.chart, $scope.chartParams);

                  function loadChart(_url, _params){
                    if ($scope.isLoading) {
                        return;
                    }
                    $scope.isLoading = true;
                    myChart.showLoading();

                    if(Config.serverPath){
                      if (_url.indexOf("http://") !==0 && _url.indexOf("https://") !== 0) {
                        _url=Config.serverPath+_url;
                      }
                    }

                    $.ajax({
                      url: _url,
                      type: "GET",
                      xhrFields:{withCredentials: true},
                      crossDomain:true,
                      dataType: 'text',//text,json
                      success: function (text) {
                          myChart.hideLoading();
                          $scope.isLoading = false;
                        // var results=eval(text);
                        //eavl 作用域设置为当前，支持执行echart提供方法。
                        var results = eval( "(" + text + ")" );


                        // if ( results.code != 200) {
                        //     // console.log(_data);
                        //       alertError(results.message || '出错了');
                        //     return ;
                        //
                        // }

                        var _data = results.data;
                        if(!_data)return;
                        //js api 增加功能：eChart组件将data返回给$scope.$parent.eChartMapData[$scope.eChartKey] 用于显示数据。
                        if ($scope.eChartKey) {
                            if (!$scope.$parent.eChartMapData) $scope.$parent.eChartMapData = {};
                            $scope.$parent.eChartMapData[$scope.eChartKey] = _data;
                        }


                        //解决百度图表雷达图 Tip 显示不正确的问题
                        if (_data.polar) {
                            _data.tooltip.formatter = function(_items) {
                                var _str = _items[0].name;
                                angular.forEach(_items, function(_item) {
                                    _str += '<br>' + _item.seriesName + ": " + _item.data;
                                });
                                return _str;
                            };
                        } else {
                            if (_data.tooltip&&_data.tooltip.formatter && _data.tooltip.formatter.indexOf("function") === 0) {
                                _data.tooltip.formatter = eval("(" + _data.tooltip.formatter + ")");
                            }
                        }
                        myChart.setOption(_data);

                      },
                      error:function(res){
                          $scope.isLoading = false;
                        //{readyState: 0, responseText: "", status: 0, statusText: "error"}
                          // alert("服务器连接不上或内部异常："+res.responseText);
                      }
                    });

                  }//end loadChart
                    //
                    // function loadChart2(_url, _params) {
                    //     if ($scope.isLoading) {
                    //         return;
                    //     }
                    //     $scope.isLoading = true;
                    //     myChart.showLoading();
                    //     requestData(_url, _params)
                    //         .then(function(results) {
                    //             var _data = results[0];
                    //
                    //             //js api 增加功能：eChart组件将data返回给$scope.$parent.eChartMapData[$scope.eChartKey] 用于显示数据。
                    //             if ($scope.eChartKey) {
                    //                 if (!$scope.$parent.eChartMapData) $scope.$parent.eChartMapData = {};
                    //                 $scope.$parent.eChartMapData[$scope.eChartKey] = _data;
                    //             }
                    //
                    //             myChart.hideLoading();
                    //             //解决百度图表雷达图 Tip 显示不正确的问题
                    //             if (_data.polar) {
                    //                 _data.tooltip.formatter = function(_items) {
                    //                     var _str = _items[0].name;
                    //                     angular.forEach(_items, function(_item) {
                    //                         _str += '<br>' + _item.seriesName + ": " + _item.data;
                    //                     });
                    //                     return _str;
                    //                 }
                    //             } else {
                    //                 if (_data.tooltip.formatter && _data.tooltip.formatter.indexOf("function") == 0) {
                    //                     _data.tooltip.formatter = eval("(" + _data.tooltip.formatter + ")");
                    //                 }
                    //             }
                    //             myChart.setOption(_data);
                    //             $scope.isLoading = false;
                    //         })
                    //         .catch(function(_msg) {
                    //             $scope.isLoading = false;
                    //             myChart.hideLoading();
                    //         });
                    // };
                });
            }
        };
    }
    eChart.$inject = ["requestData", "dialogChart", "alertError"];

    /**
     * 自动补全
     */
    function angucomplete($parse, requestData, $sce, $timeout) {
        return {
            restrict: 'EA',
            scope: {
                "placeholder": "@",
                "selectedItem": "=?",
                "url": "@",
                "titleField": "@",
                "descriptionField": "@",
                "classDescription": "@",
                //"localData": "=?",
                "searchFields": "@",
                "matchClass": "@",
                "searchStrClass": "@",
                "ngDisabled": "=?"
            },
            require: "?^ngModel",
            templateUrl: Config.tplPath + 'tpl/autocomplete.html',
            link: function($scope, elem, attrs, ngModel) {
                $scope.lastSearchTerm = null;
                $scope.currentIndex = null;
                $scope.justChanged = false;
                $scope.searchTimer = null;
                $scope.hideTimer = null;
                $scope.searching = false;
                $scope.pause = 300;
                $scope.minLength = 1;
                $scope.searchStr = $scope.searchFields;

              require(['project/angucomplete'], function(angucomplete) {
                    $scope.angucomplete1=new angucomplete($scope,elem,$parse, requestData, $sce, $timeout,ngModel);

              });//angucomplete

            }//end link
        };
    }

    /**
     * checkbox
     */
    function checkboxGroup() {
        return {
            restrict: "A",
            scope: {
                checkboxGroup: "="
            },
            link: function($scope, $elem, $attrs) {
                if (!angular.isArray($scope.checkboxGroup)) {
                  $scope.checkboxGroup = [];
                }

                //if ($scope.checkboxGroup.indexOf($attrs.value) !== -1) {
                //    $elem[0].checked = true;
                //}

                // Update array on click
                $elem.on('click', function() {
                    var index =-1;
                    if (!angular.isArray($scope.checkboxGroup)) {
                      $scope.checkboxGroup = [];
                    }
                    if(angular.isArray($scope.checkboxGroup))
                        index=$scope.checkboxGroup.indexOf($attrs.value);
                    // Add if checked
                    if ($elem[0].checked) {
                        if (index === -1) $scope.checkboxGroup.push($attrs.value);
                    }
                    // Remove if unchecked
                    else {
                        if (index !== -1) $scope.checkboxGroup.splice(index, 1);
                    }
                    $scope.$apply();
                });

                $scope.$watchCollection("checkboxGroup", function(value) {
                    if (value) {
                        if ($scope.checkboxGroup.indexOf($attrs.value) !== -1) {
                            $elem[0].checked = true;
                        }
                    }
                });
            }
        };
    }

    /**
      * 下拉

      $attrs.clearWatchScope:监听一个model 当一个model清空时,重置cosen
      $attrs.selectCallBack
      $attrs.pageSize:


      queryForSelectOption.json?q=&id=&pageSize=
      3个参数：q：关键词。
      id：指定id，id！=null&&q==null 时，根据id查询，q不为空时根据q查询。
      pageSize：指定返回数据条数
      */
    function chosen(requestData, $timeout, $rootScope, alertError, proLoading,utils) {
        return {
          restrict: 'A',
          //  scope: {
          //      chosen: '='
          //  },
          require: "?^ngModel",
          link: function($scope, $element, $attrs, ngModel) {
            var chosenConfig = {
                search_contains: true,
                no_results_text: "没有找到",
                display_selected_options: false
            };

            //后缀连接符号
            var suffixConnection=$attrs.suffixConnection||"";

            //后缀连接数据得key
            var suffixKey=$attrs.suffixKey||"";

            // 根据条件判断是否屏蔽下拉选择
            if (angular.isDefined($attrs.isDisabledThis)) {
              $attrs.$observe('isDisabledThis', function (newVal, oldVal) {
                if (!newVal) {
                  // $element.attr('disabled', true);
                }

                if (newVal && newVal != oldVal) {
                  // $element.removeAttr('disabled');
                }
              });
            }

           //设置选中值。1.设置优先级为：ngModel》defaultEmpty》data[0]
           //data 是返回的option 对象数组
           function getInitSelected (data){
             var _selected=null;
             var data0Val=data[0]?data[0].value:null;


             if(angular.isDefined($attrs.chosenAjax)){//解决展开后，默认选中一个，导致只显示一个数据bug
               data0Val=null;
             }

             if(angular.isDefined($attrs.multiple)){
                 if (angular.isDefined($attrs.defaultEmpty)) {
                    _selected= ngModel.$viewValue ? ngModel.$viewValue : [];
                 } else {
                     _selected= ngModel.$viewValue ? ngModel.$viewValue : [data0Val];
                 }
             } else {
                if (angular.isDefined($attrs.defaultEmpty)) {
                 _selected= ngModel.$viewValue ? ngModel.$viewValue :"";
                } else {
                  _selected= ngModel.$viewValue ? ngModel.$viewValue : data0Val;

                }
             }
              ngModel.$setViewValue(_selected);

              if (_selected===null) {
                _selected = "";
              }

              return _selected;
           }

           //创建option数据
           function createOptionsStr(data, _selected){

              var _options = '';

              if(_selected===null) _selected="";

              if(!angular.isDefined($attrs.multiple)){//array 类型不用修改。
                  _selected=_selected+"";//解决true 的情况，转换成"true"字符串
              }


              if (angular.isDefined($attrs.defaultEmpty)) {
                  _options += '<option value=""  >' + $attrs.defaultEmpty + '</option>';
              }

              //记录需要过滤的数据value，场景选择多个批次情况，同一批次只能选择一次.过滤掉要已已经选过的数据。当前选中的批次不过滤。
              var hideSelectValueArray=null;

              if( $attrs.callbackFilterReturnData){
                hideSelectValueArray = $scope.$eval($attrs.callbackFilterReturnData);
                // console.log(hideSelectValueArray);
              }

              for (var i = 0; i < data.length; i++) {
                  var selectedFlag=false;
                  if(angular.isArray(_selected)){
                     selectedFlag=_selected.indexOf(data[i].value)> -1;
                  }else{
                       selectedFlag=(_selected==data[i].value);
                  }


                  //记录需要过滤的数据value，场景选择多个批次情况，同一批次只能选择一次.过滤掉要已已经选过的数据。当前选中的批次不过滤。
                  if(!selectedFlag&&hideSelectValueArray){
                    if(hideSelectValueArray.indexOf(data[i].value)> -1){
                        //  console.log(data[i].value);
                        continue;
                    }
                  }


                var text=data[i].text;
                  if(suffixKey){//添加额外属性
                    suffixKeyVal=utils.getObjectVal(data[i],suffixKey);
                    if(suffixKeyVal!=null||suffixKeyVal!=undefined){
                      text+=suffixConnection+suffixKeyVal;
                    }
                  }
                  _options += '<option value="' + data[i].value + '" ' + (selectedFlag ? 'selected' : '') + '>' + text + '</option>';
              }

              return _options;

           }

            if ($attrs.selectCallBack) {
              $element.on("change", changeHandle);
              $element.on("update", function(e, _data) {
                  getData(_data);
              });
            }

            function changeHandle() {
              var _data = {};
              _data.value = $element.val();
              $scope[$attrs.selectCallBack](_data);
            }

            var chosenObj = null;

            if ($attrs.width) {
              chosenConfig.width = $attrs.width;
            }
              //记录返回数据
            var dataArr=null;

            require(['chosen'], function() {


            //监听变化
            function watchNgModel(callback){

              //只有复选框 的时候才调用该方法
              // 监听一个model 当一个model清空时,重置chosen 选择数据
              //model 变化时，触发回调方法。
              if ($attrs.ngModel &&(!angular.isDefined($attrs.multiple))) {
                $scope.$watch($attrs.ngModel, function(newValue, oldValue) {

                      // console.log("watch,$attrs.ngModel1");
                        if(!chosenObj|| newValue==oldValue)return;

                        try{
                            var chosen=chosenObj.data("chosen");
                            if(!chosen)return;
                            if(!chosen.results_data||chosen.current_selectedIndex<0)return;
                            chosen.results_data[chosen.current_selectedIndex];
                            // console.log("watch,$attrs.ngModel2");


                              if(callback)callback();

                              if ($attrs.selectData){
                                var selData=utils.getObjectByKeyOfArr(dataArr,"value",newValue);
                                $scope[$attrs.selectData] = selData;
                              }
                              // $scope.$apply();
                              if ($attrs.callback) {
                                  $scope.$eval($attrs.callback);
                              }
                        }catch(e){}

                });
              }//  if ($attrs.ngModel)
            }//watchNgModel


            //销毁组件
            function destroyChosen(chosenObj){
              try{
                  chosenObj&&chosenObj.data("chosen").destroy();
              }catch(e){}
            }

            if ($attrs.selectSource) {

              var _params={};
              if (angular.isDefined($attrs.chosenAjax)) {
                chosenObj = $element.chosen(chosenConfig);
                var $chosenContainer = $element.next();
                var $input = $('input', $chosenContainer);
                var searchStr = "";
                var isChinessInput = false;
                var typing = false;
                var requestQueue;
                var _url = $attrs.selectSource;

                if (Config.serverPath) {
                  if (_url.indexOf("http://") !== 0 && _url.indexOf("https://") !== 0) {
                    _url = Config.serverPath + _url;
                  }
                }

                //
                // if($attrs.watchName){
                //   $scope.$watch($attrs.watchName, function(n, o){
                //             console.log(n);
                //               console.log(o);
                //         if(n==o)return;
                //         $input.val(n);
                //     },true);

                  // var tmp=  $scope.$eval($attrs.ngModelName);
                  // console.log(tmp);
                  // $input.val(tmp);
                // }
                //解决第二次编辑打开时，没有显示初始值bug。
                if(ngModel.$viewValue){
                  handleSearch('');
                }

                function handleSearch(q) {
                  if ($attrs.params) {
                      if ($attrs.params.indexOf("{") === 0) {
                            _params = $scope.$eval($attrs.params);
                      }
                  }
                        var maskObj=null;
                    var selected = $('option:selected', $element).not(':empty').clone().attr('selected', true);
                    if (requestQueue) {
                      requestQueue.abort();
                      if(maskObj)maskObj.hide();
                    }
                     maskObj=  proLoading($element, "chosen");
                     if(!q)q='';
                     _params.q=q;
                     _params.id=ngModel.$viewValue;
                    requestQueue = $.ajax({
                        url: _url,
                        type: 'GET',
                        xhrFields:{withCredentials: true},
                        crossDomain:true,
                        data: _params,
                        dataType: 'json',
                        success: function(_data) {
                            if(maskObj)maskObj.hide();
                          if (_data.code == 200) {
                            $rootScope.isLoading = false;

                            if (!_data.data) _data.data = [];

                            dataArr=_data.data;
                            if(_data.data.length === 0){
                              _data.data.push({value:"",text:""});
                            }



                            var _length = _data.data.length;

                            var data= _data.data;


                            var _selected=getInitSelected(data);

                            var _options=createOptionsStr(data,_selected);

                            // for (var i = 0; i < _length; i++) {
                            //     // var data= _data.data;
                            //     // if (_selected.indexOf(_data.data[i].value) == -1) {
                            //     //     _options += '<option value="' + _data.data[i].value + '">' + _data.data[i].text + '</option>';
                            //     // }
                            //
                            //     _options += '<option value="' + data[i].value + '"' + (_selected.indexOf(data[i].value) > -1 ? 'selected' : '') + '>' + data[i].text + '</option>';
                            //
                            // }
                            $element.html(_options);
                            // .prepend(selected);
                            $element.trigger("chosen:updated");
                            var keyRight = $.Event('keydown');
                            keyRight.which = 39;
                            //0000879: 输入客户名后删除以正常速度（1S删除一个字）删除完所有字后会自动再带出第一个字
                            // console.log(q);
                              searchStr=q;
                            $input.val(q).trigger(keyRight);

                            if (_data.data.length > 0) {
                                $chosenContainer.find('.no-results').hide();
                            } else {
                                $chosenContainer.find('.no-results').show();
                            }
                          } else {
                            if(angular.isDefined($attrs.alertError)){
                                alet(_data.msg);
                            }
                          }
                        },
                        error:function(res){
                            if(maskObj)maskObj.hide();
                        },
                        complete: function() {

                            $scope.$digest();
                        }
                    });
                }

                function processValue(e) {
                  var field = $(this);
                  if (e.keyCode && e.keyCode === 13) {
                    //修复第一次输入后，直接回车没有取到值的bug
                    if (!ngModel.$viewValue) {
                      try {
                        ngModel.$setViewValue(chosenObj[0][0].value);
                      } catch (e) {}
                    }
                  }
                    //don't fire ajax if...
                  if ((e.type === 'paste' && field.is(':not(:focus)')) ||
                      (e.keyCode && (
                          (e.keyCode === 9) || //Tab
                          (e.keyCode === 13) || //Enter
                          (e.keyCode === 16) || //Shift
                          (e.keyCode === 17) || //Ctrl
                          (e.keyCode === 18) || //Alt
                          (e.keyCode === 19) || //Pause, Break
                          (e.keyCode === 20) || //CapsLock
                          (e.keyCode === 27) || //Esc
                          (e.keyCode === 33) || //Page Up
                          (e.keyCode === 34) || //Page Down
                          (e.keyCode === 35) || //End
                          (e.keyCode === 36) || //Home
                          (e.keyCode === 37) || //Left arrow
                          (e.keyCode === 38) || //Up arrow
                          (e.keyCode === 39) || //Right arrow
                          (e.keyCode === 40) || //Down arrow
                          (e.keyCode === 44) || //PrntScrn
                          (e.keyCode === 45) || //Insert
                          (e.keyCode === 144) || //NumLock
                          (e.keyCode === 145) || //ScrollLock
                          (e.keyCode === 91) || //WIN Key (Start)
                          (e.keyCode === 93) || //WIN Menu
                          (e.keyCode === 224) || //command key
                          (e.keyCode >= 112 && e.keyCode <= 123) //F1 to F12
                      ))) {
                      return false;
                  }

                  if (isChinessInput && (e.keyCode != 32 && (e.keyCode < 48 || e.keyCode > 57))) {
                      return false;
                  }

                  $chosenContainer.find('.no-results').hide();

                  var q = $.trim(field.val());
                  //0000879: 输入客户名后删除以正常速度（1S删除一个字）删除完所有字后会自动再带出第一个字
                  // if (!q && searchStr == q) {
                  //   return false;
                  // }
                  if (searchStr == q) {
                    return false;
                  }
                  typing = true;

                  if ($scope.searchTimer) {
                      $timeout.cancel($scope.searchTimer);
                  }

                  $scope.searchTimer = $timeout(function() {
                      typing = false;
                      handleSearch(q);
                  }, 500);
                }

                $('.chosen-search > input, .chosen-choices .search-field input', $chosenContainer)
                  .on('keyup', processValue)
                  .on('paste', function(e) {
                    var that = this;
                    setTimeout(function() {
                      processValue.call(that, e);
                    }, 500);
                  })
                  .on('keydown', function(e) {
                    if (e.keyCode == 229) {
                        isChinessInput = true;
                    } else {
                        isChinessInput = false;
                    }
                  })
                  .on('blur', function(e) {
                    //修复第一次输入后，直接回车没有取到值的bug
                    if (!ngModel.$viewValue) {
                      try {
                         chosenObj&&chosenObj.data("chosen").single_set_selected_text();
                        // if (chosenObj[0] && chosenObj[0][0]) ngModel.$setViewValue(chosenObj[0][0].value);
                      } catch (e) {}
                    }
                  });


                  if($attrs.isEmptyQuery=="true"){
                        handleSearch('');
                  }


                  watchNgModel(handleSearch);


                }//end ajax


                 else {
                  var firstSelectSource=$attrs.selectSource;


                  if ($attrs.params) {

                    firstSelectSource=$attrs.params;
                      if ($attrs.params.indexOf("{") === 0) {
                          //监听具体值
                          $attrs.$observe("params", function(value) {

                              _params = $scope.$eval(value);
                              if(firstSelectSource==value)return;
                              
                                  firstSelectSource=value;
                                ngModel.$setViewValue(null);

                              getData(_params);
                          });
                            _params = $scope.$eval($attrs.params);
                      } else {
                          //监听对象
                          $scope.$watch($attrs.params, function(value) {
                              _params = value;
                              if(firstSelectSource==value)return;
                                ngModel.$setViewValue(null);

                              getData(_params);
                          }, true);
                            _params = $attrs.params;
                      }
                  } else {
                    $attrs.$observe("selectSource", function(value) {
                        //修复初始化  ngModel.$setViewValue 值的情况下，先chosen 导致设置ngModel.$setViewValue为null的bug。
                        if(firstSelectSource==value)return;
                          ngModel.$setViewValue(null);

                        // chosenObj&&chosenObj.data("chosen").single_set_selected_text();
                        getData();
                    });
                  }

                  function getData(){
                    //满足条件才异步请求
                    if (angular.isDefined($attrs.ajaxIf)) {

                      if ($attrs.ajaxIf.indexOf("{") === 0) {//IE下用
                        var tmp=$scope.$eval($attrs.ajaxIf);
                        if (!tmp) return;
                      }

                      if (!$attrs.ajaxIf) return;
                    }
                    if (angular.isDefined($attrs.ajaxIfEval)) {
                        var tmp=$scope.$eval($attrs.ajaxIfEval);
                      if (!tmp) return;
                    }

                    requestData($attrs.selectSource,_params)
                      .then(function(results) {
                          var data = results[0];

                          //如果已定义请求数据后的回调，执行回调
                          if ($attrs.callBack) {
                            $scope.$eval($attrs.callBack);
                          }

                          if (!data) data = [];

                          dataArr=data;

                          var _length = data.length;
                          //  var _selected = angular.isArray(ngModel.$viewValue) ? ngModel.$viewValue : [data[0].value];

                          // var _selected=null;
                          // var data0Val=data[0]?data[0].value:null;
                          // if(angular.isDefined($attrs.multiple)){
                          //     if (angular.isDefined($attrs.defaultEmpty)) {
                          //        _selected= ngModel.$viewValue ? ngModel.$viewValue : [];
                          //     } else {
                          //         _selected= ngModel.$viewValue ? ngModel.$viewValue : [data0Val];
                          //     }
                          // } else {
                          //    if (angular.isDefined($attrs.defaultEmpty)) {
                          //     _selected= ngModel.$viewValue ? ngModel.$viewValue :"";
                          //    } else {
                          //      _selected= ngModel.$viewValue ? ngModel.$viewValue : data0Val;
                          //
                          //    }
                          // }
                          // if(_selected==null)_selected="";

                          var _selected=getInitSelected(data);
                          var _options=createOptionsStr(data,_selected);
                          //
                          // if (angular.isDefined($attrs.defaultEmpty)) {
                          //     _options += '<option value=""  >' + $attrs.defaultEmpty + '</option>';
                          // }
                          // for (var i = 0; i < _length; i++) {
                          //     _options += '<option value="' + data[i].value + '"' + (_selected.indexOf(data[i].value) > -1 ? 'selected' : '') + '>' + data[i].text + '</option>';
                          // }
                          $element.html(_options);
                          destroyChosen(chosenObj);
                          chosenObj=$element.chosen($scope.chosen || chosenConfig);
                          ngModel.$setViewValue(_selected);
                      }).catch(function(msg) {
                          if ($attrs.scopeErrorMsg) $scope[$attrs.scopeErrorMsg] = (msg);
                          if (angular.isDefined($attrs.alertError)) alertError(msg);
                      });
              }

              watchNgModel(getData);


              $scope.$watch($attrs.clearWatchScope, function(newValue, oldValue) {
                if(chosenObj ){
                  getData();

                }
              });

              getData();

              }
            } else {
            //修复select 初始值为null，没有对应的option值时，angluarjs自动添加，空option 导致 chonsen控件，选择其他值后，不能选择最后一条bug。
            $element.append("<option value=''></option>");
            $element.chosen($scope.chosen || chosenConfig);
              }
            });
          }
        };
    }

    /**
     * form-item
     */
    function formItem($compile) {
        return {
            restrict: 'AE',
            scope: true,
            replace: true,
            link: function($scope, $element, $attrs) {
                var _src = $scope.$eval($attrs.src);
                var _item = "";
                switch (_src.type) {
                    case "text":
                        _item = '<input type="' + _src.type + '" name="' + _src.key + '" ng-init="formData[\'' + _src.key + '\']=\'' + (_src.value || "") + '\'" ng-model="formData[\'' + _src.key + '\']" class="ipt" placeholder="' + _src.placeholder + '" />';
                        break;
                    case "hidden":
                        _item = '<input type="' + _src.type + '" name="' + _src.key + '" ng-init="formData[\'' + _src.key + '\']=\'' + (_src.value || "") + '\'" ng-model="formData[\'' + _src.key + '\']"/>';
                        break;
                    case "date":
                        _item = '<input type="' + _src.type + '" name="' + _src.key + '" ng-init="formData[\'' + _src.key + '\']=\'' + (_src.value || "") + '\'" ng-model="formData[\'' + _src.key + '\']" class="ipt" placeholder="' + _src.placeholder + '" convert-to-date/>';
                        break;
                    case "checkbox":
                        _item = '<div class="form-ctrl" ng-init="formData[\'' + _src.key + '\']=[\'' + (_src.value || "") + '\']">';
                        angular.forEach(_src.options, function(item) {
                            _item += '<label class="label">' +
                                '<input type="' + _src.type + '" name="' + _src.key + '" checkbox-group="formData[\'' + _src.key + '\']"  value="' + item + '" /> ' + item +
                                '</label>';
                        });
                        _item += '</div>';
                        break;
                    case "radio":
                        _item = '<div class="form-ctrl" ng-init="formData[\'' + _src.key + '\']=\'' + (_src.value || "") + '\'">';
                        angular.forEach(_src.options, function(item) {
                            _item += '<label class="label">' +
                                '<input type="' + _src.type + '" name="' + _src.key + '" ng-model="formData[\'' + _src.key + '\']"  value="' + item + '" /> ' + item +
                                '</label>';
                        });
                        _item += '</div>';
                        break;
                    case "select":
                        _item = '<select class="select select-w" name="' + _src.key + '" ng-init="formData[\'' + _src.key + '\']=\'' + (_src.value || "") + '\'" ng-model="formData[\'' + _src.key + '\']"  >';
                        _item += '<option value="" >请选择</option>';
                        angular.forEach(_src.options, function(item) {
                            _item += '<option value="' + item + '" >' + item + '</option>';
                        });
                        _item += '</select>';
                        break;
                    case "textarea":
                        _item = '<textarea name="' + _src.key + '" ng-init="formData[\'' + _src.key + '\']=\'' + (_src.value || "") + '\'" ng-model="formData[\'' + _src.key + '\']"  class="textarea" placeholder="' + _src.placeholder + '"></textarea>';
                        break;
                }
                $element.append($compile(_item)($scope));
            }
        }
    };
    formItem.$inject = ["$compile"];

    /**
     * 自定义配置 (资源相关)
     */
    function customConfig($timeout) {
        return {
            restrict: 'AE',
            scope: true,
            transclude: true,
            require: "?^ngModel",
            link: function($scope, $element, $attrs, ngModel, $transclude) {
                $timeout(function() {
                    ngModel && ($scope.dataList = ngModel.$viewValue || []);
                });

                $scope.$watchCollection("dataList", function(value) {
                    if (value && ngModel) {
                        ngModel.$setViewValue(value);
                    }
                });

                $scope.addRow = function() {
                    $scope.dataList.push({});
                };

                $scope.delRow = function(n) {
                    $scope.dataList.splice(n, 1);
                };

                $transclude($scope, function(clone) {
                    $element.append(clone);
                });
            }
        };
    };
    customConfig.$inject = ["$timeout"];



        /**
         * 自动
         */
        function autoComplete() {
            return {
                restrict: 'AE',
                scope: true,
                transclude: true,
                require: "?^ngModel",
                link: function($scope, $element, $attrs, ngModel, $transclude) {
                    var config = {
                      cacheLength:0,
                        parse: function(data){
                          var parsed = [];
                          if(!data||!data.data)return parsed;
                          		var rows = data.data;
                          		for (var i=0; i < rows.length; i++) {
                          			var row1 = $.trim(rows[i]);
                          			if (row1) {
                          				row = row1.split("|");
                          				parsed[parsed.length] = {
                          					data: row1,
                          					value: row[0],
                          					result:row[0]
                          				};
                          			}
                          		}
                          		return parsed;


                        },
                        formatItem:function(item){return item},

                        noRecord:"没匹配数据",
                        dataType:"json"

                    };



                    require(['autocomplete'], function() {

                        if ($attrs.autoComplete) {
                          var _url=$attrs.autoComplete;
                          if(Config.serverPath){
                            if (_url.indexOf("http://") !==0 && _url.indexOf("https://") !== 0) {
                              _url=Config.serverPath+_url;
                            }
                          }

                          var tmpautocomplete=null;
                          $element.focus(function(){
                            if(tmpautocomplete!=null){
                              return;
                            }

                            config.width=$element.css("width");//弹出窗口时才生效
                            tmpautocomplete = $element.autocomplete(_url,config);

                            tmpautocomplete.result(function(obj,text,val){
                              console.log(text);
                            });

                          });

                        }

                });
            }
        };
      }



    //省市县的三级联动
    function selectAddress ($http, $q, $compile) {
        var cityURL, delay, templateURL;
        delay = $q.defer();
        templateURL = Config.tplPath+'tpl/cascading-select-address/cascading-select-address.html';
        cityURL = Config.tplPath+'tpl/cascading-select-address/city.min.js';
        $http.get(cityURL).success(function(data) {
            return delay.resolve(data);
        });
        return {
            restrict: 'A',
            scope: {
                p: '=',
                a: '=',
                c: '=',
                d: '=',
                ngModel: '='
            },
            link: function(scope, element, attrs) {
                var popup;
                var clickHideEvent=function(e) {

                    // console.log("clickHideEvent");
                    if($(e.target).closest(".select-address").length == 0){
                        //实现点击某元素之外触发事件
                              if(popup){
                                    popup.hide();
                              };

                        }


                      // event.stopPropagation();
                      // return false;//导致form表单不能提交
                  };
                popup = {
                    element: null,
                    backdrop: null,
                    show: function() {
                        $(document).on('click', clickHideEvent);
                        return this.element.addClass('active');
                    },
                    hide: function() {
                        this.element.removeClass('active');
                          $(document).unbind('click', clickHideEvent);
                        return false;
                    },
                    resize: function() {
                        if (!this.element) {
                            return;
                        }
                        this.element.css({
                            top: -this.element.height() - 30,
                            'margin-left': -this.element.width() / 2
                        });
                        return false;
                    },
                    focus: function() {
                        $('[ng-model="d"]').focus();
                        return false;
                    },
                    init: function() {
                        element.on('click keydown', function() {
                            popup.show();
                            event.stopPropagation();
                            return false;
                        });



                      // $(document).unbind('click', clickHideEvent);




//                        $(window).on('click', (function(_this) {
//                            return function() {
//                                return _this.hide();
//                            };
//                        })(this));

                        return setTimeout((function(_this) {
                            return function() {
                                _this.element.show();
                                return _this.resize();
                            };
                        })(this), 500);
                    }
                };
                return delay.promise.then(function(data) {
                    $http.get(templateURL).success(function(template) {
                        var $template;
                        $template = $compile(template)(scope);
                        $('body').append($template);
                        popup.element = $($template[2]);
                        scope.provinces = data;
                        return popup.init();
                    });
                    scope.aSet = {
                        p: function(p) {
                            scope.p = p;
                            scope.c = null;
                            scope.a = null;
                            return scope.d = null;
                        },
                        c: function(c) {
                            scope.c = c;
                            scope.a = null;
                            return scope.d = null;
                        },
                        a: function(a) {
                            scope.a = a;
                            scope.d = null;
                            return popup.focus();
                        }
                    };
                    scope.clear = function() {
                        scope.p = null;
                        scope.c = null;
                        scope.a = null;
                        scope.d = null;

                          scope.cities=[];
                          scope.dists=[];

                    };
                    scope.submitAddress = function() {
                        return popup.hide();
                    };
                    scope.$watch('p', function(newV) {
                        var v, _i, _len, _results;
                        _results = [];
                        if (newV) {

                            for (_i = 0, _len = data.length; _i < _len; _i++) {
                                v = data[_i];
                                if (v.p === newV) {
                                    _results.push(scope.cities = v.c);
                                }
                            }

                        }

                        if(!scope.cities ){
                            scope.cities=[];
                            return scope.cities;
                        }

                        return _results;
                    });
                    scope.$watch('c', function(newV) {
                        var v, _i, _len, _ref, _results;
                        if (newV) {
                            _ref = scope.cities;
                            _results = [];

                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                v = _ref[_i];
                                if (v.n === newV) {
                                    _results.push(scope.dists = v.a);
                                }
                            }
                            return _results;
                        } else {
                            return scope.dists = [];
                        }
                    });
                    return scope.$watch(function() {
                        scope.ngModel = '';
                        if (scope.p) {
                            scope.ngModel += scope.p;
                        }
                        if (scope.c) {
                            scope.ngModel += " " + scope.c;
                        }
                        if (scope.a) {
                            scope.ngModel += " " + scope.a;
                        }
                        if (scope.d) {
                            scope.ngModel += " " + scope.d;
                        }
                        return popup.resize();
                    });
                });
            }
        };
    };


    /**
    /**
    必填参数：
    attrs.ajaxUrlSubmit=""：请求数据参数
    可选参数：
    $attrs.ajaxUrlHandler :function(data) 指定回调方法
    $attrs.params  //监听具体值
    $attrs.scopeResponse ：返回数据Response是绑定到 $scope[$attrs.scopeResponse]
    $attrs.scopeData ：返回数据Response.data是绑定到 $scope[$attrs.scopeData]
    $attrs.scopeErrorMsg ：返回数据错误数据是否绑定到 $scope[$attrs.scopeErrorMsg]
    $attrs.alertOk :是否提示请求成功提示。
    $attrs.alertError :是否提示请求失败提示。
    $attrs.ajaxIf :满足条件才异步请求  ajax-if="{{addDataItem.relId}}"

    $attrs.callback:满足条件才异步请求 回调方法。比如 callback="formData={}"

    $attrs.callback:异步加载 成功后，回调执行代码行。作用域$scope， callback="formData.courseId=details[0].value"

    */
    function ajaxUrlSubmit($timeout, requestData, alertOk, alertError, proLoading, modal,utils) {
        return {
            restrict: 'AE',
            // scope: true,
            // transclude: true,
            link: function($scope, $element, $attrs, $ctrls, $transclude) {
                // $transclude($scope, function(clone) {
                //     $element.append(clone);
                // });

                $scope.ajaxUrlHandler = $scope.$eval($attrs.ajaxUrlHandler);

                function getData(params) {
                  //满足条件才异步请求
                  if (angular.isDefined($attrs.ajaxIf)) {
                    if (!$attrs.ajaxIf) return;
                  }

                  if (angular.isDefined($attrs.ajaxIfEval)) {
                    var tmp = $scope.$eval($attrs.ajaxIfEval);
                    if (!tmp) return;
                  }
                  $scope.isLoading = true;
                    var maskObj=null;
                    if (!$attrs.noshowLoading) {
                      maskObj=proLoading($element);
                      //  if(maskObj)maskObj.hide();
                    }
                   var parameterBody = false;
                   if (angular.isDefined($attrs.parameterBody)) parameterBody = true;

                   if ($attrs.scopeErrorMsg) $scope[$attrs.scopeErrorMsg] ="";


                   var httpMethod = "POST";
                   if($attrs.httpMethod){
                     httpMethod=$attrs.httpMethod;
                   }

                   requestData($attrs.ajaxUrlSubmit, params, httpMethod, parameterBody)
                     .then(function(results) {
                           if(maskObj)maskObj.hide();

                          $scope.isLoading = false;
                         var data = results[0];

                         if ($scope.ajaxUrlHandler) {
                             data = $scope.ajaxUrlHandler(data);
                         }

                         if ($attrs.scopeResponse) $scope[$attrs.scopeResponse] = results[1];
                        //  if ($attrs.scopeData) $scope[$attrs.scopeData] = data;
                         if ($attrs.scopeData){
                             if(!$scope[$attrs.scopeData]) {
                               if(angular.isArray(results[0])){
                                 $scope[$attrs.scopeData]=[];//数组extend 会把数组转化成对象。
                               }else{
                                 $scope[$attrs.scopeData]={};
                               }

                             }
                             utils.replaceObject($scope[$attrs.scopeData],results[0]);
                             // angular.extend(  $scope[$attrs.scopeData],  results[0]);//
                         }
                         if (angular.isDefined($attrs.alertOk)) alertOk(results[1].msg);

                         //回调父级的处理事件;
                         if ($scope.listCallback) {
                           $scope.listCallback(results[1]);
                         }

                         // $scope.$apply();
                         if ($attrs.callback) {
                             $scope.$eval($attrs.callback);
                         }


                         if ($attrs.broadcast) {
                             $scope.$broadcast($attrs.broadcast);
                             $scope.$emit($attrs.broadcast);
                             // if (angular.isDefined($attrs.autoCloseDialog)) {
                             //     modal.close();
                             // }
                             // return;
                         }


                         //自动关闭弹窗
                         if (angular.isDefined($attrs.autoCloseDialog)) {
                           modal.close();
                         }

                     })
                     .catch(function(msg) {
                           if(maskObj)maskObj.hide();
                        if ($attrs.scopeErrorMsg) $scope[$attrs.scopeErrorMsg] = (msg);
                        if (angular.isDefined($attrs.alertError)) alertError(msg);

                        if ($attrs.errorCallback) {
                             $scope.$eval($attrs.callback);
                            // $scope.$eval($attrs.errorCallback);
                        }

                        $('.pr-full-loading').remove();
                     });

                }

                $element.on("click", function () {
                  var _params = {};
                  if ($attrs.params) {
                    if ($attrs.params.indexOf("{") === 0) {
                      _params = $scope.$eval($attrs.params);
                    } else {
                      _params = $scope.$parent[$attrs.params];
                    }
                  }

                  getData(_params);
                });

            }
        };
    }

    //验证失败的提示窗口
    function invalidPopover () {
        return {
            restrict: 'A',
            scope: {
                isFocus: '@?',
                ngModel: '=?',
                popoverOptions: '@',
                validValue: '@',
                popoverShow: '=?'
            },
            link: function ($scope, element, $attrs) {
              if($scope.isFocus){
                  element.data("isFocus", true);
              }
              function showDo(show){
                if ( element.data("isFocus")&&show=="true") {
                  element.popover('show');
                } else {
                  element.popover('hide');
                }
              }

              var placement = $attrs.placement ? $attrs.placement : "right";
              var popoverOptions='{ "placement": "'+placement+'", "trigger": "manual" }';

              if($attrs.popoverOptions)popoverOptions=$attrs.popoverOptions;
              element.popover(JSON.parse(popoverOptions));

              if(angular.isDefined($attrs.validValue)){
                $scope.$watch('ngModel', function (newVal, oldVal) {
                  // console.log($attrs.validValue);
                  if ($attrs.validValue=="true") {
                    element.popover('show');
                  } else {
                    element.popover('hide');
                  }
                });
              }

              if ($attrs.popoverShow) {
                $scope.$watch('popoverShow', function (newVal, oldVal) {
                  if (newVal) {
                    element.popover('show');
                  } else {
                    element.popover('hide');
                  }
                });
              } else {
                element.focus(function(){
                  //获取焦点时才条件验证。
                  element.data("isFocus", true);
                  if(angular.isDefined($attrs.validValue)){
                      if ($attrs.validValue=="true") {
                        element.popover('show');
                      } else {
                        element.popover('hide');
                      }
                  }else{
                    showDo($attrs.invalidPopover);
                  }

                });

                $attrs.$observe('invalidPopover', function (show) {
                  showDo(show);
                });
              }
            }
        };
    }



    /**
     * 树状列表
     */
    function watchFormChange(watchFormChange) {
        return {
            restrict: 'AE',
            link: function($scope, $element, $attrs, ngModel) {
              $scope.watchFormChange=function(watchName){
                watchFormChange(watchName,$scope);
              }

            }
        }
    };

        /**
         * 日期控件
         formData.expectDate：136000000单位 毫秒
         <input type="text" class="ipt pr-short-ipt color-6" placeholder="期望到货时间"
         readonly="true"
         datepicker   ng-model="formData.expectDate">

         formData.expectDate：2017-01-01 格式
         <input type="text" class="ipt pr-short-ipt color-6" placeholder="期望到货时间"
         readonly="true" no-parser="true"
         datepicker   ng-model="formData.expectDate">
         */
        function datepicker($filter) {

            var config={
                format:'YYYY-MM-DD', //''yy-mm-dd',

            };

            return {
              restrict:'EA',
              require: 'ngModel',

                link: function($scope, $element, $attrs, ngModel) {

                  //默认日期绑定数据单位都是 milliseconds。如果yy-mm-dd 需要设置noParser="true"
                  if($attrs.noParser!="true"){
                    var moment = require('moment');

                      var _format=$attrs.format||config.format;
                      ngModel.$parsers.push(function(val) {
                        if (!val) return;
                        // var tt=moment(val, _format).millisecond();
                          var tt=moment(val, _format).format('x');

                        return tt;

                    });
                    //
                    ngModel.$formatters.push(function() {
                        if (!ngModel.$modelValue) return null;
                        var tmp=ngModel.$modelValue;
                        var time=moment(parseInt(tmp,10)).format(_format);

                        return time;
                    });


                  }//$attrs.noParser!="true"


                  $element.datepicker({
                     changeYear : true ,
                      changeMonth  : true ,
            					dateFormat:'yy-mm-dd',
                      monthNames: ['一月','二月','三月','四月','五月','六月','七月','八月','九月','十月','十一月','十二月'],
                  			dayNames: ['星期日','星期一','星期二','星期三','星期四','星期五','星期六'],
                  			dayNamesShort: ['周日','周一','周二','周三','周四','周五','周六'],
                  			dayNamesMin: ['日','一','二','三','四','五','六'],
            					onSelect:function(val){
            						$scope.$apply(function(){
                          	ngModel.$setViewValue(val);
            						});
            					}
            			});
                }
            }
        };


    /**
     * [textInterception 自定义指令为过长内容进行截取，解决CSS3里ellipsis属性会将下划线隐藏掉的问题]
     * @return {[type]} [description]
     * @author liuzhen
     */
    function textInterception () {
      'use strcit';
      return {
        restrict: 'A',
        scope: true,
        link: function ($scope, $element, $attrs) {
          // 获取当前元素宽度
          var _w = $element.width();
          // 为当前元素设置固定宽度和高度
          $element.css({'width':_w, 'height':'auto', 'margin-left':'auto', 'margin-right':'auto'});
          // 获取需要显示的字符数
          var _showCharNum = parseInt(_w/19, 10);

          var _resStr,
              _str = $attrs.textInterception;

          if (_str.length > _showCharNum) {
            _resStr = _str.slice(0, _showCharNum) + '...';
            $scope.tr.firstMedical.name = _resStr;
            // $scope[$attrs.fieldName] = _resStr;
          }

        }
      }
    }
    //AngularJS动态显示不同的html内容。
    function ngCompile2($compile) {
          // directive factory creates a link function
          return function($scope, $element, attrs) {
            $scope.$watch(
              function($scope) {
                 // watch the 'compile' expression for changes
                return $scope.$eval(attrs.ngCompile2);
                //
                // if(tmp){
                //   console.log(tmp);
                // }
                //  return tmp;
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                // if(value){
                //   console.log(value);
                // }
                $element.html(value);
                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves

                $compile($element.contents())($scope );
              }
            );
          };
        }
    /**
     * 加入项目
     */
    angular.module('manageApp.main')
      .directive("textInterception", textInterception)
      .directive("ngCompile2", ["$compile",ngCompile2])
      .directive("datepicker", ['$filter',datepicker])
      .directive("watchFormChange", ["watchFormChange", watchFormChange])
      .directive("invalidPopover", ["$route", "$templateCache", "$routeParams", invalidPopover])
      .directive("ngView", ["$route", "$templateCache", "$routeParams", ngView])
      .directive("convertToDate",  ['$filter', convertToDate])
      .directive("convertToNumber", convertToNumber)
      .directive("convertJsonToObject", convertJsonToObject)
      .directive("ajaxUrlSubmit", ["$timeout", "requestData", "alertOk", "alertError", "proLoading","modal","utils", ajaxUrlSubmit])
      .directive("ajaxUrl", ["$timeout", "requestData", "alertOk", "alertError", "proLoading","utils", ajaxUrl])
      .directive("formValidator", ["requestData", "modal", "alertOk", "alertError","dialogConfirm", "$timeout","utils", formValidator])
      .directive("tableList",  ['requestData', 'modal', 'dialogConfirm', '$timeout', 'proLoading','alertError',tableList])
      .directive("tableCell", tableCell)
      .directive("pagination", pagination)
      .directive("pagination2", pagination2)
      .directive("filterConditions", filterConditions)
      .directive("treeList", treeList)
      .directive("treeList2", treeList2)
      .directive("navList", navList)
      .directive("selectAsync", selectAsync)
      .directive("relativeSelect", relativeSelect)
      .directive("chart", eChart)
      .directive("angucomplete", ["$parse", "requestData", "$sce", "$timeout",angucomplete])
      .directive("checkboxGroup", checkboxGroup)
      .directive("chosen", ["requestData", "$timeout", "$rootScope", "alertError", "proLoading","utils",chosen])
      .directive("formItem", formItem)
      .directive("autoComplete", autoComplete)
      .directive("selectAddress", ["$http", "$q", "$compile",selectAddress])
      .directive("customConfig", customConfig)
});

/**
 * Created by hao on 16/1/7.
 */
define('main/filters', ['main/init'], function () {
  /**
    	 *
    	* @Description: 输出html格式：angluar 安全考虑限制了html输出。该方法解除安全限制，
    	* @method to_trusted
    	* @param text html格式
    	* @return 输出html格式
    	* @author liumingquan
    	* @date 2017年2月8日
    	 */
  var to_trusted= ['$sce', function ($sce) {
　　return function (text) {
    　　return $sce.trustAsHtml(text);
　　};
}];
/**
  	 *
  	* @Description: 对象转换成格式化后json字符串
  	* @method jsonFormat
  	* @param obj 对象
  	* @return 格式化后json字符串
  	* @author liumingquan
  	* @date 2017年2月8日
  	 */
var jsonFormat= ['utils', function (utils) {
    return function (obj) {
        var jsonString=null;
          if(!obj)return jsonString;
            try{
              jsonString=JSON.stringify( obj, null, "\t");
            }catch(e){
                  jsonString=utils.toJson(obj);
            }
            return jsonString;
  　　};
}];


angular.module('manageApp.main')
.filter('jsonFormat',jsonFormat)
.filter('to_trusted',to_trusted);
});

/**
 * Created by hao on 15/11/11.
 */
define('main/init', ['angular'], function () {
    angular.module('manageApp.main', []);
});

/**
 * Created by hao on 15/11/18.
 */
define('main/services', ['toastr','main/init'], function (toastr) {
    //请求拦截 用于登录超时
    function redirectInterceptor($q, $location) {
        return {
            response: function (response) {
                if (typeof response.data === 'string' && /^<!DOCTYPE html>/.test(response.data)) {
                    window.location.assign(response.config.url);
                    return response;
                } else {
                    return response;
                }
            }
        };
    }
    redirectInterceptor.$inject = ['$q', '$location'];

    //数据请求
    function requestData($q, $http, $httpParamSerializer,utils) {
        return function (_url, _params, method, parameterBody) {
          var defer = $q.defer();
          if (!method) {
            method = 'GET';
          }

          var transformRequest=function (data) {
              return $httpParamSerializer(data);
          };

        if(Config.serverPath){
          if (_url.indexOf("http://") !==0 && _url.indexOf("https://") !== 0) {
            _url=Config.serverPath+_url;
          }
        }

        //解决 IE 参数中文乱码bug：
        //http://192.168.0.203:8080/dt/rest/authen/lossOverOrder/countByOrderStatus.json?type=æ¥æ&

        if(_url.indexOf("?")>-1){
           var queryStringObj=utils.parseQueryString(_url);
           _url=_url.split("?")[0];

           if(!_params)_params={};
           _params=$.extend( true,_params, queryStringObj);
        }

        if(_params&&(method == 'GET'||method == 'get')){
          _url+=(_url.indexOf("?")==-1?"?":"&")+$httpParamSerializer(_params);

        }
        var config={
            method: method,
            url: _url,
            cache:false,//屏蔽angluar 请求数据的 的缓存，避免脏数据
            data: _params || {},
            withCredentials: true,
            headers: {
                // 'Content-Type': 'application/x-www-form-urlencoded',
                'Content-Type' : 'application/json;charset=utf-8',
                'X-Requested-With': 'XMLHttpRequest'
            }
        };
          if(!parameterBody){
            config.transformRequest=function (data) {
                    return $httpParamSerializer(data);
                };

                config.headers= {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    // 'Content-Type' : 'application/json;charset=utf-8',
                    'X-Requested-With': 'XMLHttpRequest'
                };
          }

            $http(config)
                .success(function (_data, status, headers, config) {

                    // if(angular.isString(_data)){  //返回非json字符串方式
                    //     defer.resolve([_data, _data]);
                    //     return;
                    // }
                    if (status == 200 && _data.code == 200) {
                      defer.resolve([_data.data, _data]);
                    } else {
                      msg=_data.msg;
                      if(!msg){
                            msg=_url+"\n错误信息："+angular.toJson(_data);
                      }

                      defer.reject(msg);
                    }
                })
                .error(function (msg,code) {
                  if(!msg)msg="提交失败!";
                  msg="错误码："+code+"，"+msg;
                    defer.reject(msg);
                });


            return defer.promise;
        };
    }


    //弹窗确认
    function dialogConfirm($rootScope, modal) {
        return function (_text, _callBack, _template, _title, _confirmBtnTxt, _cancelBtnTxt, extendOpt) {
            var _$scope = $rootScope.$new(false);
            var _templateUrl = _template ? 'tpl/' + _template : 'tpl/dialog-confirm.html';
            // if (_template && _template === 'pr') {
            //   _templateUrl = 'tpl/pr-dialog-confirm.html';
            // } else {
            //   _templateUrl = 'tpl/dialog-confirm.html';
            // }

            _$scope.confirmText = _text || '确定删除?';
            _$scope.confirmTitle = _title || '确认操作?';
            _$scope.confirmBtnTxt = _confirmBtnTxt || '确定';
            _$scope.cancelBtnTxt = _cancelBtnTxt || '取消';
            _$scope.extendOpt = extendOpt;
            modal.openConfirm({
                template: Config.tplPath + _templateUrl,
                scope: _$scope
            }).then(_callBack);
        };
    }
    dialogConfirm.$inject = ['$rootScope', 'modal'];

    //弹窗提示
    function dialogAlert($rootScope, modal) {
        return function (_text, _callBack) {
            var _$scope = $rootScope.$new(false);
            _$scope.confirmText = _text || '确定';
            modal.openConfirm({
                template: Config.tplPath+'tpl/dialog-alert.html',
                scope: _$scope
            }).then(_callBack);
        };
    }
    dialogAlert.$inject = ['$rootScope', 'modal'];



//弹窗提示
function alertOk($rootScope, modal) {
    return function (_text, _callBack) {


      toastr.success(_text,"",  {timeOut: 3000,positionClass: 'toast-top-center'});

    };
}
    //弹窗提示
    // function alertOk2($rootScope, modal) {
    //     return function (_text, _callBack) {
    //         var _$scope = $rootScope.$new(false);
    //         _$scope.confirmText = _text || '确定';
    //         modal.openConfirm({
    //             template: Config.tplPath+'tpl/dialog-alert.html',
    //             scope: _$scope
    //         }).then(_callBack);
    //     };
    // }

    //弹窗提示
    function alertError($rootScope, modal) {
        return function (_text, _callBack) {
            var _$scope = $rootScope.$new(false);
            _$scope.confirmText = _text || '确定';
            modal.openConfirm({
                template: Config.tplPath+'tpl/dialog-alert.html',
                scope: _$scope
            }).then(_callBack);
        };
    }

    //弹窗提示
    function alertWarn($rootScope, modal) {
      return function (_text, _callBack) {


        toastr.warning(_text,"",  {timeOut: 3000,positionClass: 'toast-top-center'});

      };
        // return function (_text, _callBack) {
        //     var _$scope = $rootScope.$new(false);
        //     _$scope.confirmText = _text || '确定';
        //     modal.openConfirm({
        //         template: Config.tplPath+'tpl/dialog-alert.html',
        //         scope: _$scope
        //     }).then(_callBack);
        // };
    }

    //普通弹窗
    function dialog($rootScope, modal) {
        return function (_content, _callBack) {
            var _$scope = $rootScope.$new(false);
            _$scope.content = _content;
            modal.openConfirm({
                template: Config.tplPath+'tpl/dialog-center.html',
                scope: _$scope
            }).then(_callBack);
        };
    }
    dialog.$inject = ['$rootScope', 'modal'];

    //图表弹窗
    function dialogChart($rootScope, modal, $http) {
        return function (_url) {
            var _$scope = $rootScope.$new(false);
            var _params = {};
            var _urlObj = _url.split("?");
            if (_urlObj[1]) {
                angular.forEach(_urlObj[1].split("&"), function (_row) {
                    var _arr = _row.split("=");
                    _params[_arr[0]] = _arr[1];
                });
            }
            _$scope.url = _url;
            _$scope.urlParams = _params;
            modal.open({
                template: Config.tplPath+'tpl/dialog-center.html',
                scope: _$scope
            });
        };
    }
    dialogChart.$inject = ['$rootScope', 'modal', '$http'];

    /**
    列表数据转换为tree数据
    list<Data{id,name,pid}> =>treeNode{id,name,nodes：[]}
    */
    function buildTree(){
       return function (data,pidKey){
         if(!data||data.length===0)return [];
         var pos = {};//Map<id,obj>
         var tree = [];//
         var i = 0;
         if(!pidKey)pidKey="pid";

          //组装map
         for(var i=0;i<data.length;i++){
           var obj=data[i];
            obj.nodes = [];
            pos[obj.id]=obj;

         }

        //设置父子关系
        for(var i=0;i<data.length;i++){
             var obj=data[i];
           if(obj==null)continue;
           if (!obj[pidKey]||obj[pidKey] == "0") {
               tree.push(obj);
           }else{
              var objParent = pos[obj[pidKey]];
              if(objParent==null)tree.push(obj);   //无效父子关系的放到根节点
              else {
                objParent.nodes.push(obj);
              }
           }

         }

         return tree;
       }
    }

    //Loading
    // function proLoading2 () {
    //   return function (element, scope, target, params) {
    //     //定义参数对象
    //     var _params = {
    //       _style: params.style ? params.style : 'circular-rota',
    //       _masklayer: params.masklayer ? params.masklayer : false,
    //       _message: params.message ? params.message : ''
    //     };
    //
    //     //定义Loading的HTML
    //     var _loadHtml = '<div class="pr-spinner" style="position:absolute;top:20%;left:102%;">' +
    //                     '<div class="bar1 cblack"></div><div class="bar2 cblack"></div>' +
    //                     '<div class="bar3 cblack"></div><div class="bar4 cblack"></div><div class="bar5 cblack"></div>' +
    //                     '<div class="bar6 cblack"></div><div class="bar7 cblack"></div><div class="bar8 cblack"></div>' +
    //                     '<div class="bar9 cblack"></div><div class="bar10 cblack"></div><div class="bar11 cblack"></div>' +
    //                     '<div class="bar12 cblack"></div></div>';
    //
    //
    //     var _loadHtml2 = '<div class="pr-full-loading" style="width:80px;height:80px;position:fixed;_position:absolute;' +
    //                      'top:50%;left:50%;z-index:100;border-radius:5px;opacity:0.4;filter:alpha(opacity=30);background-color:#000;transform:translateX(-50%) translateY(-50%);">' +
    //                      '<div style="position:absolute;top:50%;left:50%;transform:translateX(-40%) translateY(-40%);" class="pr-spinner">' +
    //                      '<div class="bar1"></div><div class="bar2"></div><div class="bar3"></div><div class="bar4"></div>' +
    //                      '<div class="bar5"></div><div class="bar6"></div><div class="bar7"></div><div class="bar8"></div>' +
    //                      '<div class="bar9"></div><div class="bar10"></div><div class="bar11"></div>' +
    //                      '<div class="bar12"></div></div></div>';
    //
    //     //定义目标元素对象
    //     var _ele = element;
    //
    //     //定义当前作用域
    //     var _scope = scope;
    //
    //     //如果target已定义
    //     if (target) {
    //       var _target = $("." + target);
    //       if (!_target.css('relative')) {
    //         _target.addClass('relative');
    //       }
    //
    //       if (_scope.isLoading) {
    //         $('.sticky-header').append(_loadHtml2);
    //       }
    //
    //       // _scope.$observe(_scope.isLoading, function () {
    //       //   console.log('abc');
    //       //   if (_scope.isLoading === false) {
    //       //     $('.pr-full-loading').remove();
    //       //   }
    //       // });
    //     } else {
    //       _ele.parent().append(_loadHtml);
    //       _scope.isLoading = true;
    //       _scope.$watch(_scope.isLoading, function () {
    //         $('.pr-spinner').remove();
    //       });
    //     }
    //   };
    // }
    //



        //Loading
        function proLoading () {
          return function (element, type, params) {
            //定义参数对象
            // if(!params)params={};
            // var _params = {
            //   _style: params.style ? params.style : 'circular-rota',
            //   _masklayer: params.masklayer ? params.masklayer : false,
            //   _message: params.message ? params.message : ''
            // };

            var maskObj={
              maskId:"MaskId_"+new Date().getTime(),
              hide:function(){
                  $('#'+this.maskId).remove();
              }
            };

            if(!element)element=$("body");

            //定义Loading的HTML
            var _loadHtml = '<div id="'+maskObj.maskId+'" class="pr-spinner" style="position:absolute;top:20%;left:102%;" >' +
            '<div class="bar1 cblack"></div><div class="bar2 cblack"></div>' +
            '<div class="bar3 cblack"></div><div class="bar4 cblack"></div><div class="bar5 cblack"></div>' +
            '<div class="bar6 cblack"></div><div class="bar7 cblack"></div><div class="bar8 cblack"></div>' +
            '<div class="bar9 cblack"></div><div class="bar10 cblack"></div><div class="bar11 cblack"></div>' +
            '<div class="bar12 cblack"></div>'+
                            '</div>';


            var _loadHtml2 = '<div id="'+maskObj.maskId+'" class="pr-full-loading" style="width:80px;height:80px;position:fixed;_position:absolute;' +
                             'top:50%;left:50%;z-index:100;border-radius:5px;opacity:0.4;filter:alpha(opacity=30);background-color:#000;transform:translateX(-50%) translateY(-50%);">' +
                             '<div style="position:absolute;top:50%;left:50%;transform:translateX(-40%) translateY(-40%);" class="pr-spinner">' +
                             '<div class="bar1"></div><div class="bar2"></div><div class="bar3"></div><div class="bar4"></div>' +
                             '<div class="bar5"></div><div class="bar6"></div><div class="bar7"></div><div class="bar8"></div>' +
                             '<div class="bar9"></div><div class="bar10"></div><div class="bar11"></div>' +
                             '<div class="bar12"></div></div></div>';

            if(type=="chosen"){//select 下啦

              element.parent().append(_loadHtml);


            }else{
                element.append(_loadHtml2);
                // var _mask=$('#'+maskObj.maskId);
                // _mask.css("height",element.height());
                // _mask.css("width",element.width());
                //
                //
                // _mask.css("top",element.position().top);
                // _mask.css("left",element.position().left);

            }

            return maskObj;

          };
        }



        //Loading
        function store () {
            return  {
                  get:function(key){
                      if(!window.localStorage)return;
                      return window.localStorage.getItem(key);
                  },
                remove : function(key){
                   if(!window.localStorage) return;
                   localStorage.removeItem(key);
                 },
                  set : function(key, value){
                      if(!  window.localStorage)return;
                        localStorage.setItem(key, value);
                    },
                clear : function(){
                   if(!window.localStorage)return;
                    localStorage.clear();
                 }
              };

      }

      //工具类
      function utils ($timeout) {
        //递归 获取：data.data.data 获取子属性值

          function getObjectValByKeyArr(obj,keyArr,index){
            if(!keyArr)return null;

              if(keyArr.length-index==1){//直到取最后一个节点
                var key=keyArr[index];
                  if(!key)return null;
                  return obj[key];
              }
              var key=keyArr[index];
                if(!key)return null;
              if(!obj[key])return null;
              return getObjectValByKeyArr(obj[key],keyArr,(1+index));

          };

          var  utilsObj = {
            //
            //获取一个月的最大天数
            getNumberArrayByMaxNum:function(startNumber,endNumber){

                var returnArr=[];
                    if( typeof startNumber === 'number'&& typeof endNumber === 'number')
                    {
                      for(var i=startNumber;i<=endNumber;i++){

                        returnArr.push(i);
                      }
                    }
                console.log("getNumberArrayByMaxNum",arguments,returnArr);
               return returnArr;
            },
            /**

            URL参数转换对象

            */
            parseQueryString :function (url) {
                  var reg_url = /^[^\?]+\?([\w\W]+)$/,
                          reg_para = /([^&=]+)=([\w\W]*?)(&|$)/g, //g is very important
                          arr_url = reg_url.exec(url),
                          ret = {};
                  if (arr_url && arr_url[1]) {
                      var str_para = arr_url[1], result;
                      while ((result = reg_para.exec(str_para)) != null) {
                          ret[result[1]] = result[2];
                      }
                  }
                  // console.dir(ret);
                  return ret;
              },
            /**
                 *
                * @Description: 切换数组中2个条目顺序
                * @method switchArrayOrder
                * @param sourceIndex  切换顺序的位置1
                * @param sourceIndex  切换顺序的位置2
                * @return 输出html格式
                * @author liumingquan
                */
            switchArrayOrder:function(arr,sourceIndex,destIndex){
              var tmp=arr[sourceIndex];
              arr[sourceIndex]=arr[destIndex];
              arr[destIndex]=tmp;
            },
            //获取当前服务器的路径，用于异步请求当前数据的
            getCurServerPath:function(){
              //例：http://localhost:8086/topic/index?topicId=361
              // alert(window.location.pathname); 则输出：/topic/index

                // 例：http://localhost:8086/topic/index?topicId=361
                // alert(window.location.host); 则输出：http:localhost:8086
                  var context=  window.location.pathname.split("/")[1];
                  var path=window.location.protocol+"//"+window.location.host+"/"+context+"/";
                // console.log(path);

                return path;
            },
            //获取当前时间
            getNowTime: function (inputId) {
              return new Date().getTime();

            },
            //设置输入框获取焦点
            focusByInputId: function (inputId) {
              //  $timeout 保障不受其他干扰，最后一个执行。
              $timeout(function(){
                  $('#'+inputId).trigger('focus');

              },0);

            },
            //获取window窗口的高度
            getwindowHeight:function(){
                var t=$(window).height();
                // console.log("main_body="+t);
                return t;
            },
            //获取window窗口的高度
            getwindowWidth:function(){
                var t=$(window).width();
                // console.log("main_body="+t);
                return t;
            },
            //获取内容区的宽度。
            getMainBodyWidth:function(){
                var t=$("#main_body").width();
                // console.log("main_body="+t);
                return t;
            },
            //json字符串=>为js 对象。
            fromJson  : function (jsonString) {
              var firstLetter = jsonString.replace(/^\s*/, '')[0];
              return (firstLetter === '{' || firstLetter === '[') ? angular.fromJson(jsonString) : new String(jsonString);
            },
            //json字符串<=为js 对象。
            toJson  : function (obj) {
              return angular.toJson(obj);
            },

            //获取有指定key的scope作用域。
            getAppointScope  : function ($scope,scopeKey) {
                if($scope[scopeKey]){
                  return $scope;
                }
                if(!$scope.$parent)return null;
                return utilsObj.getAppointScope($scope.$parent,scopeKey);
            },
            //在scope的父亲链上，获取最靠近的扩展作用域的。utils.getScopeExtend($scope,scopeExtendName);
            getScopeExtend  : function ($scope,scopeExtendName) {
                if(  angular.isObject($scope[scopeExtendName])){
                  return $scope[scopeExtendName];
                }
                if(!$scope.$parent)return null;
                return utilsObj.getScopeExtend($scope.$parent,scopeExtendName);
            },
            //  url 存在则跳转，否则刷新。
            goOrRefreshHref  : function (url,confirmMsg) {
                if(url){
                   utilsObj.goTo(url,confirmMsg);
                   return;
                }
                utilsObj.refreshHref(confirmMsg);
            },
            //  跳转到对应页面 utils.goTo(url,confirmMsg);
            refreshHref  : function (confirmMsg) {
                var url=window.location.href;
                //避免参数越来越多
                if (url.indexOf('refreshTime=') > -1) {
                  url = url.split('refreshTime=')[0];
                }

                url+=(url.indexOf("?")>-1?"&":"?")+"refreshTime="+new Date().getTime();

                if(confirmMsg){
                  dialogConfirm(confirmMsg, function () {
                    window.location.assign(url);
                  }, null);
                }else{
                    window.location.assign(url);
                }
            },
            //  跳转到对应页面 utils.goTo(url,confirmMsg);
            goTo  : function (url,confirmMsg) {

                  url+=(url.indexOf("?")>-1?"&":"?")+"t="+new Date().getTime();
                if(confirmMsg){
                  dialogConfirm(confirmMsg, function () {
                    window.location.assign(url);
                  }, null);
                }else{
                    window.location.assign(url);
                }
            },
            //递归 获取：data.data.data 获取子属性值
            getObjectVal:function (obj,key){
                if(!key)return null;
               var arr=key.split(".");
               return getObjectValByKeyArr(obj,arr,0);
            },

            //对象的所有属性转换为数组。
            //data={ "拒收数量": "0.0000",  "收货数量": "1.0000"}==>["拒收数量","收货数量"]
            getPropertysArrayOfObject:function (obj){
                   var arr=[];
                if(!obj)return arr;
                for (var key in obj) {
                  arr.push(key);
                }
               return arr;
            },


            /**

            *
            * @Description: 遍历数组，返回满足属性值等于val的。数据位置。 utils.getObjectIndexByKeyOfArr(arr,key,val) ;
            * @method sumTotalByArray
            * @param arr ：数组
            * @param keyArr：累加的属性名的数组。
            * @param conditionEqualPropertyKey 条件属性名，不为空，表示需要判断满足条件的值（conditionEqualVal）才生效
            * @return
            * @author liumingquan
            * @date 2016年12月28日 下午5:16:02
            */
            sumTotalByArray : function (arr,keyArr,conditionEqualPropertyKey, conditionEqualVal) {
              var total={};
              if(!angular.isArray(arr))return -1;
              for(var i=0;i<arr.length;i++){
                  var tmp=arr[i];
                  if(!tmp)continue;

                  //属性值满足条件的，才允许相加。
                  if(conditionEqualPropertyKey){
                    var tmpval=utilsObj.getObjectVal(tmp,conditionEqualPropertyKey);
                    if(tmpval!=conditionEqualVal){
                      continue;
                    }
                  }
                for(var j=0;j<keyArr.length;j++){
                    var keyName=keyArr[j];
                    if(!total[keyName])total[keyName]=0;
                    var val=utilsObj.getObjectVal(tmp,keyName);
                    if(!val)continue;

                        total[keyName]=utilsObj.numberAdd(total[keyName],val);

                }

              }
              return total;
            },
            //sumTotalByArray(tbodyList,['quantity','price','quantity_actualQuantity'])
            //

            /**

            *
            * @Description: 遍历数组，返回满足属性值等于val的。进行相乘法后在相加。 utils.getObjectIndexByKeyOfArr(arr,key,val) ;
          	* @method sumTotalByArrayMul
          	* @param arr ：数组
          	* @param keyArr：乘的属性名的数组。
          	* @param conditionEqualPropertyKey 条件属性名，不为空，表示需要判断满足条件的值（conditionEqualVal）才生效
          	* @return
          	* @author liumingquan
          	* @date 2016年12月28日 下午5:16:02
            */
            sumTotalByArrayMul : function (arr,keyArr,conditionEqualPropertyKey, conditionEqualVal) {
              var total=0;
              if(!angular.isArray(arr))return 0;
              for(var i=0;i<arr.length;i++){
                  var tmp=arr[i];
                  if(!tmp)continue;
                  var sum=0;
                  var chengji=1;
                for(var j=0;j<keyArr.length;j++){
                    //属性值满足条件的，才允许相加。
                    if(conditionEqualPropertyKey){
                      var tmpval=utilsObj.getObjectVal(tmp,conditionEqualPropertyKey);
                      if(tmpval!=conditionEqualVal){
                        continue;
                      }
                    }
                    var keyName=keyArr[j];
                    var val=utilsObj.getObjectVal(tmp,keyName);
                    if(!val)val=0;
                    sum=utilsObj.numberMul(chengji,val);
                    chengji=sum;

                }
                total=  utilsObj.numberAdd(total,sum);
              }
              return total;
            },

            //遍历菜单数组，返回满足属性值type等于val的。数据位置。 utils.getcustomMenuByKeyOfArr(arr,val) ;
            getcustomMenuByKeyOfArr : function (arr,val) {
              return utilsObj.getObjectByKeyOfArr(arr,"type",val) ;
            },
            //遍历数组，返回满足属性值等于val的。数据位置。 utils.getObjectIndexByKeyOfArr(arr,key,val) ;
            getObjectIndexByKeyOfArr : function (arr,key,val) {
              if(!angular.isArray(arr))return -1;
              for(var i=0;i<arr.length;i++){
                var tmpVal=utilsObj.getObjectVal(arr[i],key);
                if(tmpVal==val)return i;
              }
              return -1;
            },
            //遍历数组，返回满足属性值等于val的。 utils.getObjectByKeyOfArr(arr,key,val) ;
            getObjectByKeyOfArr : function (arr,key,val) {
              var index=utilsObj.getObjectIndexByKeyOfArr(arr,key,val);
              if(index<0)     return null;
              return arr[index];
            },


            /**
              遍历数组，满足属性值等于val，分组返回。 utils.getGroupArrayByKeyOfArr(arr,key) ;
            参数：
            arr=[{"id","1","pid":"0"},{"id","2","pid":"0"}],]
            key="id"
            执行结果输出=>：
            retrun  groupMap={
                  keyArr:["0","1"],//分组的key数组
                  map:{"0",[{"id","1","pid":"0"},{"id","2","pid":"0"}],"11":[{"id","2","pid":"11"}]}//分组map<key（分组key）,dataArray（分组key相同的数据集合）>
              };
            */
            getGroupArrayByKeyOfArr : function (arr,key) {
              console.log("getGroupArrayByKeyOfArr",arr,key);
              var groupMap={
                  keyArr:[],//分组的key数组
                  map:{}//分组map<key（分组key）,dataArray（分组key相同的数据集合）>
              };

              if(!angular.isArray(arr))return groupMap;

              for(var i=0;i<arr.length;i++){

                var tmpkey=utilsObj.getObjectVal(arr[i],key);
                tmpkey+="";//转换为字符串类型
                if(tmpkey===undefined||tmpkey===""){
                    tmpkey="null";
                }
                //根据key获取分组数组，放在该元素
                tmpMapArray=groupMap.map[tmpkey];
                if(!tmpMapArray){
                  tmpMapArray=[];
                  groupMap.map[tmpkey]=tmpMapArray;
                }

                tmpMapArray.push(arr[i]);
              }

              //分组的key生成数组，返回，用于遍历。
              for (var tmpKey in groupMap.map)
                {
                  groupMap.keyArr.push(tmpKey);
                }
              return groupMap;
            },
            //遍历数组，删除满足属性值等于val的。utils.removeObjectByKeyOfArr(arr,key,val)
            removeObjectByKeyOfArr : function (arr,key,val) {
              var index=utilsObj.getObjectIndexByKeyOfArr(arr,key,val);
              if(index>-1){
                  arr.splice(index,1);
              }
              return index;
            },
            //除法.javascript解决小数的加减乘除精度丢失的方案
            numberDiv:function (arg1,arg2){
              if(!arg1||!arg2)return 0;
               var t1=0,t2=0,r1,r2;
                 try{t1=arg1.toString().split(".")[1].length}catch(e){};
                 try{t2=arg2.toString().split(".")[1].length}catch(e){};
               with(Math){
                 r1=Number(arg1.toString().replace(".",""));
                 r2=Number(arg2.toString().replace(".",""));
                 var tmp= utilsObj.numberMul((r1/r2),pow(10,t2-t1));

                 return tmp;
               }
           },
           //乘法
           numberMul:function (arg1,arg2) {
              if(!arg1)arg1=0;
                if(!arg2)arg2=0;
               var m=0,s1=arg1.toString(),s2=arg2.toString();
               try{m+=s1.split(".")[1].length}catch(e){};
               try{m+=s2.split(".")[1].length}catch(e){};

                var tmp= Number(s1.replace(".",""))*Number(s2.replace(".",""))/Math.pow(10,m);

                return tmp;
           },
          //加法
          numberAdd:function(arg1,arg2){
            if(!arg1)arg1=0;
              if(!arg2)arg2=0;
              var r1,r2,m;
              try{r1=arg1.toString().split(".")[1].length}catch(e){r1=0};
              try{r2=arg2.toString().split(".")[1].length}catch(e){r2=0};
              m=Math.pow(10,Math.max(r1,r2));

              var arg1Mul=utilsObj.numberMul(arg1,m);
              var arg2Mul=utilsObj.numberMul(arg2,m);

              return (arg1Mul+arg2Mul)/m ;

                //不精确bug
              //  return (arg1*m+arg2*m)/m;
          },
          //减法
          numberSub:function(arg1,arg2){
            if(!arg1)arg1=0;
              if(!arg2)arg2=0;
               try{r1=arg1.toString().split(".")[1].length}catch(e){r1=0};
               try{r2=arg2.toString().split(".")[1].length}catch(e){r2=0};
               m=Math.pow(10,Math.max(r1,r2));
               n=(r1>=r2)?r1:r2;


               var arg1Mul=utilsObj.numberMul(arg1,m);
               var arg2Mul=utilsObj.numberMul(arg2,m);

               return ((arg1Mul-arg2Mul)/m).toFixed(n) ;
                   //不精确bug
              //  return ((arg1*m-arg2*m)/m).toFixed(n);
          },
          // 对文件名后缀进行判断以区分用户上传的文件类型
          isPicture : function (fileName) {
            if(!fileName)return false;
            //http://pangu16.aliyuncs.com/d0a2dcabd56e418ebb001ff137e3ea00.PNG@108w
            var re = new RegExp("(\.png)|(\.jpg)|(\.jpeg)|(\.gif)",["i"]);
            if (!re.exec(fileName)) return false;

            return true;

            if (angular.isString(fileName) && fileName.indexOf('.') !== -1) {
              //img.png@100h
              var _suffix = fileName.split('.')[1];
                 _suffix = fileName.split('@')[0];//解决缩略图情况
                return (_suffix === 'png' || _suffix === 'jpg' || _suffix === 'jpeg' || _suffix === 'gif') ? true : false;
              // if (_suffix !== 'png' || _suffix !== 'jpg' || _suffix !== 'jpeg' || _suffix !== 'gif') {
              //   return false;
              // } else {
              //   return true;
              // }
            } else {
              throw new Error('params fileName is must type of String');
            }
          },

          // 将对象数据清空。
          clearObject : function (object) {
             for (var variable in object) {
               delete object[variable];
             }
          },

          // 将对象数据清空。
          replaceObject : function (dest,source) {


            if(angular.isArray(source)){

              if(!angular.isArray(dest))dest=[];
              //清空
              dest.splice(0,dest.length);

                for(var i=0;i<source.length;i++){
                  dest.push(source[i]);
                }
                return dest;
            }


              if(!dest)dest={};
              utilsObj.clearObject(dest);
              if(!source)return;

               $.extend( true,dest,  source);//解决监听fromdata失败bug。

            return dest;
          },

          /**
               *
              * @Description: 将模版变量字符串转化为具体数据。模版变量定义为：{{id}}
              * @method to_trusted
              * @param variableString html格式
              * @param obj html格式
              * @return 输出html格式
              * @author liumingquan

              样例：
              variableString="#/uICustomMenu/edit.html?id={{id}}"
              obj={"id":"1234"}
              =>
              #/uICustomMenu/edit.html?id=1234
              * @date 2017年2月8日
               */
          parseVariableString : function (variableString,obj) {
              var returnString="";
              if(!variableString)return returnString;
                returnString=variableString;
                if(typeof variableString.match!='function')return returnString;
              var arr = variableString.match(/(\{\{){1}[^\{\}]+(\}\}){1}/);
              if(!arr)return returnString; //无匹配直接返回

              if(!obj)obj={};
             for (var i=0;i<arr.length;i++) {
               var tmp=arr[i];//{{id}}
               if(tmp.length<5)continue;//去掉不满足条件的。"{{","}}"
              var key=tmp.substring(2,tmp.length-2);//id
              var keyValue=obj[key];//obj[id]
              if(!keyValue)keyValue="";
              returnString=returnString.replace(tmp,keyValue);
             }
             return returnString;
          },

          // 将字符串类型数字转换为number类型
          transformToNumber : function (str) {
            return angular.isString(str) ? Number(str) : str;
          }
        };

        return utilsObj;
    }

    //监听内容修改标志
    function watchFormChange($timeout) {
      return function (watchName, $scope) {

        if(!$scope)return;
        //延迟初始化修改标志
         $timeout(function () {
            $scope.changeFlag=false;
          },500);

          if($scope._watchFn){
            // console.log("$scope._watchFn="+watchName);
              return;
          }

          $scope._watchFn=$scope.$watch(watchName,function(newValue,oldValue, scope){
            // console.log("changeFlag=true,"+watchName);
            $scope.changeFlag=true;
          },true);
      };
    }//watchFormChange




          //
          /**
           *
          * @Description: 打印工具
          * @method OPrinter

          * @return
          * @author liumingquan

          * @author ecolouds-01
          * @date 2016年12月15日 下午5:16:02
            使用帮助使用前，必须先初始化 打印组件：ng-init="$root.OPrinter.init()"
              关键步骤：
              1.初始化打印组件。
              2.调用打印，预览等功能。

           */
          function OPrinter () {

              var LodopFuncs=null;
                var LODOP=null;


              function getOPrinter(){
                    if(!LODOP&&LodopFuncs){
                          LODOP=LodopFuncs.getLodop(document.getElementById("LODOP_OB_Id"),document.getElementById("LODOP_EM_Id"));
                    }
                    return LODOP;
              }//_getLODOP

              var  OPrinter={



                /**
                 *
                * @Description: 打印工具 初始化
                * @method OPrinter

                * @return
                * @author liumingquan

                * @author ecolouds-01
                * @date 2016年12月15日 下午5:16:02
                打印页边距设定为 0mm 时，网页内最大元素的分辨率：794×1123
                <div style="width:794px;height:1123px;border:1px solid #000000;"> </div>

                打印页边距设定为 5mm 时，网页内最大元素的分辨率：756×1086
                <div style="width:756px;height:1086px;border:1px solid #000000;"> </div>

                打印页边距设定为 19.05mm 时，网页内最大元素的分辨率：649×978
                <div style="width:649px;height:978px;border:1px solid #000000;"> </div>

                 */
                 LODOP:null,//返回具体打印的实现累，用于特殊需求打印。
                 print_param_defualt:{
                   print_orient:0,//打印方向及纸张类型，数字型.1---纵(正)向打印，固定纸张；
                   paper_top: 0,//整页上边距，整数或字符型
                    paper_left: 0,//整页左边距
                     paper_width:2100,//可视编辑区域的宽度.A4 21*29.7cm（210mm×297mm）
                      paper_height:2970,//可视编辑区域的高度

                       html_top: 0,//html上边距，整数或字符型
                      html_left: 0,//html上边距，整数或字符型
                      html_width: "100%",//html的宽度
                        html_height: "100%"//html上边距，整数或字符型

                 },
                 print_param:null,
                 //设定纸张大小
                 _pageSize:{
                   intOrient:1,
                   intPageWidth:2160,
                   intPageHeight:1400

                 },

                /**
                 *
                * @Description: 打印工具 初始化
                * @method OPrinter

                * @return
                * @author liumingquan

                * @author ecolouds-01
                * @date 2016年12月15日 下午5:16:02
                  使用帮助使用前，必须先初始化 打印组件：ng-init="$root.OPrinter.init()"
                    关键步骤：
                    1.初始化打印组件。
                    2.调用打印，预览等功能。


                                      PRINT_INIT(strPrintTaskName)打印初始化
                                      ●	SET_PRINT_PAGESIZE(intOrient,intPageWidth,intPageHeight,strPageName)设定纸张大小
                                      ●	ADD_PRINT_HTM(intTop,intLeft,intWidth,intHeight,strHtml)增加超文本项
                                      ●	ADD_PRINT_TEXT(intTop,intLeft,intWidth,intHeight,strContent)增加纯文本项
                                      ●	ADD_PRINT_TABLE(intTop,intLeft,intWidth,intHeight,strHtml)增加表格项
                                      ●	ADD_PRINT_SHAPE(intShapeType,intTop,intLeft,intWidth,intHeight,intLineStyle,intLineWidth,intColor)画图形
                                      ●	SET_PRINT_STYLE(strStyleName, varStyleValue)设置对象风格
                                      ●	PREVIEW打印预览
                                      ●	PRINT直接打印
                                      ●	PRINT_SETUP打印维护

e
                 */
                init:function(){

                  this.print_param=$.extend({},this.print_param_defualt);

                    console.log(this.print_param);

                    if(!LODOP){
                        require(['LodopFuncs'], function(LodopFuncs1) {
                              LodopFuncs=LodopFuncs1;
                              //异步加载js
                              LodopFuncs1.loadCLodop();

                        });//require
                      }


                },
                //设置打印参数,根据接口返回html模版数据
                setPrint_paramByUICustomHtml:function(uICustomHtml){
                  if(!uICustomHtml)return;
                var p=$.extend({},this.print_param_defualt);
                  for(var key in p){
                      if(uICustomHtml[key])p[key]=uICustomHtml[key];
                  }

                  console.log(p);
                  this.print_param=p;
                },
                //设置打印尺寸
                setRect:function(intTop,intLeft,intWidth,intHeight){
                  this.print_param.html_top=intTop;
                    this.print_param.html_left=intLeft;
                      this.print_param.html_width=intWidth;
                        this.print_param.html_height=intHeight;

                },
                _PrintDivId:null,
                //设置打印的内容是htmlid绑定的innerHTML。优先级高于_PrintHtml
                setPrintDivId:function(divId){
                  this._PrintDivId=divId;
                },
                _PrintHtml:null,
                //设置打印的内容innerHTML
                setPrintHtmlContent:function(content){
                  this._PrintHtml=content;
                },
                //返回要打印的内容
                getPrintHtmlContent:function(content){
                    if(this._PrintDivId)this._PrintHtml= document.getElementById(this._PrintDivId).innerHTML;
                    return this._PrintHtml;
                },

                //打印前的准备工作。设置打印参数，及打印内容
                _printBeforePrint:function(content,taskName){
                  if(!LODOP){
                    LODOP=getOPrinter();
                    this.LODOP=LODOP;
                    if(!LODOP)console.log("need exe:$root.OPrinter.init()");
                  }
                  // 若strTaskName空，控件则不保存本地化信息，打印全部由页面程序控制。

                  if(!taskName)taskName="";
                  // (扩展型)打印初始化
                  // 格式：PRINT_INITA(Top,Left,Width,Height,strPrintName)
                  // 功能：打印初始化、设定纸张整体偏移量、设定可视编辑区域大小
                        var p=this.print_param;

                      LODOP.PRINT_INITA(p.paper_top,p.paper_left,p.paper_width,p.paper_height,taskName);
                      //必须在格式：PRINT_INITA 后面才生效。
                      LODOP.SET_PRINT_PAGESIZE(p.print_orient,p.paper_width,p.paper_height,taskName);

                  if(!content)content=this.getPrintHtmlContent();

                  //设定纸张大小
                  // LODOP.SET_PRINT_PAGESIZE(intOrient,intPageWidth,intPageHeight,strPageName)
                  //●	ADD_PRINT_HTM(intTop,intLeft,intWidth,intHeight,strHtml)增加超文本项


                    LODOP.ADD_PRINT_HTM(p.html_top,p.html_left,p.html_width,p.html_height,content);
                  // LODOP.ADD_PRINT_HTM(this._rect.top,this._rect.left,this._rect.width,this._rect.height,content);
                  console.log(p);

                      // console.log(content);
                  return LODOP;
                },
                preview:function(content,taskName) {
                    LODOP=this._printBeforePrint(content,taskName);

                    LODOP.PREVIEW();
                  }//preview
                  ,
                  //打印
                  print:function(content,taskName) {
                      LODOP=this._printBeforePrint(content,taskName);
                      LODOP.PRINT();
                    }//print
                    ,
                    //打印设置。整体位置调整。
                    printSetup:function(content,taskName) {
                        LODOP=this._printBeforePrint(content,taskName);
                        LODOP.PRINT_SETUP();
                      }//print
                      ,
                    //打印设置。详细调整，可以到每个字
                    printDesign:function(content,taskName) {
                        LODOP=this._printBeforePrint(content,taskName);
                        LODOP.PRINT_DESIGN();
                  },//print

                  //设置基本打印风格
                  setPrintStyle:function(key,val) {
                      LODOP=getOPrinter();
                      // LODOP.SET_PRINT_STYLE("FontSize",11);
                      LODOP.SET_PRINT_STYLE(key,val);

                    }//preview

                }//OPrinter

              return OPrinter;
        };//OPrinter



        /**
        自定义的table工具类
        public class UICustomTableHeaderVO implements Serializable{
        	@DataValidate(description = "排序")
        	private Integer index;
        	@DataValidate(description = "属性名",nullable=false)
        	private String propertyKey;//$index 特殊属性，表示显示序号
        	@DataValidate(description = "属性类型")
        	private String propertyType;//
        	@DataValidate(description = "属性显示名",nullable=false)
        	private String propertyName;//
        	@DataValidate(description = "显示格式转换",nullable=false)
        	private String format;//yyyy-MM-dd HH:mm
        	@DataValidate(description = "标题样式名")
        	private String thCss;//
        	@DataValidate(description = "标题样式")
        	private String thStyle;//
        	@DataValidate(description = "内容样式名")
        	private String tdCss;//
        	@DataValidate(description = "内容样式")
        	private String tdStyle;//
        */
        function UICustomTable ($filter,utils) {

            var dateFilter = $filter('date');
            var  UICustomTableObj = {
              //设置输入框获取焦点

              /**
                过滤掉不显示的字段，返回需要显示的字段。
              */
              getShowItemArray:function(arr){
                  if(!arr)return arr;
                  var showItemArray=[];
                  for(var i=0;i<arr.length;i++){
                    if(arr[i].showFlag)showItemArray.push(arr[i]);
                  }
                  return showItemArray;
              },
              getShowValue: function (obj,uICustomTableHeaderVO,$index) {
                if(!uICustomTableHeaderVO)return "";
                if(uICustomTableHeaderVO.propertyKey=="$index")return $index+1;
                var val=utils.getObjectVal(obj,uICustomTableHeaderVO.propertyKey);

                 //number,date
                 //  val=  $filter('date')(val, uICustomTableHeaderVO.format);
                   if(uICustomTableHeaderVO.filterName){
                      var fn=$filter(uICustomTableHeaderVO.filterName);
                      if(!fn){
                        console.log("filterName is null.filterName="+uICustomTableHeaderVO.filterName);
                      }else{
                            val=fn(val, uICustomTableHeaderVO.format);
                      }

                   }


                 return val;
              }
            };

            return UICustomTableObj;
        }//UICustomTable



        function AjaxUtils (requestData,alertOk,alertError) {

            var  AjaxUtils = {

                      /**
                      异步请求：
                      url:
                      data:object 对象
                      canSubmit 为true时才触发请求
                      parameterBody：是否json方式。
                      */
                      ajaxSubmit : function (url,data,canSubmit,parameterBody) {

                        if(!canSubmit)return false;

                        requestData(url, data, 'POST', parameterBody)
                        .then(function (results) {
                           var data = results[1];
                           alertOk(data.message || '操作成功');
                        })
                        .catch(function (error) {
                           alertError(error);
                        });
                      }
            };

            return AjaxUtils;
        }//AjaxUtils



    angular.module('manageApp.main')

        .factory('OPrinter', OPrinter)
        .service('watchFormChange', ["$timeout",watchFormChange])
      .factory('redirectInterceptor', redirectInterceptor)
      .service('alertOk', ['$rootScope', 'modal',alertOk])
      .service('alertError', ['$rootScope', 'modal',alertError])
      .service('alertWarn', ['$rootScope', 'modal',alertWarn])
      .service('requestData', ['$q', '$http', '$httpParamSerializer','utils',requestData])
      .service('dialogConfirm', dialogConfirm)
      .service('dialogAlert', dialogAlert)
      .service('dialog', dialog)
      .service('dialogChart', dialogChart)
      .service('buildTree', buildTree)
        .factory('store', store)
          .factory('utils', ["$timeout",utils])
            .factory('AjaxUtils', ["requestData","alertOk","alertError",AjaxUtils])
            .factory('UICustomTable', ["$filter","utils",UICustomTable])
      .factory('proLoading', proLoading)
      .config(['$httpProvider', function ($httpProvider) {
          $httpProvider.interceptors.push('redirectInterceptor');
      }]);
});

/**
 * Created by hao on 15/11/21.
 */

define('modal/directives', ['modal/init'], function () {
  //弹窗
  function modal(ngDialog) {
      return {
          restrict: 'A',
          scope: {
              modalScope: '='
          },
          link: function (scope, elem, attrs) {
              elem.on('click', function (e) {
                  e.preventDefault();

                  var ngDialogScope = angular.isDefined(scope.modalScope) ? scope.modalScope : 'noScope';
                  // angular.isDefined(attrs.ngDialogClosePrevious) && ngDialog.close(attrs.ngDialogClosePrevious);
                  if (angular.isDefined(attrs.ngDialogClosePrevious)) {
                    ngDialog.close(attrs.ngDialogClosePrevious);
                  }

                  var defaults = ngDialog.getDefaults();

                  ngDialog.open({
                      template: attrs.ngDialog,
                      className: attrs.ngDialogClass || defaults.className,
                      controller: attrs.ngDialogController,
                      controllerAs: attrs.ngDialogControllerAs,
                      bindToController: attrs.ngDialogBindToController,
                      scope: ngDialogScope,
                      data: attrs.ngDialogData,
                      showClose: attrs.ngDialogShowClose === 'false' ? false : (attrs.ngDialogShowClose === 'true' ? true : defaults.showClose),
                      closeByDocument: attrs.ngDialogCloseByDocument === 'false' ? false : (attrs.ngDialogCloseByDocument === 'true' ? true : defaults.closeByDocument),
                      closeByEscape: attrs.ngDialogCloseByEscape === 'false' ? false : (attrs.ngDialogCloseByEscape === 'true' ? true : defaults.closeByEscape),
                      overlay: attrs.ngDialogOverlay === 'false' ? false : (attrs.ngDialogOverlay === 'true' ? true : defaults.overlay),
                      preCloseCallback: attrs.ngDialogPreCloseCallback || defaults.preCloseCallback
                  });
              });
          }
      };
  }
  modal.$inject = ['modal'];

  //右侧遮罩层
  function modalRight(ngDialog,utils) {
      return {
          restrict: 'A',
          scope: {
              modalScope: '=',
          },
          link: function ($scope, $elem, $attrs) {
              var dialogWidth = $attrs.modalRight || "50%";

              var dialogOpen = function () {


                //增加url参数解析，放到  $scope.modalScope.mainStatus.pageParams 中，与 ng-view 保持一致
                //不能使用$scope.modalScope.mainStatus.pageParams，应该该属性在父类已经有了，直接修改会触发 $scope.modalScope 只作用域全部更新到scope状态，导致数据回滚。
                //modalRight 指令使用odalScope.pageParams 传递 url参数。
                if(  $scope.modalScope){
                    $scope.modalScope.pageParams=utils.parseQueryString($attrs.modalUrl);
                }


                return ngDialog.open({
                          template: $attrs.modalUrl,
                          className: 'ngdialog-theme-right',
                          cache: false,
                          trapFocus: false,
                          overlay: ($attrs.modalOverlay == "true"),
                          data: $attrs.modalData || $scope.modalScope.tr,
                          scope: $scope.modalScope,
                          controller: ["$scope", "$element", function ($scope, $element) {
                              $(".ngdialog-content", $element).width(dialogWidth);
                          }]
                      });
              };

              // 增加属性modalOpenAuto,其为一表达式，若返回为字符串true，则自动打开右侧模态框
              if (angular.isDefined($attrs.modalOpenAuto) && $attrs.modalOpenAuto == "true") {
                  dialogOpen();
              }

              $elem.on('click', function (e) {
                  e.preventDefault(); //取消默认事件
                  e.stopPropagation();  //阻止事件冒泡

                  ngDialog.closeAll();

                  dialogOpen();

                  // ngDialog.open({
                  //     template: $attrs.modalUrl,
                  //     className: 'ngdialog-theme-right',
                  //     cache: false,
                  //     trapFocus: false,
                  //     overlay: ($attrs.modalOverlay == "true"),
                  //     data: $attrs.modalData || $scope.modalScope.tr,
                  //     scope: $scope.modalScope,
                  //     controller: ["$scope", "$element", function ($scope, $element) {
                  //         $(".ngdialog-content", $element).width(dialogWidth);
                  //     }]
                  // });
              });
          }
      };
  }


  //中间遮罩层
  function modalCenter(ngDialog,utils) {
      return {
          restrict: 'A',
          scope: {
              modalScope: '='
          },
          link: function ($scope, $elem, $attrs) {
              var dialogWidth = $attrs.modalCenter || "50%";
              $elem.on('click', function (e) {
                  e.preventDefault();

                  //ngDialog.close();
                  //增加url参数解析，放到  $scope.modalScope.mainStatus.pageParams 中，与 ng-view 保持一致

                  if(  $scope.modalScope){
                      $scope.modalScope.pageParams=utils.parseQueryString($attrs.modalUrl);
                  }
                  ngDialog.open({
                      template: $attrs.modalUrl,
                      //className: 'ngdialog-theme-right',
                      cache: false,
                      trapFocus: false,
                      //overlay: false,
                      data: $attrs.modalData || $scope.modalScope.tr,
                      scope: $scope.modalScope,
                      controller: ["$scope", "$element", function ($scope, $element) {
                          $(".ngdialog-content", $element).width(dialogWidth);
                      }]
                  });
              });
          }
      };
  }


  angular.module('manageApp.modal')
      .directive("modal", modal)
      .directive("modalRight",  ['modal','utils',modalRight])
      .directive("modalCenter", ['modal','utils',modalCenter]);
});

/**
 * Created by hao on 15/11/21.
 */
define('modal/init', ['angular'], function () {
    angular.module('manageApp.modal', []);
});
/*
 * ngDialog - easy modals and popup windows
 * http://github.com/likeastore/ngDialog
 * (c) 2013-2015 MIT License, https://likeastore.com
 * 0.5.8
 */

define('modal/services', ['modal/init'], function () {
    'use strict';
    var m = angular.module('manageApp.modal');

    var $el = angular.element;
    var isDef = angular.isDefined;
    var style = (document.body || document.documentElement).style;
    var animationEndSupport = isDef(style.animation) || isDef(style.WebkitAnimation) || isDef(style.MozAnimation) || isDef(style.MsAnimation) || isDef(style.OAnimation);
    var animationEndEvent = 'animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend';
    var focusableElementSelector = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';
    var disabledAnimationClass = 'ngdialog-disabled-animation';
    var forceElementsReload = {html: false, body: false};
    var scopes = {};
    var openIdStack = [];
    var keydownIsBound = false;
    var openOnePerName = false;

    m.provider('modal', function () {
        var defaults = this.defaults = {
            className: 'ngdialog-theme-default',
            disableAnimation: false,
            plain: false,
            showClose: true,
            closeByDocument: true,
            closeByEscape: true,
            closeByNavigation: false,
            appendTo: false,
            preCloseCallback: false,
            overlay: true,
            cache: true,
            trapFocus: true,
            preserveFocus: true,
            ariaAuto: true,
            ariaRole: null,
            ariaLabelledById: null,
            ariaLabelledBySelector: null,
            ariaDescribedById: null,
            ariaDescribedBySelector: null
        };

        this.setForceHtmlReload = function (_useIt) {
            forceElementsReload.html = _useIt || false;
        };

        this.setForceBodyReload = function (_useIt) {
            forceElementsReload.body = _useIt || false;
        };

        this.setDefaults = function (newDefaults) {
            angular.extend(defaults, newDefaults);
        };

        this.setOpenOnePerName = function (isOpenOne) {
            openOnePerName = isOpenOne || false;
        };

        var globalID = 0, dialogsCount = 0, closeByDocumentHandler, defers = {};

        this.$get = ['$document', '$templateCache', '$compile', '$q', '$http', '$rootScope', '$timeout', '$window', '$controller', '$injector',
            function ($document, $templateCache, $compile, $q, $http, $rootScope, $timeout, $window, $controller, $injector) {
                var $elements = [];

                var privateMethods = {
                    onDocumentKeydown: function (event) {
                        if (event.keyCode === 27) {
                            publicMethods.close('$escape');
                        }
                    },

                    activate: function ($dialog) {
                        var options = $dialog.data('$ngDialogOptions');

                        if (options.trapFocus) {
                            $dialog.on('keydown', privateMethods.onTrapFocusKeydown);

                            // Catch rogue changes (eg. after unfocusing everything by clicking a non-focusable element)
                            $elements.body.on('keydown', privateMethods.onTrapFocusKeydown);
                        }
                    },

                    deactivate: function ($dialog) {
                        $dialog.off('keydown', privateMethods.onTrapFocusKeydown);
                        $elements.body.off('keydown', privateMethods.onTrapFocusKeydown);
                    },

                    deactivateAll: function (els) {
                        angular.forEach(els, function (el) {
                            var $dialog = angular.element(el);
                            privateMethods.deactivate($dialog);
                        });
                    },

                    setBodyPadding: function (width) {
                        var originalBodyPadding = parseInt(($elements.body.css('padding-right') || 0), 10);
                        $elements.body.css('padding-right', (originalBodyPadding + width) + 'px');
                        $elements.body.data('ng-dialog-original-padding', originalBodyPadding);
                        $rootScope.$broadcast('ngDialog.setPadding', width);
                    },

                    resetBodyPadding: function () {
                        var originalBodyPadding = $elements.body.data('ng-dialog-original-padding');
                        if (originalBodyPadding) {
                            $elements.body.css('padding-right', originalBodyPadding + 'px');
                        } else {
                            $elements.body.css('padding-right', '');
                        }
                        $rootScope.$broadcast('ngDialog.setPadding', 0);
                    },

                    performCloseDialog: function ($dialog, value) {
                        var options = $dialog.data('$ngDialogOptions');
                        var id = $dialog.attr('id');
                        var scope = scopes[id];

                        if (!scope) {
                            // Already closed
                            return;
                        }

                        if (typeof $window.Hammer !== 'undefined') {
                            var hammerTime = scope.hammerTime;
                            hammerTime.off('tap', closeByDocumentHandler);
                            hammerTime.destroy && hammerTime.destroy();
                            delete scope.hammerTime;
                        } else {
                            $dialog.unbind('click');
                        }

                        if (dialogsCount === 1) {
                            $elements.body.unbind('keydown', privateMethods.onDocumentKeydown);
                        }

                        if (!$dialog.hasClass('ngdialog-closing')) {
                            dialogsCount -= 1;
                        }

                        var previousFocus = $dialog.data('$ngDialogPreviousFocus');
                        if (previousFocus && previousFocus.focus) {
                            previousFocus.focus();
                        }

                        $rootScope.$broadcast('ngDialog.closing', $dialog, value);
                        dialogsCount = dialogsCount < 0 ? 0 : dialogsCount;
                        if (animationEndSupport && !options.disableAnimation) {
                            scope.$destroy();
                            $dialog.unbind(animationEndEvent).bind(animationEndEvent, function () {
                                privateMethods.closeDialogElement($dialog, value);
                            }).addClass('ngdialog-closing');
                        } else {
                            scope.$destroy();
                            privateMethods.closeDialogElement($dialog, value);
                        }
                        if (defers[id]) {
                            defers[id].resolve({
                                id: id,
                                value: value,
                                $dialog: $dialog,
                                remainingDialogs: dialogsCount
                            });
                            delete defers[id];
                        }
                        if (scopes[id]) {
                            delete scopes[id];
                        }
                        openIdStack.splice(openIdStack.indexOf(id), 1);
                        if (!openIdStack.length) {
                            $elements.body.unbind('keydown', privateMethods.onDocumentKeydown);
                            keydownIsBound = false;
                        }
                    },

                    closeDialogElement: function ($dialog, value) {
                        $dialog.remove();
                        if (dialogsCount === 0) {
                            $elements.html.removeClass('ngdialog-open');
                            $elements.body.removeClass('ngdialog-open');
                            privateMethods.resetBodyPadding();
                        }
                        $rootScope.$broadcast('ngDialog.closed', $dialog, value);
                    },

                    closeDialog: function ($dialog, value) {
                        var preCloseCallback = $dialog.data('$ngDialogPreCloseCallback');

                        if (preCloseCallback && angular.isFunction(preCloseCallback)) {

                            var preCloseCallbackResult = preCloseCallback.call($dialog, value);

                            if (angular.isObject(preCloseCallbackResult)) {
                                if (preCloseCallbackResult.closePromise) {
                                    preCloseCallbackResult.closePromise.then(function () {
                                        privateMethods.performCloseDialog($dialog, value);
                                    });
                                } else {
                                    preCloseCallbackResult.then(function () {
                                        privateMethods.performCloseDialog($dialog, value);
                                    }, function () {
                                        return;
                                    });
                                }
                            } else if (preCloseCallbackResult !== false) {
                                privateMethods.performCloseDialog($dialog, value);
                            }
                        } else {
                            privateMethods.performCloseDialog($dialog, value);
                        }
                    },

                    onTrapFocusKeydown: function (ev) {
                        var el = angular.element(ev.currentTarget);
                        var $dialog;

                        if (el.hasClass('ngdialog')) {
                            $dialog = el;
                        } else {
                            $dialog = privateMethods.getActiveDialog();

                            if ($dialog === null) {
                                return;
                            }
                        }

                        var isTab = (ev.keyCode === 9);
                        var backward = (ev.shiftKey === true);

                        if (isTab) {
                            privateMethods.handleTab($dialog, ev, backward);
                        }
                    },

                    handleTab: function ($dialog, ev, backward) {
                        var focusableElements = privateMethods.getFocusableElements($dialog);

                        if (focusableElements.length === 0) {
                            if (document.activeElement) {
                                document.activeElement.blur();
                            }
                            return;
                        }

                        var currentFocus = document.activeElement;
                        var focusIndex = Array.prototype.indexOf.call(focusableElements, currentFocus);

                        var isFocusIndexUnknown = (focusIndex === -1);
                        var isFirstElementFocused = (focusIndex === 0);
                        var isLastElementFocused = (focusIndex === focusableElements.length - 1);

                        var cancelEvent = false;

                        if (backward) {
                            if (isFocusIndexUnknown || isFirstElementFocused) {
                                focusableElements[focusableElements.length - 1].focus();
                                cancelEvent = true;
                            }
                        } else {
                            if (isFocusIndexUnknown || isLastElementFocused) {
                                focusableElements[0].focus();
                                cancelEvent = true;
                            }
                        }

                        if (cancelEvent) {
                            ev.preventDefault();
                            ev.stopPropagation();
                        }
                    },

                    autoFocus: function ($dialog) {
                        var dialogEl = $dialog[0];

                        // Browser's (Chrome 40, Forefix 37, IE 11) don't appear to honor autofocus on the dialog, but we should
                        var autoFocusEl = dialogEl.querySelector('*[autofocus]');
                        if (autoFocusEl !== null) {
                            autoFocusEl.focus();

                            if (document.activeElement === autoFocusEl) {
                                return;
                            }

                            // Autofocus element might was display: none, so let's continue
                        }

                        var focusableElements = privateMethods.getFocusableElements($dialog);

                        if (focusableElements.length > 0) {
                            focusableElements[0].focus();
                            return;
                        }

                        // We need to focus something for the screen readers to notice the dialog
                        var contentElements = privateMethods.filterVisibleElements(dialogEl.querySelectorAll('h1,h2,h3,h4,h5,h6,p,span'));

                        if (contentElements.length > 0) {
                            var contentElement = contentElements[0];
                            $el(contentElement).attr('tabindex', '-1').css('outline', '0');
                            contentElement.focus();
                        }
                    },

                    getFocusableElements: function ($dialog) {
                        var dialogEl = $dialog[0];

                        var rawElements = dialogEl.querySelectorAll(focusableElementSelector);

                        // Ignore untabbable elements, ie. those with tabindex = -1
                        var tabbableElements = privateMethods.filterTabbableElements(rawElements);

                        return privateMethods.filterVisibleElements(tabbableElements);
                    },

                    filterTabbableElements: function (els) {
                        var tabbableFocusableElements = [];

                        for (var i = 0; i < els.length; i++) {
                            var el = els[i];

                            if ($el(el).attr('tabindex') !== '-1') {
                                tabbableFocusableElements.push(el);
                            }
                        }

                        return tabbableFocusableElements;
                    },

                    filterVisibleElements: function (els) {
                        var visibleFocusableElements = [];

                        for (var i = 0; i < els.length; i++) {
                            var el = els[i];

                            if (el.offsetWidth > 0 || el.offsetHeight > 0) {
                                visibleFocusableElements.push(el);
                            }
                        }

                        return visibleFocusableElements;
                    },

                    getActiveDialog: function () {
                        var dialogs = document.querySelectorAll('.ngdialog');

                        if (dialogs.length === 0) {
                            return null;
                        }

                        // TODO: This might be incorrect if there are a mix of open dialogs with different 'appendTo' values
                        return $el(dialogs[dialogs.length - 1]);
                    },

                    applyAriaAttributes: function ($dialog, options) {
                        if (options.ariaAuto) {
                            if (!options.ariaRole) {
                                var detectedRole = (privateMethods.getFocusableElements($dialog).length > 0) ?
                                    'dialog' :
                                    'alertdialog';

                                options.ariaRole = detectedRole;
                            }

                            if (!options.ariaLabelledBySelector) {
                                options.ariaLabelledBySelector = 'h1,h2,h3,h4,h5,h6';
                            }

                            if (!options.ariaDescribedBySelector) {
                                options.ariaDescribedBySelector = 'article,section,p';
                            }
                        }

                        if (options.ariaRole) {
                            $dialog.attr('role', options.ariaRole);
                        }

                        privateMethods.applyAriaAttribute(
                            $dialog, 'aria-labelledby', options.ariaLabelledById, options.ariaLabelledBySelector);

                        privateMethods.applyAriaAttribute(
                            $dialog, 'aria-describedby', options.ariaDescribedById, options.ariaDescribedBySelector);
                    },

                    applyAriaAttribute: function ($dialog, attr, id, selector) {
                        if (id) {
                            $dialog.attr(attr, id);
                        }

                        if (selector) {
                            var dialogId = $dialog.attr('id');

                            var firstMatch = $dialog[0].querySelector(selector);

                            if (!firstMatch) {
                                return;
                            }

                            var generatedId = dialogId + '-' + attr;

                            $el(firstMatch).attr('id', generatedId);

                            $dialog.attr(attr, generatedId);

                            return generatedId;
                        }
                    },

                    detectUIRouter: function () {
                        //Detect if ui-router module is installed if not return false
                        try {
                            angular.module('ui.router');
                            return true;
                        } catch (err) {
                            return false;
                        }
                    },

                    getRouterLocationEventName: function () {
                        if (privateMethods.detectUIRouter()) {
                            return '$stateChangeSuccess';
                        }
                        return '$locationChangeSuccess';
                    }
                };

                var publicMethods = {
                    __PRIVATE__: privateMethods,

                    /*
                     * @param {Object} options:
                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)
                     * - plain {Boolean} - enable plain string templates, default false
                     * - scope {Object}
                     * - controller {String}
                     * - controllerAs {String}
                     * - className {String} - dialog theme class
                     * - disableAnimation {Boolean} - set to true to disable animation
                     * - showClose {Boolean} - show close button, default true
                     * - closeByEscape {Boolean} - default true
                     * - closeByDocument {Boolean} - default true
                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set)
                     * @return {Object} dialog
                     */
                    open: function (opts) {
                        var dialogID = null;
                        opts = opts || {};
                        if (openOnePerName && opts.name) {
                            dialogID = opts.name + ' dialog';
                            if (this.isOpen(dialogID)) {
                                return;
                            }
                        }
                        var options = angular.copy(defaults);
                        var localID = ++globalID;
                        dialogID = dialogID || 'ngdialog' + localID;
                        openIdStack.push(dialogID);

                        angular.extend(options, opts);

                        var defer;
                        defers[dialogID] = defer = $q.defer();

                        var scope;
                        scopes[dialogID] = scope = angular.isObject(options.scope) ? options.scope.$new() : $rootScope.$new();

                        var $dialog, $dialogParent;

                        var resolve = angular.extend({}, options.resolve);

                        angular.forEach(resolve, function (value, key) {
                            resolve[key] = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);
                        });

                        $q.all({
                            template: loadTemplate(options.template || options.templateUrl),
                            locals: $q.all(resolve)
                        }).then(function (setup) {
                            var template = setup.template,
                                locals = setup.locals;

                            if (options.showClose) {
                                template += '<div class="ngdialog-close"></div>';
                            }

                            var hasOverlayClass = options.overlay ? '' : ' ngdialog-no-overlay';
                            $dialog = $el('<div id="' + dialogID + '" class="ngdialog' + hasOverlayClass + '"></div>');
                            $dialog.html((options.overlay ?
                            '<div class="ngdialog-overlay"></div><div class="ngdialog-content" role="document">' + template + '</div>' :
                            '<div class="ngdialog-content" role="document">' + template + '</div>'));

                            $dialog.data('$ngDialogOptions', options);

                            scope.ngDialogId = dialogID;

                            if (options.data && angular.isString(options.data)) {
                                var firstLetter = options.data.replace(/^\s*/, '')[0];
                                scope.ngDialogData = (firstLetter === '{' || firstLetter === '[') ? angular.fromJson(options.data) : new String(options.data);
                                scope.dialogData = angular.copy(scope.ngDialogData);
                                scope.ngDialogData.ngDialogId = dialogID;
                            } else if (options.data && angular.isObject(options.data)) {
                                scope.ngDialogData = options.data;
                                scope.dialogData = angular.copy(scope.ngDialogData);
                                scope.ngDialogData.ngDialogId = dialogID;
                            }

                            if (options.className) {
                                $dialog.addClass(options.className);
                            }

                            if (options.disableAnimation) {
                                $dialog.addClass(disabledAnimationClass);
                            }

                            if (options.appendTo && angular.isString(options.appendTo)) {
                                $dialogParent = angular.element(document.querySelector(options.appendTo));
                            } else {
                                $dialogParent = $elements.body;
                            }

                            privateMethods.applyAriaAttributes($dialog, options);

                            if (options.preCloseCallback) {
                                var preCloseCallback;

                                if (angular.isFunction(options.preCloseCallback)) {
                                    preCloseCallback = options.preCloseCallback;
                                } else if (angular.isString(options.preCloseCallback)) {
                                    if (scope) {
                                        if (angular.isFunction(scope[options.preCloseCallback])) {
                                            preCloseCallback = scope[options.preCloseCallback];
                                        } else if (scope.$parent && angular.isFunction(scope.$parent[options.preCloseCallback])) {
                                            preCloseCallback = scope.$parent[options.preCloseCallback];
                                        } else if ($rootScope && angular.isFunction($rootScope[options.preCloseCallback])) {
                                            preCloseCallback = $rootScope[options.preCloseCallback];
                                        }
                                    }
                                }

                                if (preCloseCallback) {
                                    $dialog.data('$ngDialogPreCloseCallback', preCloseCallback);
                                }
                            }

                            scope.closeThisDialog = function (value) {
                                privateMethods.closeDialog($dialog, value);
                            };

                            if (options.controller && (angular.isString(options.controller) || angular.isArray(options.controller) || angular.isFunction(options.controller))) {

                                var label;

                                if (options.controllerAs && angular.isString(options.controllerAs)) {
                                    label = options.controllerAs;
                                }

                                var controllerInstance = $controller(options.controller, angular.extend(
                                    locals,
                                    {
                                        $scope: scope,
                                        $element: $dialog
                                    }),
                                    true,
                                    label
                                );

                                if (options.bindToController) {
                                    angular.extend(controllerInstance.instance, {ngDialogId: scope.ngDialogId, ngDialogData: scope.ngDialogData, closeThisDialog: scope.closeThisDialog});
                                }

                                $dialog.data('$ngDialogControllerController', controllerInstance());
                            }

                            $timeout(function () {
                                var $activeDialogs = document.querySelectorAll('.ngdialog');
                                privateMethods.deactivateAll($activeDialogs);

                                $compile($dialog)(scope);
                                var widthDiffs = $window.innerWidth - $elements.body.prop('clientWidth');
                                $elements.html.addClass('ngdialog-open');
                                $elements.body.addClass('ngdialog-open');
                                var scrollBarWidth = widthDiffs - ($window.innerWidth - $elements.body.prop('clientWidth'));
                                if (scrollBarWidth > 0) {
                                    privateMethods.setBodyPadding(scrollBarWidth);
                                }
                                $dialogParent.append($dialog);

                                privateMethods.activate($dialog);

                                if (options.trapFocus) {
                                    privateMethods.autoFocus($dialog);
                                }

                                if (options.name) {
                                    $rootScope.$broadcast('ngDialog.opened', {dialog: $dialog, name: options.name});
                                } else {
                                    $rootScope.$broadcast('ngDialog.opened', $dialog);
                                }
                            });

                            if (!keydownIsBound) {
                                $elements.body.bind('keydown', privateMethods.onDocumentKeydown);
                                keydownIsBound = true;
                            }

                            if (options.closeByNavigation) {
                                var eventName = privateMethods.getRouterLocationEventName();
                                $rootScope.$on(eventName, function () {
                                    privateMethods.closeDialog($dialog);
                                });
                            }

                            if (options.preserveFocus) {
                                $dialog.data('$ngDialogPreviousFocus', document.activeElement);
                            }

                            closeByDocumentHandler = function (event) {
                                var isOverlay = options.closeByDocument ? $el(event.target).hasClass('ngdialog-overlay') : false;
                                var isCloseBtn = $el(event.target).hasClass('ngdialog-close');

                                if (isOverlay || isCloseBtn) {
                                    publicMethods.close($dialog.attr('id'), isCloseBtn ? '$closeButton' : '$document');
                                }
                            };

                            if (typeof $window.Hammer !== 'undefined') {
                                var hammerTime = scope.hammerTime = $window.Hammer($dialog[0]);
                                hammerTime.on('tap', closeByDocumentHandler);
                            } else {
                                $dialog.bind('click', closeByDocumentHandler);
                            }

                            dialogsCount += 1;

                            return publicMethods;
                        });

                        return {
                            id: dialogID,
                            closePromise: defer.promise,
                            close: function (value) {
                                privateMethods.closeDialog($dialog, value);
                            }
                        };

                        function loadTemplateUrl(tmpl, config) {
                            $rootScope.$broadcast('ngDialog.templateLoading', tmpl);
                            return $http.get(tmpl, (config || {})).then(function (res) {
                                $rootScope.$broadcast('ngDialog.templateLoaded', tmpl);
                                return res.data || '';
                            });
                        }

                        function loadTemplate(tmpl) {
                            if (!tmpl) {
                                return 'Empty template';
                            }

                            if (angular.isString(tmpl) && options.plain) {
                                return tmpl;
                            }

                            if (typeof options.cache === 'boolean' && !options.cache) {
                                return loadTemplateUrl(tmpl, {cache: false});
                            }

                            return loadTemplateUrl(tmpl, {cache: $templateCache});
                        }
                    },

                    /*
                     * @param {Object} options:
                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)
                     * - plain {Boolean} - enable plain string templates, default false
                     * - name {String}
                     * - scope {Object}
                     * - controller {String}
                     * - controllerAs {String}
                     * - className {String} - dialog theme class
                     * - showClose {Boolean} - show close button, default true
                     * - closeByEscape {Boolean} - default false
                     * - closeByDocument {Boolean} - default false
                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set); not called on confirm
                     *
                     * @return {Object} dialog
                     */
                    openConfirm: function (opts) {
                        var defer = $q.defer();
                        var options = angular.copy(defaults);

                        opts = opts || {};
                        angular.extend(options, opts);

                        options.scope = angular.isObject(options.scope) ? options.scope.$new() : $rootScope.$new();
                        options.scope.confirm = function (value) {
                            defer.resolve(value);
                            var $dialog = $el(document.getElementById(openResult.id));
                            privateMethods.performCloseDialog($dialog, value);
                        };

                        var openResult = publicMethods.open(options);
                        if (openResult) {
                            openResult.closePromise.then(function (data) {
                                if (data) {
                                    return defer.reject(data.value);
                                }
                                return defer.reject();
                            });
                            return defer.promise;
                        }
                    },

                    isOpen: function (id) {
                        var $dialog = $el(document.getElementById(id));
                        return $dialog.length > 0;
                    },

                    /*
                     * @param {String} id
                     * @return {Object} dialog
                     */
                    close: function (id, value) {
                        var $dialog = $el(document.getElementById(id));

                        if ($dialog.length) {
                            privateMethods.closeDialog($dialog, value);
                        } else {
                            if (id === '$escape') {
                                var topDialogId = openIdStack[openIdStack.length - 1];
                                $dialog = $el(document.getElementById(topDialogId));
                                if ($dialog.data('$ngDialogOptions').closeByEscape) {
                                    privateMethods.closeDialog($dialog, '$escape');
                                }
                            } else {
                                publicMethods.closeAll(value);
                            }
                        }

                        return publicMethods;
                    },

                    closeAll: function (value) {


                          $(".select-address.active").removeClass('active');
                        var $all = document.querySelectorAll('.ngdialog');

                        // Reverse order to ensure focus restoration works as expected
                        for (var i = $all.length - 1; i >= 0; i--) {
                            var dialog = $all[i];
                            privateMethods.closeDialog($el(dialog), value);
                        }
                    },

                    getOpenDialogs: function () {
                        return openIdStack;
                    },

                    getDefaults: function () {
                        return defaults;
                    }
                };

                angular.forEach(
                    ['html', 'body'],
                    function (elementName) {
                        $elements[elementName] = $document.find(elementName);
                        if (forceElementsReload[elementName]) {
                            var eventName = privateMethods.getRouterLocationEventName();
                            $rootScope.$on(eventName, function () {
                                $elements[elementName] = $document.find(elementName);
                            });
                        }
                    }
                );

                return publicMethods;
            }];
    });

});

define(['project/angucomplete'], function(){

    /**

    canSelectResult :function(result){

      if (result.data.businessApplication.businessStatus == '已冻结') {
        return false;
      }
        return true;
    }
  }
    */
      function Angucomplete($scope,elem,$parse, requestData, $sce, $timeout,ngModel,canSelectResult){



        function getObjectValByKeyArr(obj,keyArr,index){
          if(!keyArr)return null;

            if(keyArr.length-index==1){//直到取最后一个节点
              var key=keyArr[index];
                if(!key)return null;
                return obj[key];
            }
            var key=keyArr[index];
              if(!key)return null;
            if(!obj[key])return null;
            return getObjectValByKeyArr(obj[key],keyArr,(1+index));

        };

      var utils={
        //递归 获取：data.data.data 获取子属性值
        getObjectVal:function (obj,key){
            if(!key)return null;
           var arr=key.split(".");
           return getObjectValByKeyArr(obj,arr,0);
        }
      };


        var isNewSearchNeeded = function(newTerm, oldTerm) {
            return newTerm.length >= $scope.minLength && newTerm != oldTerm
        };
        //解析返回数据
        var processResults = function(responseData, str) {
            if (responseData && responseData.length > 0) {
                $scope.results = [];

                var titleFields = [];
                if ($scope.titleField && $scope.titleField != "") {
                    titleFields = $scope.titleField.split(",");
                }

                for (var i = 0; i < responseData.length; i++) {
                    // Get title variables
                    var titleCode = [];

                    for (var t = 0; t < titleFields.length; t++) {
                        titleCode.push(responseData[i][titleFields[t]]);
                    }

                    var description = "";
                    if ($scope.descriptionField) {

                        description =  utils.getObjectVal(responseData[i],$scope.descriptionField);
                        // description = responseData[i][$scope.descriptionField];
                    }

                    var text = titleCode.join(' ');
                    if ($scope.matchClass) {
                        var re = new RegExp(str, 'i');
                        var strPart = text.match(re)[0];
                        text = $sce.trustAsHtml(text.replace(re, '<span class="' + $scope.matchClass + '">' + strPart + '</span>'));
                    }

                    var resultRow = {
                        id: responseData[i].id,
                        title: text,
                        description: description,
                        //image: image,
                        data: responseData[i]
                    };

                    $scope.results[$scope.results.length] = resultRow;
                }


            } else {
                $scope.results = [];
            }
        };//processResults


        //根据输入参数查询数据
        var searchTimerComplete = function(str) {
            // Begin the search

            if (str.length >= $scope.minLength) {
                if ($scope.localData) {
                    var searchFields = $scope.searchFields.split(",");

                    var matches = [];

                    for (var i = 0; i < $scope.localData.length; i++) {
                        var match = false;

                        for (var s = 0; s < searchFields.length; s++) {
                            match = match || (typeof $scope.localData[i][searchFields[s]] === 'string' && typeof str === 'string' && $scope.localData[i][searchFields[s]].toLowerCase().indexOf(str.toLowerCase()) >= 0);
                        }

                        if (match) {
                            matches[matches.length] = $scope.localData[i];
                        }
                    }

                    $scope.searching = false;
                    processResults(matches, str);

                } else {
                    requestData($scope.url, {
                            q: str
                        })
                        .then(function(results) {
                            var data = results[0];
                            $scope.searching = false;
                            processResults(data, str);
                        })
                        .catch(function(error) {
                            $scope.searching = false;
                            console.error(error);
                        });
                }
            }
        };//searchTimerComplete

        //隐藏下拉框
        var hideResults = function() {
            $scope.hideTimer = $timeout(function() {
                $scope.showDropdown = false;
            }, $scope.pause);
        };
        // 取消  隐藏下拉框
        var resetHideResults = function() {
            if ($scope.hideTimer) {
                $timeout.cancel($scope.hideTimer);
            }
        };
        //记录选中节点
        var hoverRow = function(index) {
            $scope.currentIndex = index;
        };

        //按下事件.
        var keyPressed = function(event) {
          if (!(event.which == 38 || event.which == 40 || event.which == 13)) {
            if (!$scope.searchStr || $scope.searchStr === "") {
                $scope.showDropdown = false;
                $scope.lastSearchTerm = null;
            } else if (isNewSearchNeeded($scope.searchStr, $scope.lastSearchTerm)) {
                $scope.lastSearchTerm = $scope.searchStr;
                $scope.showDropdown = true;
                $scope.currentIndex = -1;
                $scope.results = [];

                if ($scope.searchTimer) {
                    $timeout.cancel($scope.searchTimer);
                }

                $scope.searching = true;

                $scope.searchTimer = $timeout(function() {
                  searchTimerComplete($scope.searchStr);
                }, $scope.pause);
            }
          } else {
            event.preventDefault();
          }
        };//keyPressed

        //选择节点后,
        var selectResult = function(result) {

          // 如果是已冻结药品则返回
          // if (result.data.businessApplication.businessStatus == '已冻结') {
          //   return;
          // }

          if(canSelectResult){
            if (!canSelectResult(result)){
                return;
            }

          }

          if ($scope.matchClass) {
              result.title = result.title.toString().replace(/(<([^>]+)>)/ig, '');
          }
          $scope.searchStr = $scope.lastSearchTerm = result.title;
          $scope.selectedItem = result;
          $scope.showDropdown = false;
          $scope.results = [];
          ngModel && ngModel.$setViewValue(result);
        };



        var result_scrollTop = function() {
          var itemDiv=$(".angucomplete-selected-row");
          if(itemDiv.length===0){
            console.log(".angucomplete-selected-row length=0");
            return;
          }
          var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
          var search_results = $(".angucomplete-dropdown");
          maxHeight = parseInt(search_results.css("maxHeight"), 10);

          visible_top = search_results.scrollTop();
          visible_bottom = maxHeight + visible_top;


          high_top = itemDiv.position().top +visible_top;
          high_bottom = high_top + itemDiv.outerHeight();

          if (high_bottom >= visible_bottom) {
            return search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
          } else if (high_top < visible_top) {
            return search_results.scrollTop(high_top);
          }

        };

        //隐藏下拉框
        var setSelectFouns = function() {
             $timeout(function() {
               result_scrollTop();
            }, 0);
        };
        //div 元素 键盘事件.
        var elemKeyup=function(event) {
            if (event.which === 40) {
                if ($scope.results && ($scope.currentIndex + 1) < $scope.results.length) {
                    $scope.currentIndex++;
                    $scope.$apply();
                    event.preventDefault();
                    event.stopPropagation();
                }

                $scope.$apply();
                setSelectFouns();
            } else if (event.which == 38) {
                if ($scope.currentIndex >= 1) {
                    $scope.currentIndex--;
                    $scope.$apply();
                    event.preventDefault();
                    event.stopPropagation();
                }
                setSelectFouns();
            } else if (event.which == 13) {
                if ($scope.results && $scope.currentIndex >= 0 && $scope.currentIndex < $scope.results.length) {
                  selectResult($scope.results[$scope.currentIndex]);
                    $scope.$apply();
                    event.preventDefault();
                    event.stopPropagation();
                } else {
                    $scope.results = [];
                    $scope.$apply();
                    event.preventDefault();
                    event.stopPropagation();
                }

            } else if (event.which == 27) {
                $scope.results = [];
                $scope.showDropdown = false;
                $scope.$apply();
            } else if (event.which == 8) {
                $scope.selectedItem = null;
                $scope.$apply();
            }
        };//


        var inputField = elem.find('input');

        inputField.on('keyup', keyPressed);

        elem.on("keyup", elemKeyup);//  elem.on("keyup",

        this.$scope=$scope;
        this.processResults=processResults;
        this.searchTimerComplete=searchTimerComplete;
        this.hoverRow=hoverRow;
        this.hideResults=hideResults;
        this.resetHideResults=resetHideResults;
        this.keyPressed=keyPressed;
          this.selectResult=selectResult;
        return this;
      };//Angucomplete
      return Angucomplete;
});

/**
 * Created by hao on 15/11/5.
 */
define('project/controllers', ['project/init'], function() {


  /**
   * [saleReturnMedicalItemController 新建销退单药品列表tr控制器]
   * @param  {[type]} $scope [description]
   * @return {[type]}        [description]
   */
  function imTaobaoCtr ($scope,requestData,alertError,$rootScope) {
    //弹出与某人聊天.toUserId 聊天 人的userid
    $scope.openIm=function(toUserId,toUserName){
      var imTaobaoUserInfo=  $rootScope.MyImTaobaoUserInfo;
      if(!imTaobaoUserInfo){//没有帐号就获取帐号
        imTaobaoUserInfo_getMy(function(){$scope.openIm(toUserId)});
        return ;
      }
      if(!toUserId)toUserId="";
      if(!toUserName)toUserName="";
      var param="?uid="+imTaobaoUserInfo.userid+"&to="+toUserId+"&toUserName="+toUserName+"&appkey=23588140&pwd="+imTaobaoUserInfo.password+"&fullscreen";
      window.open('imtaobao/kit.html'+param, 'webcall', 'toolbar=no, status=no,scrollbars=0,resizable=0,menubar＝0,location=0,width=700,height=530');

    };

    //获取我的聊天帐号信息
    function imTaobaoUserInfo_getMy(callback) {
      var url='rest/authen/imTaobaoUserInfo/getMy.json';
      requestData(url)
        .then(function (results) {
          var _data = results[0];
          $rootScope.MyImTaobaoUserInfo= results[0];
          if(callback){
            callback();
          }
        })
        .catch(function (error) {
          alertError(error || '出错');
        });
    }//imTaobaoUserInfo_getMy



  }//imTaobaoCtr


  /**
   * 主控（业务模块级别）
   */
  function mainCtrlProject($scope, $rootScope, $http, $location, store,utils,modal,OPrinter,UICustomTable,bottomButtonList,saleOrderUtils,purchaseOrderUtils,requestPurchaseOrderUtils,queryItemCardButtonList,customMenuUtils) {

    //底部菜单（业务相关）
    $rootScope.bottomButtonList=bottomButtonList;
    $rootScope.saleOrderUtils=saleOrderUtils;
    $rootScope.purchaseOrderUtils=purchaseOrderUtils;
    $rootScope.requestPurchaseOrderUtils=requestPurchaseOrderUtils;
    $rootScope.queryItemCardButtonList=queryItemCardButtonList;
    $rootScope.customMenuUtils=customMenuUtils;

  }

  /**
   * 主控
   */
  function dynamicHtmlTemplateCtrl($scope, $rootScope, $http, $location, store,utils,modal,OPrinter,UICustomTable) {

  }
  /**
   *编辑、新建订单
   */
  function salesOrderEditCtrl($scope, modal, alertWarn, watchFormChange) {

      $scope.watchFormChange=function(watchName){
        watchFormChange(watchName,$scope);
      };

      modal.closeAll();
      // $scope.formData={};
      $scope.addDataItem = {};

      //需要重新家长地址方法。编辑新建后
      $scope.customerAddressReload=function (){
        $scope.reloadTime=new Date().getTime();
          modal.closeAll();
      };

      // 医院地址加载后，回调方法
      $scope.customerAddressGetCallBack = function(formData,customerAddress) {
        formData.customerName=customerAddress.name;

        if(!customerAddress||!customerAddress.contacts||customerAddress.contacts.length===0){
          formData.contactsId=null;
          return;
        }

        if(!formData.contactsId){
            formData.contactsId=customerAddress.defaultContactId;
        }

        //判断当前地址列表是否包含，选中地址。不包含则设置为默认
        var hasContactsId=false;
        for(var i=0;i<customerAddress.contacts.length;i++){
            if(formData.contactsId==customerAddress.contacts[i].id){
                hasContactsId=true;
            }
        }

        if(!hasContactsId){
            formData.contactsId=customerAddress.defaultContactId;
        }
      };

      // 拆分药品数量
      $scope.caifenQuantity = function(tr, num) {
        tr.quantity_noInvoice_show = true;
        if (!num || tr.quantity < num) return;
        //点击拆分逻辑,不能发货数量为0,并且库存不足时,根据库存自动拆分数量.
        if (!tr.quantity_noInvoice || tr.quantity_noInvoice === 0) {
          tr.quantity_noInvoice = tr.quantity - num;
          tr.quantity = num;
        }
        //加入订单按钮状态变化
        if (tr.quantity <= num) {
          tr.handleFlag = true;
        }
      };

      // 添加一条。并缓存数据。
      $scope.selectRelIdCallBack = function(data) {
        $scope.addDataItem.relId = data.id;
        $scope.addDataItem.name = data.name;
        $scope.addDataItem.brand = data.brand;
        $scope.addDataItem.unit = data.unit;
        $scope.addDataItem.price = data.price;
        // $scope.addDataItem.isSameBatch = '否';
        $scope.addDataItem.strike_price = data.price;
        $scope.addDataItem.headUrl = data.headUrl;
        $scope.addDataItem.specification = data.specification;
        $scope.addDataItem.manufacturer = data.manufacturer;
        $scope.addDataItem.handleFlag =true;//默认添加到订单
        $scope.addDataItem.productionBatch = '无';
        $scope.addDataItem.dosageForms = data.dosageForms;
        $scope.addDataItem.code = data.code;
        $scope.addDataItem.productionBatch = data.productionBatch;
        $scope.addDataItem.productionDate = data.productionDate;
        $scope.addDataItem.guaranteePeriod = data.guaranteePeriod;
        $scope.addDataItem.licenseNumber = data.licenseNumber;
        $scope.addDataItem.deliveryPlus = data.deliveryPlus;
        $scope.addDataItem.storageLocation = data.storageLocation;
        $scope.addDataItem.productionDate = data.productionDate;
        $scope.addDataItem.guaranteePeriod = data.guaranteePeriod;
        $scope.addDataItem.licenseNumber = data.licenseNumber;
          $scope.addDataItem.deliveryPlus = data.deliveryPlus;

        // alert($('#addDataItem_quantity').length);
        // $('#addDataItem_quantity').trigger('focus');
        $('#addDataItem_quantity').trigger('focus');
      };

      // 添加一条。并缓存数据。
      $scope.addDataItemClick = function(addDataItem,medical) {

          if (!(addDataItem.relId && addDataItem.name)) {
              alertWarn('请选择药品。');
              return;
          }
          if (!addDataItem.quantity||addDataItem.quantity<1) {
              alertWarn('请输入大于0的数量。');
              return;
          }
          if (!addDataItem.strike_price) {
              alertWarn('请输入成交价格。');
              return;
          }
          if(addDataItem.quantity>medical.quantity){//库存不足情况
              addDataItem.handleFlag =false;//默认添加到订单
          }
          if (!$scope.formData.orderMedicalNos) {
            $scope.formData.orderMedicalNos = [];
          }
          // 如果已添加
          if ($scope.formData.orderMedicalNos.length !== 0) {
            var _len = $scope.formData.orderMedicalNos.length;
            // console.log(_len);
            // 未使用forEach方法，因为IE不兼容
            for (var i=0; i<_len; i++) {
              if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
                alertWarn('此药械已添加到列表');
                return;
              }
            }
          }
          //添加到列表
          $scope.formData.orderMedicalNos.push(addDataItem);

          //计算价格
          $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.quantity;

          $scope.addDataItem = {};

          $('input', '#addDataItem_relId_chosen').trigger('focus');
          // $('#addDataItem_relId_chosen').trigger('click');
      };

      // 新版购需单控制器点击添加条目到列表方法
      $scope.newAddDataItemClick = function(addDataItem,medical) {

          if (!(addDataItem.relId && addDataItem.name)) {
              alertWarn('请选择药品。');
              return;
          }
          if (!addDataItem.csmQuantity || addDataItem.csmQuantity<1) {
              alertWarn('请输入大于0的数量。');
              return;
          }
          // if (!addDataItem.strike_price) {
          //     alertWarn('请输入成交价格。');
          //     return;
          // }
          // if(addDataItem.quantity>medical.quantity){//库存不足情况
          //     addDataItem.handleFlag =false;//默认添加到订单
          // }
          if (!$scope.formData.orderMedicalNos) {
            $scope.formData.orderMedicalNos = [];
          }
          // 如果已添加
          if ($scope.formData.orderMedicalNos.length !== 0) {
            var _len = $scope.formData.orderMedicalNos.length;

            for (var i=0; i<_len; i++) {
              if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
                alertWarn('此药械已添加到列表');
                return;
              }
            }
          }

          addDataItem.priceWithoutTax = addDataItem.price - addDataItem.price*addDataItem.taxRate;

          //添加到列表
          addDataItem.quantity = addDataItem.csmQuantity;
          $scope.formData.orderMedicalNos.push(addDataItem);

          //计算价格
          $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.quantity;

          $scope.addDataItem = {};

          $('input', '#addDataItem_relId_chosen').trigger('focus');
          // $('#addDataItem_relId_chosen').trigger('click');
      };

      // 保存  type:save-草稿,submit-提交订单。
      $scope.submitFormAfter = function() {
        $scope.formData.validFlag = false;
        if ($scope.submitForm_type == 'exit') {
          $scope.goTo('#/salesOrder/query.html');
          return;
        }
        if ($scope.submitForm_type == 'submit') {
          $scope.goTo('#/salesOrder/confirm-order.html?id='+$scope.formData.id);
        }
        if ($scope.submitForm_type == 'save') {
          // console.log(this);
        }
      };

      // 能否提交验证 type:save-草稿,submit-提交订单。
      $scope.canSubmitForm = function() {
        //必须有1条是勾选加入订单的。
        var arr=$scope.formData.orderMedicalNos;
        for(var i=0;i<arr.length;i++){
           if(arr[i].handleFlag){
             return true;
           }
        }

        return false;

      };

      // 保存 type:save-草稿,submit-提交订单。
      $scope.submitForm = function(fromId, type) {
        $scope.submitForm_type = type;
        if ($scope.submitForm_type == 'submit') {
          $scope.formData.validFlag = true;
        }
        $('#' + fromId).trigger('submit');

        // addDataItem_opt.submitUrl='';
        // $scope.formData.orderMedicalNos.push($scope.addDataItem);
        // $scope.addDataItem={};
      };

      // 取消订单
      $scope.cancelForm = function(fromId, url) {
        alertWarn('cancelForm');
      };

  }

  /**
   *编辑、新建订单
   */
  function salesOrderEditCtrl2($scope, modal, alertWarn, watchFormChange, requestData) {

      modal.closeAll();
      // $scope.formData={};
      $scope.addDataItem = {};

      // 是否显示关闭按钮
      $scope.isShowCancelBtn = false;

      $scope.$watch('initFlag', function (newVal) {
         //发送请求判断当前订单状态是否可显示关闭按钮
         if (newVal) {
           var _url = 'rest/authen/salesOrder/isCanClose?id=' + $scope.formData.id;
           requestData(_url, {}, 'get')
           .then(function (results) {
             if (results[1].code === 200) {
               $scope.isShowCancelBtn = true;
             }
           })
           .catch(function (error) {
            //  if (error) {
            //    alertError(error);
            //  }
           });
         }
      });

      $scope.$watch('formData.customerId', function (newVal, oldVal) {
        if (newVal && oldVal && oldVal !== newVal) {
          document.getElementById('angucompleteMedical_searchInputId').focus();
          //清空用户先前的药械选择
          if ($scope.formData.orderMedicalNos.length !== 0) { $scope.formData.orderMedicalNos = []; }
        }
      });

      // 监视表单内子项目变化
      $scope.watchFormChange=function(watchName){
        watchFormChange(watchName,$scope);
      };

      //需要重新家长地址方法。编辑新建后
      $scope.customerAddressReload=function (){
        $scope.reloadTime=new Date().getTime();
          modal.closeAll();
      };

      // 医院地址加载后，回调方法
      $scope.customerAddressGetCallBack = function(formData,customerAddress) {

        formData.customerName=customerAddress.name;

        if(!customerAddress||!customerAddress.contacts||customerAddress.contacts.length===0){
          formData.contactsId=null;
          return;
        }

        if(!formData.contactsId){
            formData.contactsId=customerAddress.defaultContactId;
        }

        //判断当前地址列表是否包含，选中地址。不包含则设置为默认
        var hasContactsId=false;
        for(var i=0;i<customerAddress.contacts.length;i++){
            if(formData.contactsId==customerAddress.contacts[i].id){
                hasContactsId=true;
            }
        }

        if(!hasContactsId){
            formData.contactsId=customerAddress.defaultContactId;
        }
      };

      // 发货方信息回调方法
      $scope.invoicesGetCallBack = function (formData,invoicesAddress) {

        // 新版购需单中处理发货方信息
        if (!formData.invoicesId) {
          $scope.formData.invoicesId = invoicesAddress.defaultContactId;
        }

        var _contacts = invoicesAddress.contacts;

        for (var i=0; i<_contacts.length; i++) {
          if (invoicesAddress.defaultContactId === _contacts[i].id) {
            formData.invoicesContacts = _contacts[i];
          }
        }

      };

      // 拆分药品数量
      $scope.caifenQuantity = function(tr, num) {
        tr.quantity_noInvoice_show = true;
        if (!num || tr.quantity < num) return;
        //点击拆分逻辑,不能发货数量为0,并且库存不足时,根据库存自动拆分数量.
        if (!tr.quantity_noInvoice || tr.quantity_noInvoice === 0) {
          tr.quantity_noInvoice = tr.quantity - num;
          tr.quantity = num;
        }
        //加入订单按钮状态变化
        if (tr.quantity <= num) {
          tr.handleFlag = true;
        }
      };

      // 添加一条。并缓存数据。返回true表示成功。会处理数据。
      $scope.flashAddDataCallbackFn = function(flashAddData) {

        if(!flashAddData||!flashAddData.data||!flashAddData.data.data){
          alertWarn("请选择药品");
          return ;
        }
        var medical=flashAddData.data.data;
        var addDataItem = $.extend(true,{},medical);

            addDataItem.quantity=flashAddData.quantity;
            addDataItem.discountPrice='0';
            addDataItem.discountRate='100';
            addDataItem.relId=medical.id;

            addDataItem.strike_price=addDataItem.price;
            addDataItem.id=null;
          if (!(addDataItem.relId && addDataItem.name)) {
              alertWarn('请选择药品。');
              return false;
          }
          if (!addDataItem.quantity||addDataItem.quantity<1) {
              alertWarn('请输入大于0的数量。');
              return false;
          }
          // if (!addDataItem.strike_price) {
          //     alertWarn('请输入成交价格。');
          //     return false;
          // }
          if(addDataItem.quantity>medical.quantity){//库存不足情况
              addDataItem.handleFlag =false;//默认添加到订单
          }
          if (!$scope.formData.orderMedicalNos) {
            $scope.formData.orderMedicalNos = [];
          }
          // 如果已添加
          if ($scope.formData.orderMedicalNos.length !== 0) {
            var _len = $scope.formData.orderMedicalNos.length;
            for (var i=0; i<_len; i++) {
              if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
                alertWarn('此药械已添加到列表');
                return false;
              }
            }
          }

          // 添加药品后请求当前药品的历史价格
          if (addDataItem) {
            var _url = 'rest/authen/historicalPrice/batchGetByrelIds?id=' + addDataItem.relId + '&type=销售',
                _data = {};

            requestData(_url, _data, 'GET')
            .then(function (results) {
              var _resObj = results[1].data;
              for (var item in _resObj) {
                if (item === addDataItem.relId && _resObj[item]) {
                  addDataItem.strike_price = _resObj[item].value;
                } else {
                  addDataItem.strike_price = '';
                }
              }
            })
            .catch(function (error) {
              if (error) { console.log(error || '出错!'); }
            });
          }


          //添加到列表
          $scope.formData.orderMedicalNos.push(addDataItem);
          //计算价格
          $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.quantity;
          return true;
      };

      // 保存  type:save-草稿,submit-提交订单。
      $scope.submitFormAfter = function() {

        $scope.formData.validFlag = false;

        if ($scope.submitForm_type == 'exit') {
          $scope.goTo('#/salesOrder/query.html');
          return;
        }

        if ($scope.submitForm_type == 'submit') {
          // $scope.goTo('#/salesOrder/confirm-order.html?id='+$scope.formData.id);

          var url='rest/authen/salesOrder/confirmSalesOrder';
          var data= {id:$scope.formData.id,status:'待审批'};
          requestData(url, data, 'POST')
            .then(function (results) {
              var _data = results[1].data;
              // console.log(_data);
              $scope.goTo('#/confirmOrder/edit-from-salesOrder.html?id='+_data.confirmOrder.id);

            })
            .catch(function (error) {
              // alertError(error || '出错');
            });
        }

        if ($scope.submitForm_type == 'save') {
          var _url = 'rest/authen/salesOrder/isCanClose?id=' + $scope.formData.id;
          requestData(_url, {}, 'get')
          .then(function (results) {
            if (results[1].code === 200) {
              $scope.isShowCancelBtn = true;
            }
          })
          .catch(function (error) {

          });
        }
      };

      // 能否提交验证 type:save-草稿,submit-提交订单。
      $scope.canSubmitForm = function() {
        //必须有1条是勾选加入订单的。
        var arr=$scope.formData.orderMedicalNos;
        for(var i=0;i<arr.length;i++){
           if(arr[i].handleFlag){
             return true;
           }
        }

        return false;

      };

      // 保存 type:save-草稿,submit-提交订单。
      $scope.submitForm = function(fromId, type) {
        $scope.submitForm_type = type;
        if ($scope.submitForm_type == 'submit') {
          $scope.formData.validFlag = true;
        }
        $('#' + fromId).trigger('submit');

      };

      // 取消订单
      $scope.cancelForm = function(fromId, url) {
        alertWarn('cancelForm');
      };

  }

  /**
   *  报损报溢模块
   */
  function lossOverOrderEditCtrl($scope, modal, alertWarn, watchFormChange, requestData) {

        $scope.$watch('initFlag', function () {
          var operationFlowSetMessage=[];
          var operationFlowSetKey=[];
          console.log($scope.tbodyList);
          if ($scope.showData||$scope.tr) {
            // 选择出当前状态相同的驳回理由，并放入一个数组中
            if ($scope.showData.operationFlowSet||$scope.tr.operationFlowSet) {
              for (var i=0; i<$scope.showData.operationFlowSet.length; i++) {
                if ($scope.showData.operationFlowSet[i].status==$scope.showData.orderStatus) {
                  operationFlowSetMessage.push($scope.showData.operationFlowSet[i].message);
                  operationFlowSetKey.push($scope.showData.operationFlowSet[i].key);
                }
              }
            }
          //  选择当前状态最近的一个驳回理由用于显示
           $scope.showData.operationFlowSet.message=operationFlowSetMessage[operationFlowSetMessage.length-1];
           $scope.showData.operationFlowSet.key=operationFlowSetKey[operationFlowSetKey.length-1];
           return;
          }

        });
    $scope.watchFormChange=function(watchName){
      watchFormChange(watchName,$scope);
    };


    modal.closeAll();
    // $scope.formData={};
    $scope.addDataItem = {};

    //需要重新家长地址方法。编辑新建后
    $scope.customerAddressReload=function (){
      $scope.reloadTime=new Date().getTime();
        modal.closeAll();
    };

    // 医院地址加载后，回调方法
    $scope.customerAddressGetCallBack = function(formData,customerAddress) {
      formData.customerName=customerAddress.name;

      if(!customerAddress||!customerAddress.contacts||customerAddress.contacts.length===0){
        formData.contactsId=null;
        return;
      }

      if(!formData.contactsId){
          formData.contactsId=customerAddress.defaultContactId;
      }

      //判断当前地址列表是否包含，选中地址。不包含则设置为默认
      var hasContactsId=false;
      for(var i=0;i<customerAddress.contacts.length;i++){
          if(formData.contactsId==customerAddress.contacts[i].id){
              hasContactsId=true;
          }
      }

      if(!hasContactsId){
          formData.contactsId=customerAddress.defaultContactId;
      }
    };

    // 拆分药品数量
    $scope.caifenQuantity = function(tr, num) {
      tr.quantity_noInvoice_show = true;
      if (!num || tr.quantity < num) return;
      //点击拆分逻辑,不能发货数量为0,并且库存不足时,根据库存自动拆分数量.
      if (!tr.quantity_noInvoice || tr.quantity_noInvoice === 0) {
        tr.quantity_noInvoice = tr.quantity - num;
        tr.quantity = num;
      }
      //加入订单按钮状态变化
      if (tr.quantity <= num) {
        tr.handleFlag = true;
      }
    };

    // 添加一条。并缓存数据。返回true表示成功。会处理数据。
    $scope.flashAddDataCallbackFn = function(flashAddData) {

      if(!flashAddData||!flashAddData.data||!flashAddData.data.data){
        alertWarn("请选择药品");
        return ;
      }
      var medical=flashAddData.data.data;
      var addDataItem = $.extend(true,{},medical);

          addDataItem.quantity=flashAddData.quantity;
          addDataItem.discountPrice='0';
          addDataItem.discountRate='100';
          addDataItem.relId=medical.id;

          addDataItem.strike_price=addDataItem.price;
          addDataItem.id=null;
        if (!(addDataItem.relId && addDataItem.name)) {
            alertWarn('请选择药品。');
            return false;
        }
        if (!addDataItem.quantity||addDataItem.quantity<1) {
            alertWarn('请输入大于0的数量。');
            return false;
        }
        // if (!addDataItem.strike_price) {
        //     alertWarn('请输入成交价格。');
        //     return false;
        // }
        if(addDataItem.quantity>medical.quantity){//库存不足情况
            addDataItem.handleFlag =false;//默认添加到订单
        }
        if (!$scope.formData.orderMedicalNos) {
          $scope.formData.orderMedicalNos = [];
        }
        // 如果已添加
        if ($scope.formData.orderMedicalNos.length !== 0) {
          var _len = $scope.formData.orderMedicalNos.length;
          // console.log(_len);
          // 未使用forEach方法，因为IE不兼容
          for (var i=0; i<_len; i++) {
            if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
              alertWarn('此药械已添加到列表');
              return false;
            }
          }
        }
        //添加到列表
        $scope.formData.orderMedicalNos.push(addDataItem);
        //计算价格
        $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.quantity;
        return true;
    };

    // 保存  type:save-草稿,submit-提交订单。
    $scope.submitFormAfter = function() {

      $scope.formData.validFlag = false;

      if ($scope.submitForm_type == 'exit') {
        $scope.goTo('#/salesOrder/query.html');
        return;
      }

      if ($scope.submitForm_type == 'submit') {
        // $scope.goTo('#/salesOrder/confirm-order.html?id='+$scope.formData.id);

        var url='rest/authen/salesOrder/confirmSalesOrder';
        var data= {id:$scope.formData.id,status:'待审批'};
        requestData(url, data, 'POST')
          .then(function (results) {
            var _data = results[1].data;
            // console.log(_data);
            $scope.goTo('#/confirmOrder/get2.html?id='+_data.confirmOrder.id);

          })
          .catch(function (error) {
            // alertError(error || '出错');
          });
      }

      if ($scope.submitForm_type == 'save') {
        // console.log(this);
      }
    };

    // 能否提交验证 type:save-草稿,submit-提交订单。
    $scope.canSubmitForm = function() {
      //必须有1条是勾选加入订单的。
      var arr=$scope.formData.orderMedicalNos;
      for(var i=0;i<arr.length;i++){
         if(arr[i].handleFlag){
           return true;
         }
      }

      return false;

    };

    // 保存 type:save-草稿,submit-提交订单。
    $scope.submitForm = function(fromId, type) {
      $scope.submitForm_type = type;
      if ($scope.submitForm_type == 'submit') {
        $scope.formData.validFlag = true;
      }
      $('#' + fromId).trigger('submit');

      // addDataItem_opt.submitUrl='';
      // $scope.formData.orderMedicalNos.push($scope.addDataItem);
      // $scope.addDataItem={};
    };

    // 取消订单
    $scope.cancelForm = function(fromId, url) {
      alertWarn('cancelForm');
    };

    // 取消删除表格中一条数据
    $scope.hideThisBtn = function () {
      // console.log($element);
      $('.sales-order-item-delbtn').hide();
      $scope.showHandleArea = false;
    };

  }

  /**
   *  批次冻结解冻模块
   */
  function freezeThawOrderEditCtrl($scope, modal, alertWarn, watchFormChange, requestData) {

      $scope.watchFormChange=function(watchName){
        watchFormChange(watchName,$scope);
      };
      $scope.$watch('initFlag', function () {
        var operationFlowSetMessage=[];
        var operationFlowSetKey=[];
        if ($scope.showData) {
          // 选择出当前状态相同的驳回理由，并放入一个数组中
         for (var i=0; i<$scope.showData.operationFlowSet.length; i++) {
           if ($scope.showData.operationFlowSet[i].status==$scope.showData.orderStatus) {
             operationFlowSetMessage.push($scope.showData.operationFlowSet[i].message);
             operationFlowSetKey.push($scope.showData.operationFlowSet[i].key);
           }
         }
        //  选择当前状态最近的一个驳回理由用于显示
         $scope.showData.operationFlowSet.message=operationFlowSetMessage[operationFlowSetMessage.length-1];
         $scope.showData.operationFlowSet.key=operationFlowSetKey[operationFlowSetKey.length-1];
         return;
        }

      });

      modal.closeAll();
      // $scope.formData={};
      $scope.addDataItem = {};

      //需要重新家长地址方法。编辑新建后
      $scope.customerAddressReload=function (){
        $scope.reloadTime=new Date().getTime();
          modal.closeAll();
      };

      // 医院地址加载后，回调方法
      $scope.customerAddressGetCallBack = function(formData,customerAddress) {
        formData.customerName=customerAddress.name;

        if(!customerAddress||!customerAddress.contacts||customerAddress.contacts.length===0){
          formData.contactsId=null;
          return;
        }

        if(!formData.contactsId){
            formData.contactsId=customerAddress.defaultContactId;
        }

        //判断当前地址列表是否包含，选中地址。不包含则设置为默认
        var hasContactsId=false;
        for(var i=0;i<customerAddress.contacts.length;i++){
            if(formData.contactsId==customerAddress.contacts[i].id){
                hasContactsId=true;
            }
        }

        if(!hasContactsId){
            formData.contactsId=customerAddress.defaultContactId;
        }
      };

      // 拆分药品数量
      $scope.caifenQuantity = function(tr, num) {
        tr.quantity_noInvoice_show = true;
        if (!num || tr.quantity < num) return;
        //点击拆分逻辑,不能发货数量为0,并且库存不足时,根据库存自动拆分数量.
        if (!tr.quantity_noInvoice || tr.quantity_noInvoice === 0) {
          tr.quantity_noInvoice = tr.quantity - num;
          tr.quantity = num;
        }
        //加入订单按钮状态变化
        if (tr.quantity <= num) {
          tr.handleFlag = true;
        }
      };

      // 添加一条。并缓存数据。返回true表示成功。会处理数据。
      $scope.flashAddDataCallbackFn = function(flashAddData) {
        if(!flashAddData||!flashAddData.data||!flashAddData.data.data){
          alertWarn("请选择药品");
          return ;
        }
        var medical=flashAddData.data.data;
        var addDataItem = $.extend(true,{},medical);

            addDataItem.quantity=flashAddData.quantity;
            addDataItem.discountPrice='0';
            addDataItem.discountRate='100';
            addDataItem.relId=medical.id;

            addDataItem.strike_price=addDataItem.price;
            addDataItem.id=null;
          if (!(addDataItem.relId && addDataItem.name)) {
              alertWarn('请选择药品。');
              return false;
          }
          if (!addDataItem.quantity||addDataItem.quantity<1) {
              alertWarn('请输入大于0的数量。');
              return false;
          }

          if(addDataItem.quantity>medical.quantity){//库存不足情况
              addDataItem.handleFlag =false;//默认添加到订单
          }
          if (!$scope.formData.orderMedicalNos) {
            $scope.formData.orderMedicalNos = [];
          }
          // 如果已添加
          if ($scope.formData.orderMedicalNos.length !== 0) {
            var _len = $scope.formData.orderMedicalNos.length;
            // console.log(_len);
            // 未使用forEach方法，因为IE不兼容
            for (var i=0; i<_len; i++) {
              if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
                alertWarn('此药械已添加到列表');
                return false;
              }
            }
          }
          //添加到列表
          $scope.formData.orderMedicalNos.push(addDataItem);
          //计算价格
          $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.quantity;
          return true;
      };

      // 保存  type:save-草稿,submit-提交订单。
      $scope.submitFormAfter = function() {

        $scope.formData.validFlag = false;

        if ($scope.submitForm_type == 'exit') {
          $scope.goTo('#/salesOrder/query.html');
          return;
        }

        if ($scope.submitForm_type == 'submit') {
          // $scope.goTo('#/salesOrder/confirm-order.html?id='+$scope.formData.id);

          var url='rest/authen/salesOrder/confirmSalesOrder';
          var data= {id:$scope.formData.id,status:'待审批'};
          requestData(url, data, 'POST')
            .then(function (results) {
              var _data = results[1].data;
              // console.log(_data);
              $scope.goTo('#/confirmOrder/get2.html?id='+_data.confirmOrder.id);

            })
            .catch(function (error) {
              // alertError(error || '出错');
            });
        }

        if ($scope.submitForm_type == 'save') {
          // console.log(this);
        }
      };

      // 能否提交验证 type:save-草稿,submit-提交订单。
      $scope.canSubmitForm = function() {
        //必须有1条是勾选加入订单的。
        var arr=$scope.formData.orderMedicalNos;
        for(var i=0;i<arr.length;i++){
           if(arr[i].handleFlag){
             return true;
           }
        }

        return false;

      };

      // 保存 type:save-草稿,submit-提交订单。
      $scope.submitForm = function(fromId, type) {
        $scope.submitForm_type = type;
        if ($scope.submitForm_type == 'submit') {
          $scope.formData.validFlag = true;
        }
        $('#' + fromId).trigger('submit');

        // addDataItem_opt.submitUrl='';
        // $scope.formData.orderMedicalNos.push($scope.addDataItem);
        // $scope.addDataItem={};
      };

      // 取消订单
      $scope.cancelForm = function(fromId, url) {
        alertWarn('cancelForm');
      };
      // 取消删除表格中一条数据
      $scope.hideThisBtn = function () {
        // console.log($element);
        $('.sales-order-item-delbtn').hide();
        $scope.showHandleArea = false;
      };

  }

  /**
   *  销售单编辑页
   */
  function confirmOrderEditCtrl($scope, modal,alertWarn,requestData,alertOk,alertError, dialogConfirm) {

    $scope.logistics=true;
    $scope.isShowConfirmInfo = false;

    $scope.$watch('initFlag', function () {
      var operationFlowSetMessage=[];
      var operationFlowSetKey=[];
      if ($scope.formData.operationFlowSet) {
        // 选择出当前状态相同的驳回理由，并放入一个数组中
       for (var i=0; i<$scope.formData.operationFlowSet.length; i++) {
         if ($scope.formData.operationFlowSet[i].status==$scope.formData.orderStatus) {
           operationFlowSetMessage.push($scope.formData.operationFlowSet[i].message);
           operationFlowSetKey.push($scope.formData.operationFlowSet[i].key);
         }
       }
      //  选择当前状态最近的一个驳回理由用于显示
       $scope.formData.operationFlowSet.message=operationFlowSetMessage[operationFlowSetMessage.length-1];
       $scope.formData.operationFlowSet.key=operationFlowSetKey[operationFlowSetKey.length-1];
       return;
      }
    });

    //监控业务类型，实现用户选择直运销售后选中所有的已添加药品
    $scope.$watch('formData.orderBusinessType', function (newVal) {
      if (newVal === '直运销售' && $scope.formData.orderMedicalNos.length) {
        angular.forEach($scope.formData.orderMedicalNos, function (item, index) {
          item.handleFlag = true;
        });
      }
    });

    // 监控用户变化，清空之前选择药械列表
    $scope.$watch('formData.customerId', function (newVal, oldVal) {
      if (newVal && oldVal && oldVal !== newVal) {
        $scope.logistics=false;
        if ($scope.formData.orderMedicalNos.length !== 0) { $scope.formData.orderMedicalNos = []; }
      }
    });

    // 监控用户选择的批次数量，如果不符合数量要求则弹出提示信息
    $scope.$watch('formData.orderMedicalNos', function (newVal) {
      var _total = 0;
      if ($scope.formData.orderMedicalNos) {
        angular.forEach($scope.formData.orderMedicalNos, function (data, index) {
          if (data.stockBatchs) {
            for (var i = 0; i < data.stockBatchs.length; i++) {
              _total += parseInt(data.stockBatchs[i].quantity,10);
            }
          }

          // 如果所有批次数量的和小于计划数量，则弹出提示
          $scope.isShowConfirmInfo = (_total < $scope.formData.orderMedicalNos[index].planQuantity && _total !== 0) ? true : false;

        });


      }
    }, true);

    $scope.deleteQuantity=function(item){
      angular.forEach($scope.formData.orderMedicalNos, function (item, index) {
        if (item.quantityAndbatchNumber) {
          item.quantityAndbatchNumber = '';
          item.otherQuantity ='';
          item.otherSterilizationBatchNumber = '';
          item.otherWarehouseName ='';
          item.validTill=' ';
        }
      });
    };

    // 保存type:save-草稿,submit-提交订单。
    $scope.submitFormAfter = function() {
      if ($scope.submitForm_type == 'exit') {
        $scope.goTo('#/confirmOrder/query.html');
       return;
     }else if($scope.submitForm_type == 'exit-allocate'){
       $scope.goTo('#/allocateOrder/query.html');
      return;
     }
     else   if ($scope.submitForm_type == 'print') {
       var url="indexOfPrint.html#/print/index.html?key=confirmOrderPrint&id="+$scope.formData.id;
         win1=window.open(url);

        if(!win1||!win1.location){
            alertError("被浏览器拦截了，请设置浏览器允许弹出窗口！");
        }

        return;
      }


     if ($scope.submitForm_type == 'submit') {
       var _url='rest/authen/confirmOrder/startProcessInstance';
       var data= {businessKey:$scope.formData.id};
       requestData(_url, data, 'POST')
         .then(function (results) {
           var _data = results[1];
          //  alertOk(_data.message || '操作成功');
           $scope.goTo('#/confirmOrder/get.html?id='+$scope.formData.id);

         })
         .catch(function (error) {
           alertError(error || '出错');
         });
      }
     if ($scope.submitForm_type == 'submit-allocate') {
       var _url='rest/authen/allocateOrder/startProcessInstance';
       var data= {businessKey:$scope.formData.id};
       requestData(_url, data, 'POST')
         .then(function (results) {
           var _data = results[1];
          //  alertOk(_data.message || '操作成功');
           $scope.goTo('#/allocateOrder/get.html?id='+$scope.formData.id);

         })
         .catch(function (error) {
           alertError(error || '出错');
         });
      }

    };

    // 保存type:save-草稿,submit-提交订单。
    $scope.submitForm = function(fromId, type) {

      $scope.submitForm_type = type;

      // 如果点击提交无效，再次修改提交对象中的值，则在保存点击时将后端验证标识设置为false
      if ($scope.submitForm_type === 'save' && $scope.formData.validFlag === true) {
        $scope.formData.validFlag = false;
      }

      if ($scope.submitForm_type == 'submit') {
        $scope.formData.validFlag = true;
      }

      $('#' + fromId).trigger('submit');
    };

    // 全选与全不选
    $scope.isChoiseAll = function (choiseStatus) {
      if (choiseStatus) {
        angular.forEach($scope.orderMedicalNos, function (item, index) {
          if (!item.handleFlag) {
            item.handleFlag = true;
          }
        });
      } else {
        angular.forEach($scope.orderMedicalNos, function (item, index) {
          if (item.handleFlag) {
            item.handleFlag = false;
          }
        });
      }
    };

    $scope.handleChoiseAllEvent = function () {
      var _dataSource = $scope.formData.orderMedicalNos;

      if (!$scope.choisedMedicalList) {
        $scope.choisedMedicalList = [];
      }

      if ($scope.isChoiseAll) {
        angular.forEach(_dataSource, function (data, index) {
          data.handleFlag = true;
          $scope.choisedMedicalList.push(data);
        });
      } else  {
        angular.forEach(_dataSource, function (data, index) {
          data.handleFlag = false;
          $scope.choisedMedicalList = [];
        });
      }
    };

    $scope.caifenQuantity = function(tr, num) {
      tr.quantity_noInvoice_show = true;
      if (!num || tr.quantity < num) return;
      //点击拆分逻辑,不能发货数量为0,并且库存不足时,根据库存自动拆分数量.
      if (!tr.quantity_noInvoice || tr.quantity_noInvoice === 0) {
        tr.quantity_noInvoice = tr.quantity - num;
        tr.quantity = num;
      }
      //加入订单按钮状态变化
      if (tr.quantity <= num) {
        tr.handleFlag = true;
      }
    };

    $scope.flashAddDataCallbackFn = function(flashAddData) {

      if(!flashAddData||!flashAddData.data||!flashAddData.data.data){
        alertWarn("请选择药品");
        return ;
      }

      var medical=flashAddData.data.data;
      var addDataItem = $.extend(true,{},medical);

      addDataItem.relId=medical.id;
      addDataItem.discountPrice='0';
      addDataItem.discountRate='100';
      addDataItem.strike_price=addDataItem.price;
      addDataItem.id=null;
      addDataItem.logistics=true;

      if (!addDataItem.planQuantity) {
        addDataItem.planQuantity = flashAddData.quantity;
      }

      if (!(addDataItem.relId && addDataItem.name)) {
          alertWarn('请选择药品。');
          return false;
      }
      if (!flashAddData.quantity||flashAddData.quantity<1) {
          alertWarn('请输入大于0的数量。');
          return false;
      }
      if(addDataItem.planQuantity>medical.quantity){//库存不足情况
          addDataItem.handleFlag =false;//默认添加到订单
      }
      if (!$scope.formData.orderMedicalNos) {
        $scope.formData.orderMedicalNos = [];
      }
      // 如果已添加
      if ($scope.formData.orderMedicalNos.length !== 0) {
        var _len = $scope.formData.orderMedicalNos.length;

        for (var i=0; i<_len; i++) {
          if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
            alertWarn('此药械已添加到列表');
            return false;
          }
        }
      }
      addDataItem.stockBatchs=[];

      // 添加药品后请求当前药品的最新价格
      if (addDataItem) {
        var _url = 'rest/authen/historicalPrice/batchGetByrelIds?id=' + addDataItem.relId + '&customerId=' + $scope.formData.customerId + '&type=销售';

        if ($scope.initFlag) {
          requestData(_url)
          .then(function (results) {
            var _resObj = results[1].data;
            for (var item in _resObj) {
              if (item === addDataItem.relId && _resObj[item]) {
                addDataItem.strike_price = _resObj[item].value;
              } else {
                addDataItem.strike_price = '';
              }
            }
          })
          .catch(function (error) {
            if (error) { console.log(error || '出错!'); }
          });
        }
      }

      //添加到列表
      $scope.formData.orderMedicalNos.push(addDataItem);
      //计算价格
      $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.planQuantity;
      return true;
    };

    //获取一个药械，已经选中的批次，返回成数组格式，用于同一批次只能选择一次.过滤掉要已已经选过的数据。当前选中的批次不过滤。
    //用于chosen 回调过滤数据用。
    $scope.getProductionBatchValueArray = function (stockBatchs) {
        var arr=[];
        if(!stockBatchs)return arr;
        for(var i=0;i<stockBatchs.length;i++){
            arr.push(stockBatchs[i].batchNumber);
        }
        return arr;
    };

    // 医院地址加载后，回调方法
    $scope.customerAddressGetCallBack = function(formData,customerAddress) {

      formData.customerName=customerAddress.name;

      if(!customerAddress||!customerAddress.contacts||customerAddress.contacts.length===0){
        formData.contactsId=null;
        return;
      }

      if(!formData.contactsId){
          formData.contactsId=customerAddress.defaultContactId;
      }

      //判断当前地址列表是否包含，选中地址。不包含则设置为默认
      var hasContactsId=false;
      for(var i=0;i<customerAddress.contacts.length;i++){
          if(formData.contactsId==customerAddress.contacts[i].id){
              hasContactsId=true;
          }
      }

      if(!hasContactsId){
          formData.contactsId=customerAddress.defaultContactId;
      }
    };

    // 发货方信息回调方法
    $scope.invoicesGetCallBack = function (formData,invoicesAddress) {

      // 新版购需单中处理发货方信息
      if (!formData.invoicesId) {
        $scope.formData.invoicesId = invoicesAddress.defaultContactId;
      }

      var _contacts = invoicesAddress.contacts;

      for (var i=0; i<_contacts.length; i++) {
        if (invoicesAddress.defaultContactId === _contacts[i].id) {
          formData.invoicesContacts = _contacts[i];
        }
      }

    };

    // 总价计算方法
    $scope.confirmOrderCalculaTotal = function (orderMedicalNos, orderBusinessType) {
      if (orderMedicalNos) {
        var _total = 0;
        angular.forEach(orderMedicalNos, function (item, index) {
          // 如果订单类型为普通销售
          if (orderBusinessType === '普通销售' && item.stockBatchs) {
            var _tmp = 0;
            for (var i = 0; i < item.stockBatchs.length; i++) {
              _tmp += item.stockBatchs[i].quantity * item.strike_price * (item.discountRate / 100);
            }
            _total += _tmp;
          }
          //如果订单类型是直运销售
          if (orderBusinessType === '直运销售') {
            _total += item.planQuantity * item.strike_price * (item.discountRate / 100);
          }
        });
        $scope.formData.totalPrice = _total;
      }
    };

    // 切换物流中心时提示用户，在用户选择确定后将已选择品种的批次清空
    $scope.$watch('formData.logisticsCenterId', function (newVal, oldVal) {
      if (newVal && oldVal && newVal !== oldVal) {
        dialogConfirm('切换物流中心后,所有批号信息需要重新选择.确认切换?', function () {
          // 将已选药品的批次选择清空
          if ($scope.formData.orderMedicalNos) {
            angular.forEach($scope.formData.orderMedicalNos, function (data, index) {
              data.stockBatchs = [];
            });
          }
        },'pr-dialog-confirm.html','确认提示','确定');
      }
    });
  }

  /**
   * [confirmOrderEditCtrl2 新版销售单Controller]
   * @param  {[type]} $scope      [description]
   * @param  {[type]} modal       [description]
   * @param  {[type]} alertWarn   [description]
   * @param  {[type]} requestData [description]
   * @param  {[type]} alertOk     [description]
   * @param  {[type]} alertError  [description]
   * @return {[type]}             [description]
   */
  function confirmOrderEditCtrl2($scope, modal, alertWarn, requestData, alertOk, alertError, watchFormChange, saleOrderUtils) {

    $scope.$watch('initFlag', function () {
      var operationFlowSetMessage=[];
      var operationFlowSetKey=[];
      if ($scope.scopeData) {
        // 选择出当前状态相同的驳回理由，并放入一个数组中
       for (var i=0; i<$scope.scopeData.operationFlowSet.length; i++) {
         if ($scope.scopeData.operationFlowSet[i].status==$scope.scopeData.orderStatus) {
           operationFlowSetMessage.push($scope.scopeData.operationFlowSet[i].message);
           operationFlowSetKey.push($scope.scopeData.operationFlowSet[i].key);
         }
       }
      //  选择当前状态最近的一个驳回理由用于显示
       $scope.scopeData.operationFlowSet.message=operationFlowSetMessage[operationFlowSetMessage.length-1];
       $scope.scopeData.operationFlowSet.key=operationFlowSetKey[operationFlowSetKey.length-1];
       return;
      }
    });

    // 保存type:save-草稿,submit-提交订单。
    $scope.submitFormAfter = function() {
      if ($scope.submitForm_type == 'exit') {
        $scope.goTo('#/invoicesOrder/query.html');
       return;
     }else   if ($scope.submitForm_type == 'print') {
       var url="indexOfPrint.html#/print/confirmOrderPrint.html?id="+$scope.formData.id;
         win1=window.open(url);

        if(!win1||!win1.location){
            alertError("被浏览器拦截了，请设置浏览器允许弹出窗口！");
        }

        return;
      }

      if ($scope.submitForm_type == 'submit') {
        var _url='rest/authen/confirmOrder/startProcessInstance';
        var data= {businessKey:$scope.formData.id};
        requestData(_url, data, 'POST')
          .then(function (results) {
            var _data = results[1];
           //  alertOk(_data.message || '操作成功');
            $scope.goTo('#/confirmOrder/get.html?id='+$scope.formData.id);

          })
          .catch(function (error) {
            alertError(error || '出错');
          });
       }

    };

    // 保存type:save-草稿,submit-提交订单。
    // $scope.submitForm = function(fromId, type) {
    //   $scope.submitForm_type = type;
    //   if ($scope.submitForm_type == 'save') {
    //     $scope.formData.validFlag = false;
    //   }
    //   $('#' + fromId).trigger('submit');
    // };
    $scope.submitForm = function(fromId, type) {

      $scope.submitForm_type = type;

      // 如果点击提交无效，再次修改提交对象中的值，则在保存点击时将后端验证标识设置为false
      if ($scope.submitForm_type === 'save' && $scope.formData.validFlag === true) {
        $scope.formData.validFlag = false;
      }

      if ($scope.submitForm_type == 'submit') {
        $scope.formData.validFlag = true;
      }

      $('#' + fromId).trigger('submit');
    };

    // 全选与全不选
    $scope.isChoiseAll = function (choiseStatus) {
      if (choiseStatus) {
        angular.forEach($scope.orderMedicalNos, function (item, index) {
          if (!item.handleFlag) {
            item.handleFlag = true;
          }
        });
      } else {
        angular.forEach($scope.orderMedicalNos, function (item, index) {
          if (item.handleFlag) {
            item.handleFlag = false;
          }
        });
      }
    };

    // 处理单选条目时是否自动选中全选复选框
    $scope.handleThischoise = function (item) {
      //检查药品列表是否被全部选中
      var _choiseCount = 0;
      if (item.handleFlag) {      // 点击选中
        angular.forEach($scope.orderMedicalNos, function (data, index) {
          if (data.handleFlag === true) { _choiseCount++; }
        });

        $scope.choiseStatus = ($scope.orderMedicalNos.length === _choiseCount) ? true : false;

      } else {      // 取消选中
        $scope.choiseStatus = false;
      }
    };

    // ..
    $scope.chkIsChoiseAll = function () {
      var _count  = 0;
      angular.forEach($scope.orderMedicalNos, function (data, index) {
        console.log(data.handleFlag);
        if (data.handleFlag === true) { _count++; }
      });

      $scope.choiseStatus = ($scope.orderMedicalNos.length === _count) ? true : false;
    };

    //获取一个药械，已经选中的批次，返回成数组格式，用于同一批次只能选择一次.过滤掉要已已经选过的数据。当前选中的批次不过滤。
    //用于chosen 回调过滤数据用。
    $scope.getProductionBatchValueArray = function (stockBatchs) {
        var arr=[];
        if(!stockBatchs)return arr;
        for(var i=0;i<stockBatchs.length;i++){
            arr.push(stockBatchs[i].batchNumber);
        }
        return arr;
    };

    //计算总价


  }//confirmOrderEditCtrl2

  /**
   * [ConfirmOrderMedicalController 新版销售单药品列表行控制器]
   * @param {[type]} $scope [description]
   */
  function ConfirmOrderMedicalController ($scope) {

    // 当用户选择某条目的生产批号后，将该条目设置为已选择状态
    $scope.choiseProductionBatch = function (item,stockBatchsItem,selectData) {

      if(stockBatchsItem&&!stockBatchsItem.quantity){

        //库存批次数量，满足则数量设置为计划数量。
        if(!item.quantity)item.quantity=0;

        stockBatchsItem.quantity=item.planQuantity-item.quantity;

        if(selectData){
            if(!selectData.note)selectData.note={};
            if(!selectData.note.salesQuantity)selectData.note.salesQuantity=0;
        }

        if(selectData&&selectData.note&&selectData.note.salesQuantity){

          //批次库存不满足计划销售数量
          if(stockBatchsItem.quantity>selectData.note.salesQuantity){
            stockBatchsItem.quantity= selectData.note.salesQuantity;
            $scope.item.handleFlag=true;
          }
        }else{//未获取到批次数量
          stockBatchsItem.quantity=null;
        }
      }

    };

    // 监听批次销售数量变化。
    $scope.$watch('item.stockBatchs', function (newVal,oldVal) {
      if (newVal !== undefined) {
        var item=$scope.item;
        item.quantity=0;//根据批次的销售数量，计算销售的总数量。
        //记录批次中是否有空的数量没填写，没有则根据，批次总数量，不满足销售单计划数量时，自动添加新的库存下拉选择

        if(!newVal)newVal=[{}];

        //记录添加新的批号选择下拉框的索引号。
        var noSelectproductionBatchValIndex=-1;
        for(var i=0;i<newVal.length;i++){
          if(!newVal[i].batchNumber){
            newVal[i].quantity=0;
            noSelectproductionBatchValIndex=i;
          }
          if(newVal[i].quantity){
              item.quantity+=newVal[i].quantity;
          }

        }


        if(item.quantity<item.planQuantity){//批次总数量，不满足销售单计划数量时，自动添加新的库存下拉选择
          if(noSelectproductionBatchValIndex==-1){
              item.stockBatchs.push({});
          }
        }else{//数量选择够了后，删除未选择批号的数据
            if(noSelectproductionBatchValIndex>-1){
                item.stockBatchs.splice(noSelectproductionBatchValIndex,1);
            }
        }

        if (item.quantity > 0) { item.handleFlag = true; }

      }
    },true);

    // 获取所有批次药品数量的合计
    $scope.getAllBatchTotal = function (batchsList) {

      if (batchsList && angular.isArray(batchsList)) {
        var _total = 0;
        angular.forEach(batchsList, function (item, index) {
          _total += parseInt(item.quantity, 10);
        });

        return _total;
      } else {
        return 0;
      }
    };

  }

  /**
   *出库单
   */
  function invoicesOrderCtrl($scope, modal,alertWarn,requestData,alertOk,alertError, $timeout) {
    //快递保存后
    $scope.kuaidiSaveAfter = function(kuaidi) {
        modal.closeAll();
      if(!kuaidi)return;
      if(!$scope.showData.kuaidiSet)$scope.showData.kuaidiSet=[];
      var arr=$scope.showData.kuaidiSet;

      for(var i=0;i<arr.length;i++){//有匹配就更新。
         if(arr[i].id==kuaidi.id){
           arr[i]=kuaidi;
           return;
         }
      }
      arr.push(kuaidi);//新建
    };

    $scope.deleteKuaidi = function(kuaidi,invoicesOrderId) {
       var url='rest/authen/invoicesOrder/kuaidi/delete';
       var data= {kuaidiId:kuaidi.id,invoicesOrderId:invoicesOrderId};
       requestData(url,data, 'POST')
         .then(function (results) {
           var _data = results[1];
           alertOk(_data.message || '操作成功');
           var arr=$scope.showData.kuaidiSet;
           for(var i=0;i<arr.length;i++){//有匹配就更新。
              if(arr[i].id==kuaidi.id){
                arr.splice(i,1);
                return;
              }
           }

         })
         .catch(function (error) {
           alertError(error || '出错');
         });
       };//deleteKuaidi

    $scope.submitFormAfter = function() {


        if ($scope.submitForm_type == 'exit') {
          $scope.goTo('#/invoicesOrder/query.html');
         return;
       }


     if ($scope.submitForm_type == 'submit') {
       var url='rest/authen/invoicesOrder/updateStatus';
       var data= {id:$scope.formData.id,status:'待发货'};
       requestData(url,data, 'POST')
         .then(function (results) {
           var _data = results[1];

           $scope.goTo('#/invoicesOrder/order-done.html?id='+$scope.formData.id);

         })
         .catch(function (error) {
           alertError(error || '出错');
         });


      }

    };

    $scope.submitForm = function(fromId, type) {
       $scope.submitForm_type = type;
      $('#' + fromId).trigger('submit');

    };

    // 监视用户输入备注信息，当用户输入修改后1秒自动保存用户修改
    // $scope.$watch('scopeData.note', function (newVal, oldVal) {
    //   if (newVal && (oldVal!==undefined)) {
    //     $timeout(function () {
    //       var _url = "rest/authen/invoicesOrder/save",
    //           _data = $scope.scopeData;
    //       requestData(_url, _data, 'POST', 'parameterBody')
    //       .then(function (results) {
    //         if (results[1].code === 200) {
    //           $scope.showSaveNoteInfo = true;
    //         }
    //       })
    //       .catch(function (error) {
    //         if (error) { throw new Error(error || '出错!'); }
    //       });
    //     }, 1000);
    //   }
    // });

    // 监视备注提示信息，显示后1秒自动隐藏
    // $scope.$watch('showSaveNoteInfo', function (newVal) {
    //   if (newVal) {    // 如果信息显示了
    //     $timeout(function () {
    //       $scope.showSaveNoteInfo = false;
    //     }, 1500);
    //   }
    // });
  }

  /**
   *站内消息
   */
  function noticeCtrl($scope, modal,alertWarn,requestData,alertOk,alertError,$rootScope,$interval) {
    /**
    *保存
    type:save-草稿,submit-提交订单。
    */
    $scope.noticeClick = function(notice) {

        requestRead(notice.id,notice);

        notice.readFlag=true;
      if($scope.scopeResponse&&$scope.scopeResponse.totalCount)$scope.scopeResponse.totalCount--;
        if (!(notice.moduleType&&notice.relId)){
            alertOk(notice.subject);
            return;
        }
            //相应跳转
          window.location.assign('#/'+notice.moduleType+'/get.html?id='+notice.relId);


     };//noticeClick



     //刷新未读消息通知
     function refreshNotice(){
         $rootScope.noticeRefreshTime=new Date().getTime();
     }

     //启动消息定时获取未读消息通知
     $rootScope.startGetMsg = function(){
         if(Config.stopIntervalNotice===true){
            return;
         }
         if($rootScope.startGetMsgObj)return;
           $rootScope.startGetMsgObj=$interval(function(){
             refreshNotice();
           }, 10000);
       };
        $rootScope.startGetMsg();

     //标记已经阅读。
     requestRead = function(id,notice) {
       var url='rest/authen/notice/read';
       var data= {id:id};
       requestData(url,data, 'POST')
         .then(function (results) {
             refreshNotice();
         })
         .catch(function (error) {

         });
     };//end $scope.requestRead

   }//noticeCtrl

   /**
    *编辑、新建采购单
    */
   function arrivalNoticeOrderEditCtrl($scope, modal,alertWarn,alertError,requestData,watchFormChange) {
     $scope.$watch('initFlag', function (newVal) {
       if (newVal && $scope.formData.orderMedicalNos) {

        for (var i=0; i<$scope.formData.orderMedicalNos.length; i++) {
          if ($scope.formData.orderMedicalNos[i].handleFlag) {
            $scope.choisedMedicals = true;
          }
          if (!$scope.formData.orderMedicalNos[i].handleFlag) {
            $scope.isChoiseAll = false;
          }
        }
       }
     });
     $scope.canSubmitForm = function() {
       //必须有1条是勾选加入订单的。
       var arr=$scope.formData.orderMedicalNos;
       for(var i=0;i<arr.length;i++){
          if(arr[i].handleFlag){
            return true;
          }
       }
       return false;
     };

     $scope.chkChoiseMedicals = function (item,medicalsObj) {
       if (item.handleFlag) {

         $scope.choisedMedicals = true;  // 标识为true，底部生成采购单按钮可用

         for (var i=0; i<medicalsObj.length; i++) {
           if (medicalsObj[i].handleFlag === false) {
             $scope.isChoiseAll = false;
             return;
           }
         }

         $scope.isChoiseAll = true;
       } else {      // 处理用户取消选择,需遍历药品列表，判断是否还有没有取消的药品

         $scope.isChoiseAll = false;

         for (var j=0; j<medicalsObj.length; j++) {
           if (medicalsObj[j].handleFlag === true) {
             $scope.choisedMedicals = true;
             return;
           }
         }

         $scope.choisedMedicals = false;   // 没有药品被选中，设置按钮不可用
       }
     };


     $scope.handleItemClickEvent = function (tr) {
       var _dataSource = $scope.formData.orderMedicalNos;
       if (!$scope.choisedMedicalList) {
         $scope.choisedMedicalList = [];
       }
       if (tr.handleFlag) {
         $scope.choisedMedicalList.push(tr);
         if ($scope.choisedMedicalList.length === _dataSource.length) {
           $scope.isChoiseAll = true;
         }
       } else {
         angular.forEach($scope.choisedMedicalList, function (data, index) {
           if (data.relId === tr.relId) {
             $scope.choisedMedicalList.splice(index, 1);
           }
         });
         $scope.isChoiseAll = false;
       }
     };

       modal.closeAll();
       // $scope.formData={};
       $scope.addDataItem = {};
       //需要重新家长地址方法。编辑新建后
       $scope.customerAddressReload=function (){
         $scope.reloadTime=new Date().getTime();
           modal.closeAll();
       };

       /**
       * 医院地址加载后，回调方法
       */
       $scope.customerAddressGetCallBack = function(formData,customerAddress) {
         formData.customerName=customerAddress.name;
         if(!formData.contactsId){
             formData.contactsId=customerAddress.defaultContactId;
         }

         //判断当前地址列表是否包含，选中地址。不包含则设置为默认
         var hasContactsId=false;
         for(var i=0;i<customerAddress.contacts.length;i++){
             if(formData.contactsId==customerAddress.contacts[i].id){
                 hasContactsId=true;
             }
         }

         if(!hasContactsId){
             formData.contactsId=customerAddress.defaultContactId;
         }
       };

       $scope.flashAddDataCallbackFn = function(flashAddData) {

         if(!flashAddData||!flashAddData.data||!flashAddData.data.data){
           alertWarn("请选择药品");
           return ;
         }
         var medical=flashAddData.data.data;
         var addDataItem = $.extend(true,{},medical);

             addDataItem.quantity=flashAddData.quantity;
             addDataItem.discountPrice='0';
             addDataItem.discountRate='100';
             addDataItem.taxRate='17';
             addDataItem.batchRequirement='无';
             addDataItem.relId=medical.id;

             addDataItem.strike_price=addDataItem.price;
             addDataItem.id=null;
           if (!(addDataItem.relId && addDataItem.name)) {
               alertWarn('请选择药品。');
               return false;
           }
           if (!addDataItem.quantity||addDataItem.quantity<1) {
               alertWarn('请输入大于0的数量。');
               return false;
           }
           // if (!addDataItem.strike_price) {
           //     alertWarn('请输入成交价格。');
           //     return false;
           // }
           if(addDataItem.quantity>medical.quantity){//库存不足情况
               addDataItem.handleFlag =false;//默认添加到订单
           }
           if (!$scope.formData.orderMedicalNos) {
             $scope.formData.orderMedicalNos = [];
           }
           // 如果已添加
           if ($scope.formData.orderMedicalNos.length !== 0) {
             var _len = $scope.formData.orderMedicalNos.length;
             // console.log(_len);
             // 未使用forEach方法，因为IE不兼容
             for (var i=0; i<_len; i++) {
               if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
                 alertWarn('此药械已添加到列表');
                 return false;
               }
             }
           }
           //添加到列表
           $scope.formData.orderMedicalNos.push(addDataItem);
           //计算价格
           $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.quantity;
           return true;
       };


          /**
              * 添加一条。并缓存数据。
              */
              $scope.selectRelIdCallBack = function(data) {
                $scope.addDataItem.relId = data.id;
                $scope.addDataItem.name = data.name;
                $scope.addDataItem.brand = data.brand;
                $scope.addDataItem.unit = data.unit;
                $scope.addDataItem.price = data.price;
                // $scope.addDataItem.isSameBatch = '否';
                $scope.addDataItem.strike_price = data.price;
                $scope.addDataItem.headUrl = data.headUrl;
                $scope.addDataItem.specification = data.specification;
                $scope.addDataItem.manufacturer = data.manufacturer;
                $scope.addDataItem.handleFlag =true;//默认添加到订单
                $scope.addDataItem.productionBatch = '无';
                $scope.addDataItem.dosageForms = data.dosageForms;
                $scope.addDataItem.code = data.code;
                $scope.addDataItem.productionBatch = data.productionBatch;
                $scope.addDataItem.productionDate = data.productionDate;
                $scope.addDataItem.guaranteePeriod = data.guaranteePeriod;
                $scope.addDataItem.licenseNumber = data.licenseNumber;
                $scope.addDataItem.deliveryPlus = data.deliveryPlus;
                $scope.addDataItem.drugAdministrationCode = data.drugAdministrationCode;

                // alert($('#addDataItem_quantity').length);
                // $('#addDataItem_quantity').trigger('focus');
                $('#addDataItem_quantity').trigger('focus');
              };
              /**
              * 添加一条。并缓存数据。
              */


       /**
       * 添加一条。并缓存数据。
       */
       $scope.selectRelIdCallBack = function(data) {
         $scope.addDataItem.relId = data.id;
         $scope.addDataItem.name = data.name;
         $scope.addDataItem.brand = data.brand;
         $scope.addDataItem.unit = data.unit;
         $scope.addDataItem.price = data.price;
         // $scope.addDataItem.isSameBatch = '否';
         $scope.addDataItem.strike_price = data.price;
         $scope.addDataItem.headUrl = data.headUrl;
         $scope.addDataItem.specification = data.specification;
         $scope.addDataItem.manufacturer = data.manufacturer;
         $scope.addDataItem.handleFlag =true;//默认添加到订单
         $scope.addDataItem.productionBatch = '无';
         $scope.addDataItem.dosageForms = data.dosageForms;
         $scope.addDataItem.code = data.code;
         $scope.addDataItem.productionBatch = data.productionBatch;
         $scope.addDataItem.productionDate = data.productionDate;
         $scope.addDataItem.guaranteePeriod = data.guaranteePeriod;
         $scope.addDataItem.licenseNumber = data.licenseNumber;
         $scope.addDataItem.deliveryPlus = data.deliveryPlus;
         $scope.addDataItem.drugAdministrationCode = data.drugAdministrationCode;

         // alert($('#addDataItem_quantity').length);
         // $('#addDataItem_quantity').trigger('focus');
         $('#addDataItem_quantity').trigger('focus');
       };
       /**
       * 添加一条。并缓存数据。
       */
       $scope.addDataItemClick = function(addDataItem,medical) {
           if (!(addDataItem.relId && addDataItem.name)) {
               alertWarn('请选择药品。');
               return;
           }
           if (!addDataItem.quantity||addDataItem.quantity<1) {
               alertWarn('请输入大于0的数量。');
               return;
           }

           if(addDataItem.quantity>medical.quantity){//库存不足情况
               addDataItem.handleFlag =false;//默认添加到订单
           }

           // 如果已添加
            if ($scope.formData.orderMedicalNos.length > 0) {
              var _len = $scope.formData.orderMedicalNos.length;
              // 未使用forEach方法，因为IE不兼容
              for (var i=0; i<_len; i++) {
                if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
                  alertWarn('此药械已添加到列表');
                  return;
                }
              }
            }

           if (!$scope.formData.orderMedicalNos) $scope.formData.orderMedicalNos = [];
           $scope.formData.orderMedicalNos.push(addDataItem);

           //计算价格
           $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.quantity;

           $scope.addDataItem = {};

           $('input', '#addDataItem_relId_chosen').trigger('focus');
           // $('#addDataItem_relId_chosen').trigger('click');
       };

       /**
       *保存
       type:save-草稿,submit-提交订单。
       */
       $scope.submitFormAfter = function() {

           $scope.formData.validFlag = false;

         if ($scope.submitForm_type == 'exit') {
           $scope.goTo('#/arrivalNoticeOrder/query.html');
          return;
        }
         if ($scope.submitForm_type == 'submit') {
           var url='rest/authen/arrivalNoticeOrder/updateStatus';
           var data= {id:$scope.formData.id,status:'待审核'};
           requestData(url,data, 'POST')
             .then(function (results) {
               var _data = results[1];
              //  alertOk(_data.message || '操作成功');
               $scope.goTo('#/arrivalNoticeOrder/get.html?id='+$scope.formData.id);

             })
             .catch(function (error) {
               alertError(error || '出错');
             });
         }

       };

       /**
       *保存
       type:save-草稿,submit-提交订单。
       */
       $scope.submitForm = function(fromId, type) {
          $scope.submitForm_type = type;
          if ($scope.submitForm_type == 'submit') {
            $scope.formData.validFlag = true;
          }
         $('#' + fromId).trigger('submit');

         // addDataItem_opt.submitUrl='';
         // $scope.formData.orderMedicalNos.push($scope.addDataItem);
         // $scope.addDataItem={};
       };
       /**
        *取消订单
        */
       $scope.cancelForm = function(fromId, url) {
           alertWarn('cancelForm');
       };


        $scope.watchFormChange=function(watchName){
          watchFormChange(watchName,$scope);
        };

        /**
         * [chkChoiseMedicals 请购单中检查用户是否已选择部分药品]
         * @param  {[type]} item [description]
         * @return {[type]}      [description]
         */
        $scope.chkChoiseMedicals = function (item,medicalsObj) {
          if (item.handleFlag) {

            $scope.choisedMedicals = true;  // 标识为true，底部生成采购单按钮可用

            for (var i=0; i<medicalsObj.length; i++) {
              if (medicalsObj[i].handleFlag === false) {
                $scope.isChoiseAll = false;
                return;
              }
            }

            $scope.isChoiseAll = true;
          } else {      // 处理用户取消选择,需遍历药品列表，判断是否还有没有取消的药品

            $scope.isChoiseAll = false;

            for (var j=0; j<medicalsObj.length; j++) {
              if (medicalsObj[j].handleFlag === true) {
                $scope.choisedMedicals = true;
                return;
              }
            }

            $scope.choisedMedicals = false;   // 没有药品被选中，设置按钮不可用
          }
        };

        /**
         * [handleChoiseAllEvent 处理全选与全不选]
         * @param  {[type]} medicalsObj [description]
         * @return {[type]}             [description]
         */
        $scope.handleChoiseAllEvent = function (medicalsObj) {
          if (medicalsObj && angular.isArray(medicalsObj)) {
            if ($scope.isChoiseAll) {   // 全选被选中
              angular.forEach(medicalsObj, function (data, index) {
                data.handleFlag = true;
                $scope.choisedMedicals = true;    // 生成按钮可用
              });
            } else {    //取消了全部选中
              angular.forEach(medicalsObj, function (data, index) {
                data.handleFlag = false;
                $scope.choisedMedicals = false;   // 生成按钮不可用
              });
            }
          }
        };

   }//end salesOrderEditCtrl

  function purchaseOrderEditCtrl($scope, modal,alertWarn,alertError,requestData,watchFormChange, dialogConfirm) {

    // 根据实际采购数量的变化与计划采购数量做对比的标识变量
    $scope.isShowPurchaseInfo = false;

    // 如果实际采购数量大于计划采购数量，则屏蔽下一步操作
    $scope.isDisabledNextStep = false;

    $scope.$watch('initFlag', function (newVal) {

       var operationFlowSetMessage=[];
       var operationFlowSetKey=[];
       var i;
       if (newVal && $scope.scopeData) {

         // 选择出当前状态相同的驳回理由，并放入一个数组中

        for (i=0; i<$scope.scopeData.operationFlowSet.length; i++) {
          if ($scope.scopeData.operationFlowSet[i].status==$scope.scopeData.orderStatus) {
            operationFlowSetMessage.push($scope.scopeData.operationFlowSet[i].message);
            operationFlowSetKey.push($scope.scopeData.operationFlowSet[i].key);
          }
        }
       //  选择当前状态最近的一个驳回理由用于显示
        $scope.scopeData.operationFlowSet.message=operationFlowSetMessage[operationFlowSetMessage.length-1];
        $scope.scopeData.operationFlowSet.key=operationFlowSetKey[operationFlowSetKey.length-1];

       }
       if (newVal && $scope.formData) {
         // 选择出当前状态相同的驳回理由，并放入一个数组中
         if ($scope.formData.operationFlowSet) {
           for (i=0; i<$scope.formData.operationFlowSet.length; i++) {
             if ($scope.formData.operationFlowSet[i].status==$scope.formData.orderStatus) {
               operationFlowSetMessage.push($scope.formData.operationFlowSet[i].message);
               operationFlowSetKey.push($scope.formData.operationFlowSet[i].key);
             }
           }

           //选择当前状态最近的一个驳回理由用于显示
           $scope.formData.operationFlowSet.message=operationFlowSetMessage[operationFlowSetMessage.length-1];
           $scope.formData.operationFlowSet.key=operationFlowSetKey[operationFlowSetKey.length-1];
         }


       }
       if (newVal && $scope.tr) {
         // 选择出当前状态相同的驳回理由，并放入一个数组中
         if ($scope.tr.operationFlowSet) {
           for (i=0; i<$scope.tr.operationFlowSet.length; i++) {
             if ($scope.tr.operationFlowSet[i].status==$scope.tr.orderStatus) {
               operationFlowSetMessage.push($scope.tr.operationFlowSet[i].message);
               operationFlowSetKey.push($scope.tr.operationFlowSet[i].key);
             }
           }

           //选择当前状态最近的一个驳回理由用于显示
           $scope.tr.operationFlowSet.message=operationFlowSetMessage[operationFlowSetMessage.length-1];
           $scope.tr.operationFlowSet.key=operationFlowSetKey[operationFlowSetKey.length-1];
         }
       }

       if (newVal && $scope.formData) {
         if (newVal && $scope.formData.orderMedicalNos) {
          //  angular.forEach($scope.formData.orderMedicalNos, function (data, index) {
          //    if (data.handleFlag)
          //  })
          for (i=0; i<$scope.formData.orderMedicalNos.length; i++) {
            if ($scope.formData.orderMedicalNos[i].handleFlag) {
              $scope.choisedMedicals = true;
            }
            if (!$scope.formData.orderMedicalNos[i].handleFlag) {
              $scope.isChoiseAll = false;
            }
          }
          // $scope.isChoiseAll = true;
         }
       }


     });

    // 监控用户变化，清空之前选择药械列表
    $scope.$watch('formData.supplier.id', function (newVal, oldVal) {
      if (newVal && oldVal && oldVal !== newVal) {
        if ($scope.formData.orderMedicalNos.length !== 0) { $scope.formData.orderMedicalNos = []; }
      }
    });

    $scope.canSubmitForm = function() {
       //必须有1条是勾选加入订单的。
       var arr=$scope.formData.orderMedicalNos;
       for(var i=0;i<arr.length;i++){
          if(arr[i].handleFlag){
            return true;
          }
       }
       return false;
     };

    $scope.chkChoiseMedicals = function (item,medicalsObj) {
       if (item.handleFlag) {

         $scope.choisedMedicals = true;  // 标识为true，底部生成采购单按钮可用

         for (var i=0; i<medicalsObj.length; i++) {
           if (medicalsObj[i].handleFlag === false) {
             $scope.isChoiseAll = false;
             return;
           }
         }

         $scope.isChoiseAll = true;
       } else {      // 处理用户取消选择,需遍历药品列表，判断是否还有没有取消的药品

         $scope.isChoiseAll = false;

         for (var j=0; j<medicalsObj.length; j++) {
           if (medicalsObj[j].handleFlag === true) {
             $scope.choisedMedicals = true;
             return;
           }
         }

         $scope.choisedMedicals = false;   // 没有药品被选中，设置按钮不可用
       }
     };

    $scope.handleItemClickEvent = function (tr) {
       var _dataSource = $scope.formData.orderMedicalNos;
       if (!$scope.choisedMedicalList) {
         $scope.choisedMedicalList = [];
       }
       if (tr.handleFlag) {
         $scope.choisedMedicalList.push(tr);
         if ($scope.choisedMedicalList.length === _dataSource.length) {
           $scope.isChoiseAll = true;
         }
       } else {
         angular.forEach($scope.choisedMedicalList, function (data, index) {
           if (data.relId === tr.relId) {
             $scope.choisedMedicalList.splice(index, 1);
           }
         });
         $scope.isChoiseAll = false;
       }
     };

    modal.closeAll();
    $scope.addDataItem = {};

    //需要重新家长地址方法。编辑新建后
    $scope.customerAddressReload=function (){
      $scope.reloadTime=new Date().getTime();
      modal.closeAll();
    };

    /**
    * 医院地址加载后，回调方法
    */
    $scope.customerAddressGetCallBack = function(formData,customerAddress) {
     formData.customerName=customerAddress.name;
     if(!formData.contactsId){
         formData.contactsId=customerAddress.defaultContactId;
     }

     //判断当前地址列表是否包含，选中地址。不包含则设置为默认
     var hasContactsId=false;
     for(var i=0;i<customerAddress.contacts.length;i++){
         if(formData.contactsId==customerAddress.contacts[i].id){
             hasContactsId=true;
         }
     }

     if(!hasContactsId){
         formData.contactsId=customerAddress.defaultContactId;
     }
   };

    $scope.flashAddDataCallbackFn = function(flashAddData) {

     if(!flashAddData||!flashAddData.data||!flashAddData.data.data){
       alertWarn("请选择药品");
       return ;
     }
     var medical=flashAddData.data.data;
     var addDataItem = $.extend(true,{},medical);

         addDataItem.quantity=flashAddData.quantity;
         addDataItem.discountPrice='0';
         addDataItem.discountRate='100';
         addDataItem.strick_price=addDataItem.purchasePrice;
         addDataItem.taxRate='17';
         addDataItem.batchRequirement='无';
         addDataItem.relId=medical.id;

         addDataItem.strike_price=addDataItem.price;
         addDataItem.id=null;
       if (!(addDataItem.relId && addDataItem.name)) {
           alertWarn('请选择药品。');
           return false;
       }
       if (!addDataItem.quantity||addDataItem.quantity<1) {
           alertWarn('请输入大于0的数量。');
           return false;
       }
       // if (!addDataItem.strike_price) {
       //     alertWarn('请输入成交价格。');
       //     return false;
       // }
       if(addDataItem.quantity>medical.quantity){//库存不足情况
           addDataItem.handleFlag =false;//默认添加到订单
       }
       if (!$scope.formData.orderMedicalNos) {
         $scope.formData.orderMedicalNos = [];
       }
       // 如果已添加
       if ($scope.formData.orderMedicalNos.length !== 0) {
         var _len = $scope.formData.orderMedicalNos.length;

         for (var i=0; i<_len; i++) {
           if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
             alertWarn('此药械已添加到列表');
             return false;
           }
         }
       }

       // 添加药品后请求当前药品的历史价格
       if (addDataItem) {
        //  var _url = 'rest/authen/historicalPrice/batchGetByrelIds?id=' + addDataItem.relId + '&type=采购';
        var _url = 'rest/authen/historicalPrice/batchGetByrelIds?id=' + addDataItem.relId + '&supplierId=' + $scope.formData.supplier.id + '&type=采购';

         requestData(_url)
         .then(function (results) {
           var _resObj = results[1].data;
           for (var item in _resObj) {
             if (item === addDataItem.relId && _resObj[item]) {
               addDataItem.strike_price = _resObj[item].value;
             } else {
               addDataItem.strike_price = '';
             }
           }
         })
         .catch(function (error) {
           if (error) { console.log(error || '出错!'); }
         });
       }

       //添加到列表
       $scope.formData.orderMedicalNos.push(addDataItem);
       //计算价格
       $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.quantity;
       return true;
   };

    $scope.selectRelIdCallBack = function(data) {
      $scope.addDataItem.relId = data.id;
      $scope.addDataItem.name = data.name;
      $scope.addDataItem.brand = data.brand;
      $scope.addDataItem.unit = data.unit;
      $scope.addDataItem.price = data.price;
      // $scope.addDataItem.isSameBatch = '否';
      $scope.addDataItem.strike_price = data.price;
      $scope.addDataItem.headUrl = data.headUrl;
      $scope.addDataItem.specification = data.specification;
      $scope.addDataItem.manufacturer = data.manufacturer;
      $scope.addDataItem.handleFlag =true;//默认添加到订单
      $scope.addDataItem.productionBatch = '无';
      $scope.addDataItem.dosageForms = data.dosageForms;
      $scope.addDataItem.code = data.code;
      $scope.addDataItem.productionBatch = data.productionBatch;
      $scope.addDataItem.productionDate = data.productionDate;
      $scope.addDataItem.guaranteePeriod = data.guaranteePeriod;
      $scope.addDataItem.licenseNumber = data.licenseNumber;
      $scope.addDataItem.deliveryPlus = data.deliveryPlus;
      $scope.addDataItem.drugAdministrationCode = data.drugAdministrationCode;

      // alert($('#addDataItem_quantity').length);
      // $('#addDataItem_quantity').trigger('focus');
      $('#addDataItem_quantity').trigger('focus');
    };


    $scope.addDataItemClick = function(addDataItem,medical) {
       if (!(addDataItem.relId && addDataItem.name)) {
           alertWarn('请选择药品。');
           return;
       }
       if (!addDataItem.quantity||addDataItem.quantity<1) {
           alertWarn('请输入大于0的数量。');
           return;
       }

       if(addDataItem.quantity>medical.quantity){//库存不足情况
           addDataItem.handleFlag =false;//默认添加到订单
       }

       // 如果已添加
        if ($scope.formData.orderMedicalNos.length > 0) {
          var _len = $scope.formData.orderMedicalNos.length;
          // 未使用forEach方法，因为IE不兼容
          for (var i=0; i<_len; i++) {
            if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
              alertWarn('此药械已添加到列表');
              return;
            }
          }
        }

       if (!$scope.formData.orderMedicalNos) $scope.formData.orderMedicalNos = [];
       $scope.formData.orderMedicalNos.push(addDataItem);

       //计算价格
       $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.quantity;

       $scope.addDataItem = {};

       $('input', '#addDataItem_relId_chosen').trigger('focus');
       // $('#addDataItem_relId_chosen').trigger('click');
   };

    /**
    *保存 type:save-草稿,submit-提交订单。
    */
    $scope.submitFormAfter = function() {

      $scope.formData.validFlag = false;

        if ($scope.submitForm_type == 'exit') {
          $scope.goTo('#/purchaseOrder/query.html');
          return;
        }else if ($scope.submitForm_type == 'print') {
          var url="indexOfPrint.html#/print/index.html?key=purchaseVoucher&id="+$scope.formData.id;
          win1=window.open(url);

          if(!win1||!win1.location){
            alertError("被浏览器拦截了，请设置浏览器允许弹出窗口！");
          }
          return;
        }

        if ($scope.submitForm_type == 'submit') {
          var _url='rest/authen/purchaseOrder/startProcessInstance';
          var data= {businessKey:$scope.formData.id};
          requestData(_url,data, 'POST')
            .then(function (results) {
              var _data = results[1];
              $scope.goTo('#/purchaseOrder/get.html?id='+$scope.formData.id);
            })
            .catch(function (error) {
              alertError(error || '出错');
            });
          }
        };
    /**
    * 保 存 type:save-草稿,submit-提交订单。
    */
    $scope.submitForm = function(fromId, type) {
      $scope.submitForm_type = type;
      if ($scope.submitForm_type == 'submit') {
        $scope.formData.validFlag = true;
      }
     $('#' + fromId).trigger('submit');

     // addDataItem_opt.submitUrl='';
     // $scope.formData.orderMedicalNos.push($scope.addDataItem);
     // $scope.addDataItem={};
   };

    /**
     *取消订单
     */
    $scope.cancelForm = function(fromId, url) {
           alertWarn('cancelForm');
       };


    $scope.watchFormChange=function(watchName){
          watchFormChange(watchName,$scope);
        };

    /**
     * [chkChoiseMedicals 请购单中检查用户是否已选择部分药品]
     * @param  {[type]} item [description]
     * @return {[type]}      [description]
     */
    $scope.chkChoiseMedicals = function (item,medicalsObj) {
      if (item.handleFlag) {

        $scope.choisedMedicals = true;  // 标识为true，底部生成采购单按钮可用

        for (var i=0; i<medicalsObj.length; i++) {
          if (medicalsObj[i].handleFlag === false) {
            $scope.isChoiseAll = false;
            return;
          }
        }

        $scope.isChoiseAll = true;
      } else {      // 处理用户取消选择,需遍历药品列表，判断是否还有没有取消的药品

        $scope.isChoiseAll = false;

        for (var j=0; j<medicalsObj.length; j++) {
          if (medicalsObj[j].handleFlag === true) {
            $scope.choisedMedicals = true;
            return;
          }
        }

        $scope.choisedMedicals = false;   // 没有药品被选中，设置按钮不可用
      }
    };

    /**
     * [handleChoiseAllEvent 处理全选与全不选]
     * @param  {[type]} medicalsObj [description]
     * @return {[type]}             [description]
     */
    $scope.handleChoiseAllEvent = function (medicalsObj) {
      if (medicalsObj && angular.isArray(medicalsObj)) {
        if ($scope.isChoiseAll) {   // 全选被选中
          angular.forEach(medicalsObj, function (data, index) {
            data.handleFlag = true;
            $scope.choisedMedicals = true;    // 生成按钮可用
          });
        } else {    //取消了全部选中
          angular.forEach(medicalsObj, function (data, index) {
            data.handleFlag = false;
            $scope.choisedMedicals = false;   // 生成按钮不可用
          });
        }
      }
    };

    /**
     * [createPurVoBtnClick 点击生成采购凭证事件]
     * @param  {[type]} _id [当前采购单id]
     * @return {[type]}             [description]
     */
    $scope.createPurVoBtnClick = function (_id) {
      var url = 'rest/authen/purchaseVoucher/save';
      var data= {purchaseOrderId:_id};
      requestData(url,data, 'POST')
        .then(function (results) {
          var _data = results[1].data;
          console.log(_data);
          $scope.goTo('#/purchaseVoucher/get.html?id='+_data.id);
        })
        .catch(function (error) {
          alertError(error || '出错');
        });
    };

    /**
     * [handleMessageShow 将通过后的补充说明显示到备注里]
     * @return {[type]} [description]
     */
    $scope.handleMessageShow = function (obj) {
      if (obj.operationFlowSet) {
        // console.log(obj.operationFlowSet);
        angular.forEach(obj.operationFlowSet, function (item, index) {
          if (item.status === obj.orderStatus) { obj.note = item.key; }
        });
      }
    };

    // 监控计划采购数量与实际采购数量的方法
    $scope.diffPurchaseNumber = function (orderMedicalList) {
      if (orderMedicalList) {
        angular.forEach(orderMedicalList, function (data, index) {
          // 选择的数量小于计划数量，显示提示信息
          $scope.isShowPurchaseInfo = (data.planQuantity > data.quantity) ? true : false;
          // ..
          $scope.isDisabledNextStep = (data.quantity > data.planQuantity) ? true : false;

        });

      }
    };

    // 检查添加的供应商是否有地址信息，没有则弹出层跳转到维护地址
    $scope.chkSupplierInfo = function (supplier) {
      // console.log(supplier);
      if (!supplier.contact) {
        dialogConfirm('供应商地址信息不完整，请完善', function () {
          window.location.assign('#/supplier/edit-contact.html?id='+supplier.id);
        });
      }
    };

   }//end salesOrderEditCtrl

  function allocateOrderEditCtrl($scope, modal,alertWarn,alertError,requestData,watchFormChange) {

    $scope.logistics=true;

    $scope.$watch('initFlag', function () {
      var operationFlowSetMessage=[];
      var operationFlowSetKey=[];
      if ($scope.tr.operationFlowSet) {
        // 选择出当前状态相同的驳回理由，并放入一个数组中
       for (var i=0; i<$scope.tr.operationFlowSet.length; i++) {
         if ($scope.tr.operationFlowSet[i].status==$scope.tr.orderStatus) {
           operationFlowSetMessage.push($scope.tr.operationFlowSet[i].message);
           operationFlowSetKey.push($scope.tr.operationFlowSet[i].key);
         }
       }
      //  选择当前状态最近的一个驳回理由用于显示
       $scope.tr.operationFlowSet.message=operationFlowSetMessage[operationFlowSetMessage.length-1];
       $scope.tr.operationFlowSet.key=operationFlowSetKey[operationFlowSetKey.length-1];
       return;
      }
    });

    //监控业务类型，实现用户选择直运销售后选中所有的已添加药品
    $scope.$watch('formData.orderBusinessType', function (newVal) {
      if (newVal === '直运销售' && $scope.formData.orderMedicalNos.length) {
        angular.forEach($scope.formData.orderMedicalNos, function (item, index) {
          item.handleFlag = true;
        });
      }
    });

    // 监控用户变化，清空之前选择药械列表
    $scope.$watch('formData.customerId', function (newVal, oldVal) {
      if (newVal && oldVal && oldVal !== newVal) {
        $scope.logistics=false;
        if ($scope.formData.orderMedicalNos.length !== 0) { $scope.formData.orderMedicalNos = []; }
      }
    });

    $scope.deleteQuantity=function(item){
      angular.forEach($scope.formData.orderMedicalNos, function (item, index) {
        if (item.quantityAndbatchNumber) {
          item.quantityAndbatchNumber = '';
          item.otherQuantity ='';
          item.otherSterilizationBatchNumber = '';
          item.otherWarehouseName ='';
          item.validTill=' ';
        }
      });
    };

    // 保存type:save-草稿,submit-提交订单。
    $scope.submitFormAfter = function() {
      if ($scope.submitForm_type == 'exit') {
        $scope.goTo('#/confirmOrder/query.html');
       return;
     }else   if ($scope.submitForm_type == 'print') {
       var url="indexOfPrint.html#/print/index.html?key=confirmOrderPrint&id="+$scope.formData.id;
         win1=window.open(url);

        if(!win1||!win1.location){
            alertError("被浏览器拦截了，请设置浏览器允许弹出窗口！");
        }

        return;
      }


     if ($scope.submitForm_type == 'submit') {
       var _url='rest/authen/confirmOrder/startProcessInstance';
       var data= {businessKey:$scope.formData.id};
       requestData(_url, data, 'POST')
         .then(function (results) {
           var _data = results[1];
          //  alertOk(_data.message || '操作成功');
           $scope.goTo('#/confirmOrder/get.html?id='+$scope.formData.id);

         })
         .catch(function (error) {
           alertError(error || '出错');
         });
      }
    };

    // 保存type:save-草稿,submit-提交订单。
    $scope.submitForm = function(fromId, type) {

      $scope.submitForm_type = type;

      // 如果点击提交无效，再次修改提交对象中的值，则在保存点击时将后端验证标识设置为false
      if ($scope.submitForm_type === 'save' && $scope.formData.validFlag === true) {
        $scope.formData.validFlag = false;
      }

      if ($scope.submitForm_type == 'submit') {
        $scope.formData.validFlag = true;
      }

      $('#' + fromId).trigger('submit');
    };

    // 全选与全不选
    $scope.isChoiseAll = function (choiseStatus) {
      if (choiseStatus) {
        angular.forEach($scope.orderMedicalNos, function (item, index) {
          if (!item.handleFlag) {
            item.handleFlag = true;
          }
        });
      } else {
        angular.forEach($scope.orderMedicalNos, function (item, index) {
          if (item.handleFlag) {
            item.handleFlag = false;
          }
        });
      }
    };

    $scope.handleChoiseAllEvent = function () {
      var _dataSource = $scope.formData.orderMedicalNos;

      if (!$scope.choisedMedicalList) {
        $scope.choisedMedicalList = [];
      }

      if ($scope.isChoiseAll) {
        angular.forEach(_dataSource, function (data, index) {
          data.handleFlag = true;
          $scope.choisedMedicalList.push(data);
        });
      } else  {
        angular.forEach(_dataSource, function (data, index) {
          data.handleFlag = false;
          $scope.choisedMedicalList = [];
        });
      }
    };

    $scope.caifenQuantity = function(tr, num) {
      tr.quantity_noInvoice_show = true;
      if (!num || tr.quantity < num) return;
      //点击拆分逻辑,不能发货数量为0,并且库存不足时,根据库存自动拆分数量.
      if (!tr.quantity_noInvoice || tr.quantity_noInvoice === 0) {
        tr.quantity_noInvoice = tr.quantity - num;
        tr.quantity = num;
      }
      //加入订单按钮状态变化
      if (tr.quantity <= num) {
        tr.handleFlag = true;
      }
    };

    $scope.flashAddDataCallbackFn = function(flashAddData) {

      if(!flashAddData||!flashAddData.data||!flashAddData.data.data){
        alertWarn("请选择药品");
        return ;
      }

      var medical=flashAddData.data.data;
      var addDataItem = $.extend(true,{},medical);

      addDataItem.relId=medical.id;
      addDataItem.discountPrice='0';
      addDataItem.discountRate='100';
      addDataItem.strike_price=addDataItem.price;
      addDataItem.id=null;
      addDataItem.logistics=true;

      if (!addDataItem.planQuantity) {
        addDataItem.planQuantity = flashAddData.quantity;
      }

      if (!(addDataItem.relId && addDataItem.name)) {
          alertWarn('请选择药品。');
          return false;
      }
      if (!flashAddData.quantity||flashAddData.quantity<1) {
          alertWarn('请输入大于0的数量。');
          return false;
      }
      // if (!addDataItem.strike_price) {
      //     alertWarn('请输入成交价格。');
      //     return false;
      // }

      if(addDataItem.planQuantity>medical.quantity){//库存不足情况
          addDataItem.handleFlag =false;//默认添加到订单
      }

      if (!$scope.formData.orderMedicalNos) {
        $scope.formData.orderMedicalNos = [];
      }
      // 如果已添加
      if ($scope.formData.orderMedicalNos.length !== 0) {
        var _len = $scope.formData.orderMedicalNos.length;

        for (var i=0; i<_len; i++) {
          if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
            alertWarn('此药械已添加到列表');
            return false;
          }
        }
      }
      addDataItem.stockBatchs=[];

      // 添加药品后请求当前药品的历史价格
      if (addDataItem) {
        var _url = 'rest/authen/historicalPrice/batchGetByrelIds?id=' + addDataItem.relId + '&type=销售',
            _data = {};

        requestData(_url, _data, 'GET')
        .then(function (results) {
          var _resObj = results[1].data;
          for (var item in _resObj) {
            if (item === addDataItem.relId && _resObj[item]) {
              addDataItem.strike_price = _resObj[item].value;
            } else {
              addDataItem.strike_price = '';
            }
          }
        })
        .catch(function (error) {
          if (error) { console.log(error || '出错!'); }
        });
      }

      //添加到列表
      $scope.formData.orderMedicalNos.push(addDataItem);
      //计算价格
      $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.planQuantity;
      return true;
    };

    //获取一个药械，已经选中的批次，返回成数组格式，用于同一批次只能选择一次.过滤掉要已已经选过的数据。当前选中的批次不过滤。
    //用于chosen 回调过滤数据用。
    $scope.getProductionBatchValueArray = function (stockBatchs) {
        var arr=[];
        if(!stockBatchs)return arr;
        for(var i=0;i<stockBatchs.length;i++){
            arr.push(stockBatchs[i].batchNumber);
        }
        return arr;
    };

    // 医院地址加载后，回调方法
    $scope.customerAddressGetCallBack = function(formData,customerAddress) {

      formData.customerName=customerAddress.name;

      if(!customerAddress||!customerAddress.contacts||customerAddress.contacts.length===0){
        formData.contactsId=null;
        return;
      }

      if(!formData.contactsId){
          formData.contactsId=customerAddress.defaultContactId;
      }

      //判断当前地址列表是否包含，选中地址。不包含则设置为默认
      var hasContactsId=false;
      for(var i=0;i<customerAddress.contacts.length;i++){
          if(formData.contactsId==customerAddress.contacts[i].id){
              hasContactsId=true;
          }
      }

      if(!hasContactsId){
          formData.contactsId=customerAddress.defaultContactId;
      }
    };

    // 发货方信息回调方法
    $scope.invoicesGetCallBack = function (formData,invoicesAddress) {

      // 新版购需单中处理发货方信息
      if (!formData.invoicesId) {
        $scope.formData.invoicesId = invoicesAddress.defaultContactId;
      }

      var _contacts = invoicesAddress.contacts;

      for (var i=0; i<_contacts.length; i++) {
        if (invoicesAddress.defaultContactId === _contacts[i].id) {
          formData.invoicesContacts = _contacts[i];
        }
      }

    };

    // 总价计算方法
    $scope.confirmOrderCalculaTotal = function (orderMedicalNos, orderBusinessType) {
      if (orderMedicalNos) {
        var _total = 0;
        angular.forEach(orderMedicalNos, function (item, index) {
          // 如果订单类型为普通销售
          if (orderBusinessType === '普通销售' && item.stockBatchs) {
            var _tmp = 0;
            for (var i = 0; i < item.stockBatchs.length; i++) {
              _tmp += item.stockBatchs[i].quantity * item.strike_price * (item.discountRate / 100);
            }
            _total += _tmp;
          }
          //如果订单类型是直运销售
          if (orderBusinessType === '直运销售') {
            _total += item.planQuantity * item.strike_price * (item.discountRate / 100);
          }
        });
        $scope.formData.localTotalPrice = _total;
      }
    };

  }//end salesOrderEditCtrl


  /**
  * [requestPurchaseOrderEditCtrl 请购单控制器]
  * @param  {[type]} $scope          [description]
  * @param  {[type]} modal           [description]
  * @param  {[type]} alertWarn       [description]
  * @param  {[type]} alertError      [description]
  * @param  {[type]} requestData     [description]
  * @param  {[type]} watchFormChange [description]
  * @return {[type]}                 [description]
  */
  function requestPurchaseOrderEditCtrl($scope, modal,alertWarn,alertError,requestData,watchFormChange, $timeout) {

    $scope.isShowCancelBtn = false;
    $scope.isGoNextStep = false;
    $scope.showSaveNoteInfo = false;    // 是否显示自动保存用户修改备注信息的提示

    //页面Loading时初始化数据
    $scope.$watch('initFlag', function (newVal) {

     // 初始化商品列表的状态为选中
    //  if (newVal && $scope.formData.orderMedicalNos) {
    //    for (var i=0; i<$scope.formData.orderMedicalNos.length; i++) {
    //      if ($scope.formData.orderMedicalNos[i].handleFlag) {
    //        $scope.choisedMedicals = true;
    //      }
    //      if (!$scope.formData.orderMedicalNos[i].handleFlag) {
    //        $scope.isChoiseAll = false;
    //      }
    //    }
    //   }


      if (newVal) {
        //创建临时变量存储商品列表，并将数据对象orderMedicalNos置空
        // $scope.tempDataList = $scope.formData.orderMedicalNos;
        // $scope.formData.orderMedicalNos = [];

        //发送请求判断当前订单状态是否可显示关闭按钮
        var _url = 'rest/authen/requestPurchaseOrder/isCanClose?id=' + $scope.formData.id;
        requestData(_url, {}, 'get')
        .then(function (results) {
          if (results[1].code === 200) {
            $scope.isShowCancelBtn = true;
          }
        });
      }
    });

    modal.closeAll();
    $scope.addDataItem = {};

    // 监视用户输入备注信息，当用户输入修改后1秒自动保存用户修改
    $scope.$watch('formData.note', function (newVal, oldVal) {
     if (newVal && (oldVal!==undefined)) {
       $timeout(function () {
         var _url = "rest/authen/requestPurchaseOrder/save",
             _data = $scope.formData;
         requestData(_url, _data, 'POST', 'parameterBody')
         .then(function (results) {
           if (results[1].code === 200) {
             $scope.showSaveNoteInfo = true;
           }
         })
         .catch(function (error) {
           if (error) { throw new Error(error || '出错!'); }
         });
       }, 1000);
     }
    });

    // 监视备注提示信息，显示后1秒自动隐藏
    $scope.$watch('showSaveNoteInfo', function (newVal) {
     if (newVal) {    // 如果信息显示了
       $timeout(function () {
         $scope.showSaveNoteInfo = false;
       }, 1500);
     }
    });

    $scope.flashAddDataCallbackFn = function(flashAddData) {

     if(!flashAddData||!flashAddData.data||!flashAddData.data.data){
       alertWarn("请选择药品");
       return ;
     }
     var medical=flashAddData.data.data;
     var addDataItem = $.extend(true,{},medical);

         addDataItem.quantity=flashAddData.quantity;
         addDataItem.discountPrice='0';
         addDataItem.discountRate='100';
         addDataItem.relId=medical.id;

         addDataItem.strike_price=addDataItem.price;
         addDataItem.id=null;
       if (!(addDataItem.relId && addDataItem.name)) {
           alertWarn('请选择药品。');
           return false;
       }
       if (!addDataItem.quantity||addDataItem.quantity<1) {
           alertWarn('请输入大于0的数量。');
           return false;
       }
       // if (!addDataItem.strike_price) {
       //     alertWarn('请输入成交价格。');
       //     return false;
       // }
       if(addDataItem.quantity>medical.quantity){//库存不足情况
           addDataItem.handleFlag =false;//默认添加到订单
       }
       if (!$scope.formData.orderMedicalNos) {
         $scope.formData.orderMedicalNos = [];
       }
       // 如果已添加
       if ($scope.formData.orderMedicalNos.length !== 0) {
         var _len = $scope.formData.orderMedicalNos.length;
         // console.log(_len);
         // 未使用forEach方法，因为IE不兼容
         for (var i=0; i<_len; i++) {
           if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
             alertWarn('此药械已添加到列表');
             return false;
           }
         }
       }
       //添加到列表
       $scope.formData.orderMedicalNos.push(addDataItem);
       //计算价格
       $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.quantity;
       return true;
    };

    /**
    * 添加一条。并缓存数据。
    */
    $scope.addDataItemClick = function(addDataItem,medical) {
       if (!(addDataItem.relId && addDataItem.name)) {
           alertWarn('请选择药品。');
           return;
       }
       if (!addDataItem.quantity||addDataItem.quantity<1) {
           alertWarn('请输入大于0的数量。');
           return;
       }

       if(addDataItem.quantity>medical.quantity){//库存不足情况
           addDataItem.handleFlag =false;//默认添加到订单
       }

       // 如果已添加
        if ($scope.formData.orderMedicalNos.length > 0) {
          var _len = $scope.formData.orderMedicalNos.length;
          // 未使用forEach方法，因为IE不兼容
          for (var i=0; i<_len; i++) {
            if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
              alertWarn('此药械已添加到列表');
              return;
            }
          }
        }

       if (!$scope.formData.orderMedicalNos) $scope.formData.orderMedicalNos = [];
       $scope.formData.orderMedicalNos.push(addDataItem);

       //计算价格
       $scope.formData.totalPrice += addDataItem.strike_price * addDataItem.quantity;

       $scope.addDataItem = {};

       $('input', '#addDataItem_relId_chosen').trigger('focus');
       // $('#addDataItem_relId_chosen').trigger('click');
    };

    $scope.submitFormAfter = function() {

      $scope.formData.validFlag = false;

      if ($scope.submitForm_type == 'exit') {
        $scope.goTo('#/requestPurchaseOrder/query.html');
        return;
      }

      if ($scope.submitForm_type == 'submit') {
        var url='rest/authen/requestPurchaseOrder/confirm';
        var data= {id:$scope.formData.id};
        requestData(url,data, 'POST')
         .then(function (results) {
           var _data = results[1];
           $scope.goTo('#/purchaseOrder/edit.html?id='+_data.data.purchaseOrder.id);
         })
         .catch(function (error) {
           alertError(error || '出错');
         });
      }
    };

    $scope.submitForm = function(fromId, type) {
      $scope.submitForm_type = type;
       if ($scope.submitForm_type == 'submit') {
         $scope.formData.validFlag = true;
       }

       $('#' + fromId).trigger('submit');
     };

    $scope.watchFormChange=function(watchName){
      watchFormChange(watchName,$scope);
    };

    //请购单中检查用户是否已选择部分药品
    $scope.chkChoiseMedicals = function (item,medicalsObj) {
      //定义存放厂家id数组
      if (!$scope._supplierArray) {
        $scope._supplierArray = [];
      }

      // 如果用户选中药品
      if (item.handleFlag) {
        // 数据对象中加入该项药品
        // $scope.formData.orderMedicalNos.push(item);
        // 将厂家id作为标识放入数组
        $scope._supplierArray.push(item.supplierId);
        // 设置标识为true，表示选中此项
        item.handleFlag = true;
        //判断是否可进行下一步
        $scope.isGoNextStep = chkMultipleId($scope._supplierArray) ? true : false;
      } else {      // 取消选中
        // 删除当前项
        // angular.forEach($scope.formData.orderMedicalNos, function (data, index) {
        //   if (data.id === item.id) {
        //     $scope.formData.orderMedicalNos.splice(index,1);
        //   }
        // });

        // 删除标识
        angular.forEach($scope._supplierArray, function (data, index) {
          if (data === item.supplierId) {
            $scope._supplierArray.splice(index, 1);
          }
        });

        // 设置标识为false，表示取消此项
        item.handleFlag = false;

        //判断是否可进行下一步
        $scope.isGoNextStep = chkMultipleId($scope._supplierArray) ? true : false;
      }

      //检测用户是否选择了多个厂家的药品
      function chkMultipleId (arr) {
        if (arr.length > 0) {
          var _bool = arr.every(function (item, index, array) {
            return item === arr[0];
          });
          return _bool;
        }
      }
    };

    //处理全选与全不选
    $scope.handleChoiseAllEvent = function (medicalsObj) {
    if (medicalsObj && angular.isArray(medicalsObj)) {
      if ($scope.isChoiseAll) {   // 全选被选中
        angular.forEach(medicalsObj, function (data, index) {
          data.handleFlag = true;
          $scope.choisedMedicals = true;    // 生成按钮可用
        });
      } else {    //取消了全部选中
        angular.forEach(medicalsObj, function (data, index) {
          data.handleFlag = false;
          $scope.choisedMedicals = false;   // 生成按钮不可用
        });
      }
    }
    };
  }

   /**
    *用户审核
    */
   function auditUserApplyOrganizationCtrl($scope, modal,alertWarn,requestData,alertOk,alertError,$rootScope,proLoading) {

     /**
     获取选择的用户对象，用于显示人名
     */
     $scope.getCheckUserApplyArr = function(arr,ids) {

       //
       var data=[];
        if(!ids||ids.length===0){
          return data;
        }
        for(var i=0;i<arr.length;i++){
          if(ids.indexOf(arr[i].id)>-1&&arr[i].formData){
                    data.push(arr[i]);
          }
        }
          return data;
      };
     /**
     *保存
     type:save-草稿,submit-提交订单。
     */
     $scope.batchAuditUserApplyOrganization = function(arr,ids,status,key,message) {
        if(!ids||ids.length===0){
          alertWarn('请先勾选');
          return;
        }
        //
        var data=[];
        for(var i=0;i<arr.length;i++){

          if(ids.indexOf(arr[i].id)>-1&&arr[i].formData){
                    arr[i].formData.status=status;
                    arr[i].formData.key=key;
                    arr[i].formData.message=message;
                    data.push(arr[i].formData);
          }
        }


        var url='rest/authen/distributor/batchAuditUserApplyOrganization';


        var  maskObj=proLoading();

        requestData(url,data, 'POST',true)
          .then(function (results) {
                   if(maskObj)maskObj.hide();
                    alertOk(results[1].msg);
                  $scope.$broadcast('reloadList');
                    $scope.$emit('reloadList');
                    modal.close();

          })
          .catch(function (error) {
            if(maskObj)maskObj.hide();
              modal.close();
             alertWarn(error);


          });

      };//batchAuditUserApplyOrganization

      //启动消息定时获取
      $rootScope.startGetMsg = function(){
          if($rootScope.startGetMsgObj)return;
            $rootScope.startGetMsgObj=$interval(function(){
               $rootScope.noticeRefreshTime=new Date().getTime();
            }, 10000);
        };
         $rootScope.startGetMsg();

      //标记已经阅读。
      requestRead = function(id,notice) {
        var url='rest/authen/notice/read';
        var data= {id:id};
        requestData(url,data, 'POST')
          .then(function (results) {

          })
          .catch(function (error) {

          });
      };//end $scope.requestRead

    }//auditUserApplyOrganizationCtrl


    /**
     *站内消息
     */
    function watchFormCtrl($scope, watchFormChange) {
      $scope.watchFormChange=function(watchName){
        watchFormChange(watchName,$scope);
      };


     }//watchFormCtrl


     /**
      * 定时任务ctrl
      */
     function intervalCtrl($scope, modal,alertWarn,requestData,alertOk,alertError,$rootScope,$interval) {

    }//intervalCtrl


    function QualificationApplyCtrl ($scope, watchFormChange, requestData, utils, alertError, alertWarn) {

      $scope.$watch('initFlag', function (newVal) {
         var operationFlowSetMessage=[];
         var operationFlowSetKey=[];
         var i;
         if (newVal && $scope.tr) {
           // 选择出当前状态相同的驳回理由，并放入一个数组中
           if ($scope.tr.operationFlowSet) {
             for (i=0; i<$scope.tr.operationFlowSet.length; i++) {
               if ($scope.tr.operationFlowSet[i].status==$scope.tr.orderStatus) {
                 operationFlowSetMessage.push($scope.tr.operationFlowSet[i].message);
                 operationFlowSetKey.push($scope.tr.operationFlowSet[i].key);
               }
             }
             //选择当前状态最近的一个驳回理由用于显示
             $scope.tr.operationFlowSet.message=operationFlowSetMessage[operationFlowSetMessage.length-1];
             $scope.tr.operationFlowSet.key=operationFlowSetKey[operationFlowSetKey.length-1];
           }
         }

         if ($scope.formData) {
           if (newVal && $scope.formData.orderMedicalNos) {
            for (i=0; i<$scope.formData.orderMedicalNos.length; i++) {
              if ($scope.formData.orderMedicalNos[i].handleFlag) {
                $scope.choisedMedicals = true;
              }
              if (!$scope.formData.orderMedicalNos[i].handleFlag) {
                $scope.isChoiseAll = false;
              }
            }
           }
         }

         if ($scope.formData) {
           for(var tr in $scope.formData.attachments){
             // 首先把Jason对象转化成数组，然后再把每条的证书编号字段取出来，如果有值，则把idAdmin字段设为false，相反设为true。该字段控制是否可以对证书编号进行编辑
             var attachments=[];
             attachments.push($scope.formData.attachments[tr]);
               attachments[0].isAdmin=true;
           }
         }
       });

      $scope.watchFormChange = function(watchName){
        watchFormChange(watchName,$scope);
      };

      $scope.submitForm = function(fromId, type) {
         $scope.submitForm_type = type;
         if ($scope.submitForm_type == 'submit-enterprise') {
           requestData('rest/authen/firstEnterpriseApplication/saveBaseInfo', $scope.formData, 'POST', 'parameterBody')
           .then(function (results) {
             if (results[1].code === 200) {
               var url='rest/authen/firstEnterpriseApplication/startProcessInstance';
               var data= {businessKey:$scope.formData.id};
               requestData(url,data, 'POST')
                .then(function (results) {
                  var _data = results[1];
                  $scope.goTo('#/firstEnterpriseApplication/get.html?id='+$scope.formData.id);
                })
                .catch(function (error) {
                  alertError(error || '出错');
                });
             }
           })
           .catch(function (error) {
           });
         }
         if ($scope.submitForm_type == 'submit-medical') {
           requestData('rest/authen/firstMedicalApplication/saveBaseInfo', $scope.formData, 'POST', 'parameterBody')
           .then(function (results) {
             if (results[1].code === 200) {
               var url='rest/authen/firstMedicalApplication/startProcessInstance';
               var data= {businessKey:$scope.formData.id};
               requestData(url,data, 'POST')
                .then(function (results) {
                  var _data = results[1];
                  $scope.goTo('#/firstMedicalApplication/get.html?id='+$scope.formData.id);
                })
                .catch(function (error) {
                  alertError(error || '出错');
                });
             }
           })
           .catch(function (error) {
           });
         }
         if ($scope.submitForm_type == 'submit-hospital') {
           requestData('rest/authen/hospitalApplication/saveBaseInfo', $scope.formData, 'POST', 'parameterBody')
           .then(function (results) {
             if (results[1].code === 200) {
               var url='rest/authen/hospitalApplication/startProcessInstance';
               var data= {businessKey:$scope.formData.id};
               requestData(url,data, 'POST')
                .then(function (results) {
                  var _data = results[1];
                  $scope.goTo('#/hospitalApplication/get.html?id='+$scope.formData.id);
                })
                .catch(function (error) {
                  alertError(error || '出错');
                });
             }
           })
           .catch(function (error) {
           });
         }
         if ($scope.submitForm_type == 'submit-otherCustomer') {
           requestData('rest/authen/otherCustomerApplication/saveBaseInfo', $scope.formData, 'POST', 'parameterBody')
           .then(function (results) {
             if (results[1].code === 200) {
               var url='rest/authen/otherCustomerApplication/startProcessInstance';
               var data= {businessKey:$scope.formData.id};
               requestData(url,data, 'POST')
                .then(function (results) {
                  var _data = results[1];
                  $scope.goTo('#/otherCustomerApplication/get.html?id='+$scope.formData.id);
                })
                .catch(function (error) {
                  alertError(error || '出错');
                });
             }
           })
           .catch(function (error) {
           });
         }

         if ($scope.submitForm_type == 'submit') {
           $scope.formData.validFlag = true;
         }
        $('#' + fromId).trigger('submit');
      };

      $scope.submitFormAfter = function (_url) {
        if ($scope.submitForm_type === 'submit') {
          $scope.goTo(_url + '?id=' + $scope.formData.id);
        }
      };

      // 选中相应药品类别，放入数组中传到后台
      $scope.choiceCommodityType=function(item){
        if(item.value){
          if($scope.formData.commodityType === null){
            $scope.formData.commodityType=[];
          }
        $scope.formData.commodityType.push(item.text);

        }
      };

      //判断当前审核意见是否可见
      $scope.showAuditOpinion = function (returnArr, pipeKey) {
        if (angular.isArray(returnArr)) {
          var i, len;
          len = returnArr.length;
          for (i = 0; i < len; i++) {
            if (returnArr[i].event.status !== pipeKey) {
              return true;
            }
          }
          return false;
        }
      };

      //医院采购目录医院添加单条药品信息
      $scope.addMedicinalDataItem = function (hospitalId) {

        // $scope.responseBody = {};

        // if (id) {
        //   $scope.responseBody.hospitalPurchaseContentsId = id;
        // }

            if (!$scope.medical||!$scope.medical.id) {
                alertWarn("请选择药械");
                return;

            }

          var formData = $.extend(true,{},$scope.medical);

          //处理药品内信息id和copyId，以区分新建和编辑
          formData.hospitalId = hospitalId;
          formData.relId = $scope.medical.id;
          formData.id = null;
          formData.purchasePrice = formData.price;

        requestData('rest/authen/hospitalPurchaseMedical/save', formData, 'POST', 'parameterBody')
        .then(function (results) {
          if (results[1].code === 200) {
            // utils.goTo('#/hospitalPurchaseContents/get.html?id='+hospitalId);
            $scope.$broadcast('reloadList');
          } else {
            alertError('出错!');
          }
        })
        .catch(function (error) {
           alertError('此药械已添加');
        });
      };

      // 首营品种新建页面用户输入零售价大于牌价的提示
      $scope.chkQuoteAndRetail = function () {
        if ($scope.formData.firstMedical.quoteprice) {
          $scope.$watch($scope.formData.firstMedical.retailPrice, function () {
            if (parseInt($scope.formData.firstMedical.retailPrice) > parseInt($scope.formData.firstMedical.quoteprice)) {
              alertWarn('当前输入的零售价大于输入的牌价!');
            }
          });
        }
      };

      //医院采购目录增加采购目录有效期设置
      $scope.$watch('listParams.guaranteePeriod', function (newVal) {
        if (newVal === undefined) {
          return;
        }

        $scope.showData.guaranteePeriod = newVal;

        requestData('rest/authen/customerAddress/save', $scope.showData, 'POST', 'parameter-body')
        .then(function (results) {
          // console.log(results);
        })
        .catch(function (error) {
          if (error) {
            alertError(error || '出错');
          }
        });
      });

      // 监视用户是否更改是否基药选项，如果更改为非基药，将非基药价格重置为0
      $scope.$watch('formData.firstMedical.isBasicMedicine', function (newVal) {
        if (newVal === '否') {
          $scope.formData.firstMedical.quoteprice = 0;
        }
      });
    }

    function SelectedCommodityEditCtrl ($scope, watchFormChange, requestData, utils, alertError, alertWarn) {
      $scope.$watch('!initFlag', function (newVal) {
        var scopeData= [];

        for(var item in $scope.scopeData){

          scopeData.push($scope.scopeData[item]);

          if ($scope.formData.commodityType) {
            for(j=0;j<$scope.formData.commodityType.length;j++){

              if($scope.formData.commodityType[j]==$scope.scopeData[item].value){
              $scope.scopeData[item].value=true;
              }
            }
          }
        }
      });

      $scope.watchFormChange = function(watchName){
        watchFormChange(watchName,$scope);
      };
    }

    /**
     * [hospitalPurchaseContentsCtrl 医院采购目录主控制器]
     * @param  {[type]} $scope          [注入项]
     * @param  {[type]} watchFormChange [注入项]
     * @param  {[type]} requestData     [注入项]
     * @param  {[type]} utils           [注入项]
     * @param  {[type]} alertError      [注入项]
     * @param  {[type]} alertWarn       [注入项]
     * @return {[type]}                 [description]
     */
    function hospitalPurchaseContentsCtrl ($scope, watchFormChange, requestData, utils, alertError, alertWarn, $timeout) {

      // 临时存放要删除的药品列表
      $scope._tmpDelList = [];

      // 监控tbodyList数组变化
      $scope.$watch('tbodyList', function (newVal, oldVal) {
        if (newVal && newVal !== oldVal) {
          $scope.tbodyListChange = true;
        }
      });

      $scope.$watch('initFlag', function (newVal) {
         if (newVal && $scope.formData.orderMedicalNos) {
          for (var i=0; i<$scope.formData.orderMedicalNos.length; i++) {
            if ($scope.formData.orderMedicalNos[i].handleFlag) {
              $scope.choisedMedicals = true;
            }
            if (!$scope.formData.orderMedicalNos[i].handleFlag) {
              $scope.isChoiseAll = false;
            }
          }
          // $scope.isChoiseAll = true;
         }
       });

      $scope.watchFormChange = function(watchName){
        watchFormChange(watchName,$scope);
      };

      // 监控医院采购目录中tbodyList对象的变化
      $scope.$watch('tbodyList', function (newVal, oldVal) {
        if (newVal && newVal !== oldVal) {
          $scope.changeFlag = true;
          // $scope.formData.orderMedicalNos = $scope.tbodyList;
        }
      }, true);

      // 监控分页页码的变化，解决点击分页后保存按钮可用的问题
      // $scope.$watch('status.currentPage', function (newVal, oldVal) {
      //   if (newVal && newVal !== oldVal) {
      //     console.log('aaa');
      //     $scope.changeFlag = false;
      //   }
      // });

      // 修改医院采购目录中药品价格后将当前药品插入formData中
      $scope.modifiedThisMedicalItem = function (item) {
        if (!$scope.formData.orderMedicalNos) {
          $scope.formData.orderMedicalNos = [];
        }

        angular.forEach($scope.formData.orderMedicalNos, function (data, index) {
          if (data.id === item.id) {
            $scope.formData.orderMedicalNos.splice(index, 1);    // 删除重复数据
          }
        });

        $scope.formData.orderMedicalNos.push(item);   // 将修改后的药品数据放入数据体
      };

      $scope.submitForm = function(fromId, type) {
         $scope.submitForm_type = type;

         if ($scope.submitForm_type == 'submit') {
           $scope.formData.validFlag = true;
         }

         $('#' + fromId).trigger('submit');
      };

      $scope.submitFormAfter = function () {
        $scope.formData.validFlag = false;

        if ($scope.submitForm_type == 'submit') {
          utils.goTo('#/hospitalPurchaseContents/get.html?id='+$scope.formData.id);
        }
      };

      //判断当前审核意见是否可见
      $scope.showAuditOpinion = function (returnArr, pipeKey) {
        if (angular.isArray(returnArr)) {
          var i, len;
          len = returnArr.length;
          for (i = 0; i < len; i++) {
            if (returnArr[i].event.status !== pipeKey) {
              return true;
            }
          }
          return false;
        }
      };

      //医院采购目录医院添加单条药品信息
      $scope.addMedicinalDataItem = function (hospitalId) {

        // $scope.responseBody = {};

        // if (id) {
        //   $scope.responseBody.hospitalPurchaseContentsId = id;
        // }

            if (!$scope.medical||!$scope.medical.id) {
                alertWarn("请选择药械");
                return;

            }

          var formData = $.extend(true,{},$scope.medical);

          //处理药品内信息id和copyId，以区分新建和编辑
          formData.hospitalId = hospitalId;
          formData.relId = $scope.medical.id;
          formData.id = null;
          formData.purchasePrice = formData.price;

        requestData('rest/authen/hospitalPurchaseMedical/save', formData, 'POST', 'parameterBody')
        .then(function (results) {
          if (results[1].code === 200) {
            // utils.goTo('#/hospitalPurchaseContents/get.html?id='+hospitalId);
            $scope.$broadcast('reloadList');
          } else {
            alertError('出错!');
          }
        })
        .catch(function (error) {
           alertError('此药械已添加');
        });
      };

      // 首营品种新建页面用户输入零售价大于牌价的提示
      $scope.chkQuoteAndRetail = function () {
        if ($scope.formData.firstMedical.quoteprice) {
          $scope.$watch($scope.formData.firstMedical.retailPrice, function () {
            if (parseInt($scope.formData.firstMedical.retailPrice) > parseInt($scope.formData.firstMedical.quoteprice)) {
              alertWarn('当前输入的零售价大于输入的牌价!');
            }
          });
        }
      };

      //医院采购目录增加采购目录有效期设置
      $scope.$watch('listParams.guaranteePeriod', function (newVal) {
        if (newVal === undefined) {
          return;
        }

        $scope.showData.guaranteePeriod = newVal;

        requestData('rest/authen/customerAddress/save', $scope.showData, 'POST', 'parameter-body')
        .then(function (results) {
          // console.log(results);
        })
        .catch(function (error) {
          if (error) {
            alertError(error || '出错');
          }
        });
      });

      // 监视用户是否更改是否基药选项，如果更改为非基药，将非基药价格重置为0
      $scope.$watch('formData.firstMedical.isBasicMedicine', function (newVal) {
        if (newVal === '否') {
          $scope.formData.firstMedical.quoteprice = 0;
        }
      });

      // 单选按钮
      $scope.handleItemClickEvent = function (tr) {
        $scope.changeFlag = false;    // 不能做修改确认操作

        if (tr.handleFlag) {          // 选中
          $scope._tmpDelList.push(tr.id);
        } else {                      // 取消选中
          angular.forEach($scope._tmpDelList, function (item, index) {
            if (item === tr.id) { $scope._tmpDelList.splice(index, 1); }
          });
        }
      };

      // 全选与全不选
      $scope.isChoiseAll = function (choiseStatus) {
        if (choiseStatus) {
          angular.forEach($scope.orderMedicalNos, function (item, index) {
            if (!item.handleFlag) {
              item.handleFlag = true;
            }
          });
        } else {
          angular.forEach($scope.orderMedicalNos, function (item, index) {
            if (item.handleFlag) {
              item.handleFlag = false;
            }
          });
        }
      };

      // 处理全选和取消全选
      $scope.handleChoiseAllEvent = function () {
        $scope.changeFlag = false;      // 不能做修改确认操作

        if ($scope.isChoiseAll) {         // 选中全选
          if ($scope.tbodyList) {
            angular.forEach($scope.tbodyList, function (item, index) {
              $scope._tmpDelList.push(item.id);
            });
          }
        } else {                          // 取消全选
          $scope._tmpDelList = [];
          $scope.formData.delete.ids = [];
        }
      };

      // 处理批量删除按钮点击事件
      $scope.handleBatchDel = function () {
        if ($scope._tmpDelList.length) {

          angular.forEach($scope._tmpDelList, function (item, index) {
            for (var i=0; i<$scope.tbodyList.length; i++) {
              if (item === $scope.tbodyList[i].id) {
                $scope.tbodyList.splice(i, 1);
              }
            }
            $scope.formData.delete.ids.push(item);
            // 清空临时变量数组
            $scope._tmpDelList = [];
            // 可进行下一步操作
            $scope.changeFlag = true;
          });
        }
      };

      $scope.hospitalPurchaseContents_flashAddDataCallbackFn = function(flashAddData) {

        var i;

        if(!flashAddData||!flashAddData.data||!flashAddData.data.data){
          alertWarn("请选择药品");
          return ;
        }

        var medical=flashAddData.data.data;
        var addDataItem = $.extend(true,{},medical);

        addDataItem.relId=medical.id;
        addDataItem.discountPrice='0';
        addDataItem.discountRate='100';
        // addDataItem.strike_price=addDataItem.price;
        // addDataItem.id=null;

        if (!addDataItem.planQuantity) {
          addDataItem.planQuantity = flashAddData.quantity;
        }

        if (!(addDataItem.relId && addDataItem.name)) {
            alertWarn('请选择药品。');
            return false;
        }

        if(addDataItem.planQuantity>medical.quantity){//库存不足情况
            addDataItem.handleFlag =false;//默认添加到订单
        }

        if (!$scope.formData.orderMedicalNos) {
          $scope.formData.orderMedicalNos = [];
        }

        // 根据医院采购目录模块的业务需求，如果tbodyList对象存在，则将它赋值给orderMedicalNos对象
        if ($scope.tbodyList) {
          for (i = 0; i < $scope.tbodyList.length; i++) {
            if (addDataItem.id === $scope.tbodyList[i].relId) {
              alertWarn('此药械已添加到列表');
              return;
            }
          }
        }

        // 如果已添加
        if ($scope.formData.orderMedicalNos.length !== 0) {
          var _len = $scope.formData.orderMedicalNos.length;
          for (i=0; i<_len; i++) {
            if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
              alertWarn('此药械已添加到列表');
              return false;
            }
          }
        }
        addDataItem.stockBatchs=[];
        //添加到列表
        $scope.formData.orderMedicalNos.push(addDataItem);

        // 根据医院采购目录模块的业务需求，将用户添加的药品放入tbodyList对象中
        if ($scope.tbodyList) {
          $scope.tbodyList.push(addDataItem);
        }

        //计算价格
        $scope.formData.totalPrice += addDataItem.strike_price *

        addDataItem.planQuantity;
        return true;
      };
    }

    //品种管理模块
    function medicalStockCtrl ($scope, watchFormChange, requestData, utils, alertError, alertWarn) {

      $scope.$watch('initFlag', function (newVal) {
        var operationFlowSetMessage=[];
        var operationFlowSetKey=[];
        if ($scope.showData) {
          // 选择出当前状态相同的驳回理由，并放入一个数组中
          if ($scope.showData.operationFlowSet) {
            for (var i=0; i<$scope.showData.operationFlowSet.length; i++) {
              if ($scope.showData.operationFlowSet[i].status==$scope.showData.businessApplication.businessStatus ) {
                operationFlowSetMessage.push($scope.showData.operationFlowSet[i].message);
                operationFlowSetKey.push($scope.showData.operationFlowSet[i].key);
              }
            }
          }
        //  选择当前状态最近的一个驳回理由用于显示
         $scope.showData.operationFlowSet.message=operationFlowSetMessage[operationFlowSetMessage.length-1];
         $scope.showData.operationFlowSet.key=operationFlowSetKey[operationFlowSetKey.length-1];
         return;
        }
         if (newVal && $scope.formData.orderMedicalNos) {
          for (j=0; j<$scope.formData.orderMedicalNos.length; j++) {
            if ($scope.formData.orderMedicalNos[j].handleFlag) {
              $scope.choisedMedicals = true;
            }
            if (!$scope.formData.orderMedicalNos[j].handleFlag) {
              $scope.isChoiseAll = false;
            }
          }
          // $scope.isChoiseAll = true;
         }
         // 编辑页面，如果证书编号是有值得情况下，不允许被修改
         if ($scope.formData) {
           for(var tr in $scope.formData.attachments){
             // 首先把Jason对象转化成数组，然后再把每条的证书编号字段取出来，如果有值，则把idAdmin字段设为false，相反设为true。该字段控制是否可以对证书编号进行编辑
             var attachments=[];
             attachments.push($scope.formData.attachments[tr]);
             if(attachments[0].certificateNumber){
               console.log(attachments[0].certificateNumber);
               attachments[0].isAdmin=false;
             }else{
                 attachments[0].isAdmin=true;
             }
           }
         }
       });
      $scope.watchFormChange = function(watchName){
        watchFormChange(watchName,$scope);
      };

      $scope.submitForm = function(fromId, type) {
         $scope.submitForm_type = type;

         if ($scope.submitForm_type == 'submit-medical') {

           requestData('rest/authen/medicalStock/save', $scope.formData, 'POST', 'parameterBody')
           .then(function (results) {
             if (results[1].code === 200) {
             }
           })
           .catch(function (error) {

           });
          $scope.formData.validFlag = false;
          $scope.goTo('#/medicalStock/get.html?id='+$scope.formData.id);

         }
        $('#' + fromId).trigger('submit');
      };
      $scope.submitFormAfter = function (_url) {
        if ($scope.submitForm_type === 'submit') {
          $scope.goTo(_url + '?id=' + $scope.formData.id);
        }
      };

      //判断当前审核意见是否可见
      $scope.showAuditOpinion = function (returnArr, pipeKey) {
        if (angular.isArray(returnArr)) {
          var i, len;
          len = returnArr.length;
          for (i = 0; i < len; i++) {
            if (returnArr[i].event.status !== pipeKey) {
              return true;
            }
          }
          return false;
        }
      };

      //医院采购目录医院添加单条药品信息
      $scope.addMedicinalDataItem = function (hospitalId) {

        // $scope.responseBody = {};

        // if (id) {
        //   $scope.responseBody.hospitalPurchaseContentsId = id;
        // }

            if (!$scope.medical||!$scope.medical.id) {
                alertWarn("请选择药械");
                return;

            }

          var formData = $.extend(true,{},$scope.medical);

          //处理药品内信息id和copyId，以区分新建和编辑
          formData.hospitalId = hospitalId;
          formData.relId = $scope.medical.id;
          formData.id = null;
          formData.medical.isBasicMedicine='是';
          formData.purchasePrice = formData.price;

        requestData('rest/authen/medicalStock/save', formData, 'POST', 'parameterBody')
        .then(function (results) {
          if (results[1].code === 200) {
            // utils.goTo('#/hospitalPurchaseContents/get.html?id='+hospitalId);
            $scope.$broadcast('reloadList');
          } else {
            alertError('出错!');
          }
        })
        .catch(function (error) {
           alertError('此药械已添加');
        });
      };

      // 首营品种新建页面用户输入零售价大于牌价的提示
      $scope.chkQuoteAndRetail = function () {
        if ($scope.formData.firstMedical.quoteprice) {
          $scope.$watch($scope.formData.firstMedical.retailPrice, function () {
            if (parseInt($scope.formData.firstMedical.retailPrice) > parseInt($scope.formData.firstMedical.quoteprice)) {
              alertWarn('当前输入的零售价大于输入的牌价!');
            }
          });
        }
      };

      //医院采购目录增加采购目录有效期设置
      $scope.$watch('listParams.guaranteePeriod', function (newVal) {
        if (newVal === undefined) {
          return;
        }

        $scope.showData.guaranteePeriod = newVal;

        requestData('rest/authen/customerAddress/save', $scope.showData, 'POST', 'parameter-body')

        .then(function (results) {
          // console.log(results);
        })
        .catch(function (error) {
          if (error) {
            alertError(error || '出错');
          }
        });
      });

      // 监视用户是否更改是否基药选项，如果更改为非基药，将非基药价格重置为0
      $scope.$watch('formData.firstMedical.isBasicMedicine', function (newVal) {
        if (newVal === '否') {
          $scope.formData.firstMedical.quoteprice = 0;
        }
      });
      // 全选与全不选
      $scope.isChoiseAll = function (choiseStatus) {
        if (choiseStatus) {
          angular.forEach($scope.orderMedicalNos, function (item, index) {
            if (!item.handleFlag) {
              item.handleFlag = true;
            }
          });
        } else {
          angular.forEach($scope.orderMedicalNos, function (item, index) {
            if (item.handleFlag) {
              item.handleFlag = false;
            }
          });
        }
      };
      $scope.handleChoiseAllEvent = function () {
           var _dataSource = $scope.formData.orderMedicalNos;

           if (!$scope.choisedMedicalList) {
             $scope.choisedMedicalList = [];
           }

           if ($scope.isChoiseAll) {
             angular.forEach(_dataSource, function (data, index) {
               data.handleFlag = true;
               $scope.choisedMedicalList.push(data);
             });
           } else  {
             angular.forEach(_dataSource, function (data, index) {
               data.handleFlag = false;
               $scope.choisedMedicalList = [];
             });
           }
         };
      $scope.flashAddDataCallbackFn = function(flashAddData) {

        if(!flashAddData||!flashAddData.data||!flashAddData.data.data){
          alertWarn("请选择药品");
          return ;
        }

        var medical=flashAddData.data.data;
        var addDataItem = $.extend(true,{},medical);

        addDataItem.relId=medical.id;
        addDataItem.discountPrice='0';
        addDataItem.discountRate='100';
        // addDataItem.strike_price=addDataItem.price;
        addDataItem.id=null;

        if (!addDataItem.planQuantity) {
          addDataItem.planQuantity = flashAddData.quantity;
        }

        if (!(addDataItem.relId && addDataItem.name)) {
            alertWarn('请选择药品。');
            return false;
        }

        if(addDataItem.planQuantity>medical.quantity){//库存不足情况
            addDataItem.handleFlag =false;//默认添加到订单
        }

        if (!$scope.formData.orderMedicalNos) {
          $scope.formData.orderMedicalNos = [];
        }
        // 如果已添加
        if ($scope.formData.orderMedicalNos.length !== 0) {
          var _len = $scope.formData.orderMedicalNos.length;
          // console.log(_len);
          // 未使用forEach方法，因为IE不兼容
          for (var i=0; i<_len; i++) {
            if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
              alertWarn('此药械已添加到列表');
              return false;
            }
          }
        }
        addDataItem.stockBatchs=[];
        //添加到列表
        $scope.formData.orderMedicalNos.push(addDataItem);
        //计算价格
        $scope.formData.totalPrice += addDataItem.strike_price *

        addDataItem.planQuantity;
        return true;
      };
    }

    // 客户管理(医院管理，经销商/零售商管理)模块
    function customerAddressCtrl ($scope, watchFormChange, requestData, utils, alertError, alertWarn) {
      $scope.$watch('initFlag', function () {
          var operationFlowSetMessage=[];
          var operationFlowSetKey=[];
          if ($scope.showData) {
            // 选择出当前状态相同的驳回理由，并放入一个数组中
            if ($scope.showData.operationFlowSet) {
              for (var i=0; i<$scope.showData.operationFlowSet.length; i++) {
                if ($scope.showData.operationFlowSet[i].status==$scope.showData.businessApplication.businessStatus ) {
                  operationFlowSetMessage.push($scope.showData.operationFlowSet[i].message);
                  operationFlowSetKey.push($scope.showData.operationFlowSet[i].key);
                }
              }
            }
          //  选择当前状态最近的一个驳回理由用于显示
           $scope.showData.operationFlowSet.message=operationFlowSetMessage[operationFlowSetMessage.length-1];
           $scope.showData.operationFlowSet.key=operationFlowSetKey[operationFlowSetKey.length-1];
           return;
          }
          // 编辑页面，如果证书编号是有值得情况下，不允许被修改
          if ($scope.formData) {
            for(var tr in $scope.formData.attachments){
              // 首先把Jason对象转化成数组，然后再把每条的证书编号字段取出来，如果有值，则把idAdmin字段设为false，相反设为true。该字段控制是否可以对证书编号进行编辑
              var attachments=[];
              attachments.push($scope.formData.attachments[tr]);
              if(attachments[0].certificateNumber){
                console.log(attachments[0].certificateNumber);
                attachments[0].isAdmin=false;
              }else{
                  attachments[0].isAdmin=true;
              }
            }
          }
      });

      $scope.watchFormChange = function(watchName){
        watchFormChange(watchName,$scope);
      };

      $scope.submitForm = function(fromId, type) {
         $scope.submitForm_type = type;

         if ($scope.submitForm_type == 'submit-hospital') {
           requestData('rest/authen/customerAddress/save', $scope.formData, 'POST', 'parameterBody')
           .then(function (results) {
             if (results[1].code === 200) {
             }
           })
           .catch(function (error) {

           });
           $scope.formData.validFlag = false;
           $scope.goTo('#/hospitalManagement/get.html?id='+$scope.formData.id);
         }
         if ($scope.submitForm_type == 'submit-supplier') {
           requestData('rest/authen/customerAddress/save', $scope.formData, 'POST', 'parameterBody')
           .then(function (results) {
             if (results[1].code === 200) {
             }
           })
           .catch(function (error) {

           });
           $scope.formData.validFlag = false;
           $scope.goTo('#/supplier/get.html?id='+$scope.formData.id);
         }
         if ($scope.submitForm_type == 'submit-otherCustomer') {
           requestData('rest/authen/customerAddress/save', $scope.formData, 'POST', 'parameterBody')
           .then(function (results) {
             if (results[1].code === 200) {
             }
           })
           .catch(function (error) {

           });
           $scope.formData.validFlag = false;
           $scope.goTo('#/otherCustomerManagement/get.html?id='+$scope.formData.id);
         }
        $('#' + fromId).trigger('submit');
      };

      $scope.submitFormAfter = function (_url) {
        if ($scope.submitForm_type === 'submit') {
          $scope.goTo(_url + '?id=' + $scope.formData.id);
        }
      };
      $scope.choiceCommodityType=function(item){
        if(item.value){
          if($scope.formData.commodityType==null){
            $scope.formData.commodityType=[];
          }
        $scope.formData.commodityType.push(item.text);

        }
      }
      //判断当前审核意见是否可见
      $scope.showAuditOpinion = function (returnArr, pipeKey) {
        if (angular.isArray(returnArr)) {
          var i, len;
          len = returnArr.length;
          for (i = 0; i < len; i++) {
            if (returnArr[i].event.status !== pipeKey) {
              return true;
            }
          }
          return false;
        }
      };

      //医院采购目录医院添加单条药品信息
      $scope.addMedicinalDataItem = function (hospitalId) {

        // $scope.responseBody = {};

        // if (id) {
        //   $scope.responseBody.hospitalPurchaseContentsId = id;
        // }

            if (!$scope.medical||!$scope.medical.id) {
                alertWarn("请选择药械");
                return;

            }

          var formData = $.extend(true,{},$scope.medical);

          //处理药品内信息id和copyId，以区分新建和编辑
          formData.hospitalId = hospitalId;
          formData.relId = $scope.medical.id;
          formData.id = null;
          formData.purchasePrice = formData.price;

        requestData('rest/authen/customerAddress/save', formData, 'POST', 'parameterBody')
        .then(function (results) {
          if (results[1].code === 200) {
            // utils.goTo('#/hospitalPurchaseContents/get.html?id='+hospitalId);
            $scope.$broadcast('reloadList');
          } else {
            alertError('出错!');
          }
        })
        .catch(function (error) {
           alertError('此药械已添加');
        });
      };

      // 首营品种新建页面用户输入零售价大于牌价的提示
      $scope.chkQuoteAndRetail = function () {
        if ($scope.formData.firstMedical.quoteprice) {
          $scope.$watch($scope.formData.firstMedical.retailPrice, function () {
            if (parseInt($scope.formData.firstMedical.retailPrice) > parseInt($scope.formData.firstMedical.quoteprice)) {
              alertWarn('当前输入的零售价大于输入的牌价!');
            }
          });
        }
      };

      //医院采购目录增加采购目录有效期设置
      $scope.$watch('listParams.guaranteePeriod', function (newVal) {
        if (newVal === undefined) {
          return;
        }

        $scope.showData.guaranteePeriod = newVal;

        requestData('rest/authen/customerAddress/save', $scope.showData, 'POST', 'parameter-body')
        .then(function (results) {
          // console.log(results);
        })
        .catch(function (error) {
          if (error) {
            alertError(error || '出错');
          }
        });
      });

      // 监视用户是否更改是否基药选项，如果更改为非基药，将非基药价格重置为0
      $scope.$watch('formData.firstMedical.isBasicMedicine', function (newVal) {
        if (newVal === '否') {
          $scope.formData.firstMedical.quoteprice = 0;
        }
      });
      // 全选与全不选
      $scope.isChoiseAll = function (choiseStatus) {
        if (choiseStatus) {
          angular.forEach($scope.orderMedicalNos, function (item, index) {
            if (!item.handleFlag) {
              item.handleFlag = true;
            }
          });
        } else {
          angular.forEach($scope.orderMedicalNos, function (item, index) {
            if (item.handleFlag) {
              item.handleFlag = false;
            }
          });
        }
      };
      $scope.handleChoiseAllEvent = function () {
           var _dataSource = $scope.formData.orderMedicalNos;

           if (!$scope.choisedMedicalList) {
             $scope.choisedMedicalList = [];
           }

           if ($scope.isChoiseAll) {
             angular.forEach(_dataSource, function (data, index) {
               data.handleFlag = true;
               $scope.choisedMedicalList.push(data);
             });
           } else  {
             angular.forEach(_dataSource, function (data, index) {
               data.handleFlag = false;
               $scope.choisedMedicalList = [];
             });
           }
         };
      $scope.flashAddDataCallbackFn = function(flashAddData) {

        if(!flashAddData||!flashAddData.data||!flashAddData.data.data){
          alertWarn("请选择药品");
          return ;
        }

        var medical=flashAddData.data.data;
        var addDataItem = $.extend(true,{},medical);

        addDataItem.relId=medical.id;
        addDataItem.discountPrice='0';
        addDataItem.discountRate='100';
        // addDataItem.strike_price=addDataItem.price;
        addDataItem.id=null;

        if (!addDataItem.planQuantity) {
          addDataItem.planQuantity = flashAddData.quantity;
        }

        if (!(addDataItem.relId && addDataItem.name)) {
            alertWarn('请选择药品。');
            return false;
        }

        if(addDataItem.planQuantity>medical.quantity){//库存不足情况
            addDataItem.handleFlag =false;//默认添加到订单
        }

        if (!$scope.formData.orderMedicalNos) {
          $scope.formData.orderMedicalNos = [];
        }
        // 如果已添加
        if ($scope.formData.orderMedicalNos.length !== 0) {
          var _len = $scope.formData.orderMedicalNos.length;
          // console.log(_len);
          // 未使用forEach方法，因为IE不兼容
          for (var i=0; i<_len; i++) {
            if (addDataItem.relId === $scope.formData.orderMedicalNos[i].relId) {
              alertWarn('此药械已添加到列表');
              return false;
            }
          }
        }
        addDataItem.stockBatchs=[];
        //添加到列表
        $scope.formData.orderMedicalNos.push(addDataItem);
        //计算价格
        $scope.formData.totalPrice += addDataItem.strike_price *

        addDataItem.planQuantity;
        return true;
      };
    }

  /**
   * 编辑工作流
   */
  function editWorkFlowProcessCtrl ($scope, modal, alertWarn, requestData, alertOk, alertError, $rootScope) {
    // 切换button顺序
    $scope.switchButtons = function(buttons,ind,ind2) {
      var tmp=buttons[ind];
      buttons[ind]=buttons[ind2];
      buttons[ind2]=tmp;

    };

    // 保存节点信息（新建or创建）
    $scope.addEventButtons = function(formData1) {
      if(!formData1)formData1={};
      //if(!formData1.didateFilter)formData1.didateFilter={};
      if(!formData1.buttons)formData1.buttons=[];
      var btnForm = {
        type: '通过',
        buttonName: '审核通过',
        requestMethod: 'POST',
        conditionType:'通过',
        requestParam: 'KeyValue',
        requestUrl : 'rest/authen/workflowTask/run.json'
      };
      formData1.buttons.push(btnForm);
    };

      //当一个节点的name改变后，需要更新对应的关联关系。
      function updateEventRelations(events,oldId,newId){

         for(var i=0;i<events.length;i++){
           if(events[i].sourceRef==oldId){
             events[i].sourceRef=newId;
           }
           if(events[i].targetRef==oldId){
             events[i].targetRef=newId;
           }
         }
       }
    // 保存节点信息（新建or创建）
    $scope.saveEvent = function(event1) {
      if(!$scope.formData.events)$scope.formData.events=[];
      var events=$scope.formData.events;
      var isInsert=true;
      //防止'' 保存到后台,枚举报错bug.
      if(!event1.conditionType)event1.conditionType=null;
      if(event1.id){
          var ind=$rootScope.utils.getObjectIndexByKeyOfArr(events,'id',event1.id);
          if(event1.id!=event1.name){
              updateEventRelations(events,event1.id,event1.name);
          }
          event1.id=event1.name;
          if(ind>-1){
              events[ind]=event1;

              isInsert=false;
          }
      }

      if(isInsert){

            event1.id=event1.name;
           events.push(event1);
      }

      console.log(event1);

      modal.closeAll();
    };

    // 删除节点信息（新建or创建）
    $scope.deleteEvent = function(id) {
      if(!$scope.formData.events)$scope.formData.events=[];
        var events=$scope.formData.events;
      var index=$rootScope.utils.removeObjectByKeyOfArr(events,'id',id);
      if(index<0){
          alertError('没有该节点，id='+event1.id);
          return;
      }
      //删除关联关系
      updateEventRelations(events,id,null);

        modal.closeAll();
    };

  }

  /**
   * [报损报溢批次冻结解冻模块选择生产批号/灭菌批号后显示生产日期和失效日期]
   */

  /**
   * [getCurrentProductionDate 根据药品id和批号查询生产日期和失效日期]
   * @param  {[type]} relMedicalStockId [药品id]
   * @param  {[type]} p_and_s           [生产批号/灭菌批号]
   */
  function SalesOrderDetailsController ($scope, $timeout, alertOk, alertError, requestData) {

    // 监视price价格变化，重置折扣额和折扣率
    $scope.$watch('tr.strike_price', function (newVal, oldVal) {
      if (newVal !== oldVal) {
        $scope.tr.discountPrice = 0;   // 折扣额重置为0
        $scope.tr.discountRate = 100;  // 折扣率重置为100
      }
    });

    // $scope.$watch('tr.discountPrice', function (newVal) {
    //   if (isNaN(newVal)) {
    //     $scope.tr.discountPrice = '';
    //   }
    // });

    $scope.getCurrentProductionDate = function (relMedicalStockId,p_and_s) {

      if (relMedicalStockId && p_and_s) {
        var url='rest/authen/medicalStock/getStockBatch?relMedicalStockId='+relMedicalStockId+'&p_and_s='+p_and_s;
        var data= {};
        requestData(url,data,'get')
          .then(function (results) {
            var _data = results[1];
          // 根据药品id和批号查询到的生产日期和失效日期赋给对应字段以供页面显示
          $scope.tr.productionDate =_data.data.productionDate;
          $scope.tr.validTill =_data.data.validTill;
          })
          .catch(function (error) {
            alertError(error || '出错');
          });
      }
    };
  }

  /**
   * [deleteUploaderController 删除上传的附件]
   */
  function deleteUploaderController($scope, $timeout, alertOk, alertError, requestData){
    $scope.deleteUploader = function (_key) {
      if (_key) {
        var url='rest/authen/fileUpload/delete';
        var data= {key:_key};
        requestData(url,data,'post')
          .then(function (results) {

          })
          .catch(function (error) {
            alertError(error || '出错');
          });

      }
    };
  }

  /**
   * [ScreenFinanceApprovalController 财务审批模块中queyr页面获取当前财务审批人]
   * @param {[type]} $scope [description]
   */
  function ScreenFinanceApprovalController ($scope) {
    if ($scope.tr.operationFlowSet) {
      // 获取当前订单状态
      // var _status = $scope.tr.orderStatus;
      // 查找流程数组里符合当前订单状态的
      angular.forEach($scope.tr.operationFlowSet, function (item, index) {
        if(item.status === '待付款') {
          $scope.tr.approvalPayUser = item;
        }
      });
    }
  }
  /**
  /**
   * 销售退货
   */
  function returnOrderEditCtrl($scope, modal, alertWarn, watchFormChange, requestData, $rootScope,alertOk,utils) {

    //如果是新建，没有id下，将后端返回的returnQuantity字段值赋值给quantity
    // if (!$scope.formData) {
    //   angular.forEach($scope.formData.orderMedicalNos, function (item, index) {
    //     item.quantity = item.returnQuantity;
    //   });
    // }
    $scope.watchFormChange=function(watchName){
      watchFormChange(watchName,$scope);

    };

    modal.closeAll();
    // $scope.formData={};
    $scope.addDataItem = {};

    // 保存  type:save-草稿,submit-提交订单。
    $scope.submitFormAfter = function(formData) {

      $scope.formData.validFlag = false;

      if ($scope.submitForm_type == 'exit') {
        $scope.goTo('#/saleReturnOrder/query.html');
        alertOk(scopeResponse.msg);
        return;
      }

      if ($scope.submitForm_type == 'submit') {

        var url='rest/authen/saleReturnOrder/startProcessInstance';
        var data= {businessKey:$scope.formData.id};

        requestData(url, data, 'POST')
          .then(function (results) {
            if (results[1].code !== 200) {
              alertWarn(results[1].msg || '未知错误!');
            } else {
              $scope.goTo('#/saleReturnOrder/get.html?id='+$scope.formData.id);
            }
          })
          .catch(function (error) {
            if (error) {
              alertWarn(error || '未知错误!');
              return;
            }
          });


          return;
      }

      if ($scope.submitForm_type == 'save') {

      }
    };

    // 能否提交验证 type:save-草稿,submit-提交订单。
    $scope.canSubmitForm = function() {
      //必须有1条是勾选加入订单的。
      var arr=$scope.formData.orderMedicalNos;
      for(var i=0;i<arr.length;i++){
         if(arr[i].handleFlag){
           return true;
         }
      }

      return false;

    };

    // 保存 type:save-草稿,submit-提交订单。
    $scope.submitForm = function(fromId, type) {

      $scope.submitForm_type = type;
      if ($scope.submitForm_type == 'submit') {
        $scope.formData.validFlag = true;
      }
      $('#' + fromId).trigger('submit');

    };

    // 取消订单
    $scope.cancelForm = function(fromId, url) {
      alertWarn('cancelForm');
    };

    // 添加选择项到编辑页
    // $scope.handleAddDataArray = function (addDataObj_id,choisedMedicalList,addDataObj) {
    //
    //
    //   if(!addDataObj_id){//发货单id不能为空
    //     return ;
    //   }
    //   if(!choisedMedicalList || choisedMedicalList.length===0){//至少选择1条数据
    //     return ;
    //   }
    //
    //
    //
    //
    //           //销退单、采退单：销售部门、业务人员、业务类型、 销售类型 应该选择发货单和来货通知单后就带出来
    //           $scope.formData.salesDepartmentId=addDataObj.salesDepartmentId;
    //           $scope.formData.salesDepartmentName=addDataObj.salesDepartmentName;
    //           $scope.formData.salesType=addDataObj.salesType;
    //           $scope.formData.orderBusinessType=addDataObj.orderBusinessType;
    //           $scope.formData.saleUser=addDataObj.saleUser;
    //
    //   //切换发货单时，清空原有数据
    //   if($scope.formData.relId!=addDataObj_id){
    //     $scope.formData.orderMedicalNos=[];
    //
    //
    //   }else{
    //     //否则删除没选中,再添加选中的
    //     for(var i=$scope.formData.orderMedicalNos.length-1;i>=0;i--){
    //       var data=$scope.formData.orderMedicalNos[i];
    //       if(utils.getObjectIndexByKeyOfArr(choisedMedicalList,"relId",data.relId)==-1){
    //           $scope.formData.orderMedicalNos.splice(i,1);
    //       }
    //     }
    //   }
    //   //重新绑定数据
    //   $scope.formData.relId = addDataObj_id;
    //
    //   //清空原有数据，重新绑定到主页面
    //   $scope.formData.orderMedicalNos=[];
    //   angular.forEach(choisedMedicalList, function (data, index) {
    //     data.quantity = data.returnQuantity;    // 将可退数量赋值给显示的数量
    //     $scope.formData.orderMedicalNos.push(data);
    //   });
    //
    //   //已经添加过的不在添加。（保留已经修改的数据）
    //   // angular.forEach(choisedMedicalList, function (data, index) {
    //   //   if ($scope.formData.orderMedicalNos.length !== 0) {
    //   //     if(utils.getObjectIndexByKeyOfArr($scope.formData.orderMedicalNos,"relId",data.relId)==-1){
    //   //       $scope.formData.orderMedicalNos.push(data);
    //   //     }
    //   //   } else {
    //   //     $scope.formData.orderMedicalNos.push(data);
    //   //   }
    //   // });
    //
    //
    //   // $scope.formData.orderMedicalNos = angular.copy(choisedMedicalList);
    //     modal.closeAll();
    //
    //
    // };

  }

  // 采购退货单
  function purchasereturnOrderEditCtrl($scope, modal, alertWarn, watchFormChange, requestData, $rootScope,alertOk,utils) {

    $scope.watchFormChange=function(watchName){
      watchFormChange(watchName,$scope);

    };

    modal.closeAll();
    $scope.addDataItem = {};

    // 保存  type:save-草稿,submit-提交订单。
    $scope.submitFormAfter = function(scopeResponse) {

      $scope.formData.validFlag = false;

      if ($scope.submitForm_type == 'exit') {
        $scope.goTo('#/purchaseReturnOrder/query.html');
        alertOk(scopeResponse.msg);
        return;
      }

      if ($scope.submitForm_type == 'submit') {

        var url='rest/authen/purchaseReturnOrder/startProcessInstance';
        var data= {businessKey:$scope.formData.id};
          console.log($scope.formData);

        requestData(url, data, 'POST')
          .then(function (results) {
            if (results[1].code !== 200) {
              alertWarn(results[1].msg || '未知错误!');
            } else {
              $scope.goTo('#/purchaseReturnOrder/get.html?id='+$scope.formData.id);
            }
          })
          .catch(function (error) {
            if (error) {
              alertWarn(error || '未知错误!');
              return;
            }
          });

        return;
      }

      if ($scope.submitForm_type == 'save') {
        if (scopeResponse) {
          alertOk(scopeResponse.msg);
        }
      }
    };

    // 能否提交验证 type:save-草稿,submit-提交订单。
    $scope.canSubmitForm = function() {
      //必须有1条是勾选加入订单的。
      var arr=$scope.formData.orderMedicalNos;
      for(var i=0;i<arr.length;i++){
         if(arr[i].handleFlag){
           return true;
         }
      }

      return false;

    };

    // 保存 type:save-草稿,submit-提交订单。
    $scope.submitForm = function(fromId, type) {
      $scope.submitForm_type = type;
      if ($scope.submitForm_type == 'submit') {
        $scope.formData.validFlag = true;
      }
      $('#' + fromId).trigger('submit');

      // addDataItem_opt.submitUrl='';
      // $scope.formData.orderMedicalNos.push($scope.addDataItem);
      // $scope.addDataItem={};
    };

    // 取消订单
    $scope.cancelForm = function(fromId, url) {
      alertWarn('cancelForm');
    };

    // 添加选择项到编辑页
    // $scope.handleAddDataArray = function (addDataObj_id,choisedMedicalList,addDataObj) {
    //   if(!addDataObj_id){//发货单id不能为空
    //     return ;
    //   }
    //   if(!choisedMedicalList||choisedMedicalList.length===0){//至少选择1条数据
    //     return ;
    //   }
    //
    //
    //           //销退单、采退单：销售部门、业务人员、业务类型、 销售类型 应该选择发货单和来货通知单后就带出来
    //           $scope.formData.salesDepartmentId=addDataObj.salesDepartmentId;
    //           $scope.formData.salesDepartmentName=addDataObj.salesDepartmentName;
    //           $scope.formData.salesType=addDataObj.salesType;
    //           $scope.formData.orderBusinessType=addDataObj.orderBusinessType;
    //           $scope.formData.saleUser=addDataObj.saleUser;
    //
    //   //切换发货单时，清空原有数据
    //   if($scope.formData.relId!=addDataObj_id){
    //     $scope.formData.orderMedicalNos=[];
    //
    //
    //   }else{
    //     //否则删除没选中,再添加选中的
    //     for(var i=$scope.formData.orderMedicalNos.length-1;i>=0;i--){
    //       var data=$scope.formData.orderMedicalNos[i];
    //       if(utils.getObjectIndexByKeyOfArr(choisedMedicalList,"relId",data.relId)==-1){
    //           $scope.formData.orderMedicalNos.splice(i,1);
    //       }
    //     }
    //   }
    //   //重新绑定数据
    //   $scope.formData.relId = addDataObj_id;
    //   //已经添加过的不在添加。（保留已经修改的数据）
    //     angular.forEach(choisedMedicalList, function (data, index) {
    //       if(utils.getObjectIndexByKeyOfArr($scope.formData.orderMedicalNos,"relId",data.relId)==-1){
    //           $scope.formData.orderMedicalNos.push(data);
    //       }
    //
    //     });
    //   // $scope.formData.orderMedicalNos = angular.copy(choisedMedicalList);
    //     modal.closeAll();
    // };

  }

  /**
   * [returnOrderAddController 销售退货单弹出模态框添加项目控制器]
   * @param  {[type]} $scope [description]
   * @return {[type]}        [description]
   */
  function returnOrderAddController ($scope, $rootScope, modal, utils, requestData, alertError) {

    $scope.addDataObj={};
    $scope.hasReturnList = false;

    // 监控用户选择的返货单，发生变化后立即检查当前单据中是否有可退的商品
    $scope.$watch('addDataObj.orderMedicalNos', function (newVal) {
      if (newVal) {
        $scope.hasReturnList = false;
        angular.forEach(newVal, function (item, index, array) {
          if (item.returnQuantity !== 0) {
            $scope.hasReturnList = true;
          }
        });
      }
    });

    //1.初始化选择状态。
    //addDataObj_orderMedicalNos:发货单细表，saleReturnOrder_orderMedicalNos 销售退货单细表
    $scope.initChoisedMedicalList=function(addDataObj_orderMedicalNos,saleReturnOrder_orderMedicalNos){
        var choisedMedicalList = [], _initFlag = 0;

        if (!addDataObj_orderMedicalNos) {
          return choisedMedicalList;
        }

        //如果销售退货细表中有该条目则选中
        angular.forEach(addDataObj_orderMedicalNos, function (data, index) {
          if (saleReturnOrder_orderMedicalNos) {
            for (var i = 0; i < saleReturnOrder_orderMedicalNos.length; i++) {
              if (data.relId === saleReturnOrder_orderMedicalNos[i].relId &&
                  data.productionBatch === saleReturnOrder_orderMedicalNos[i].productionBatch &&
                  data.sterilizationBatchNumber === saleReturnOrder_orderMedicalNos[i].sterilizationBatchNumber) {
                    data.itemSelected = true;
                    choisedMedicalList.push(data);
                    _initFlag++;
                  }
            }
          }

          if (!data.itemSelected) {
            $scope.isChoiseAll = false;
          }

          // if(utils.getObjectIndexByKeyOfArr(saleReturnOrder_orderMedicalNos,"relId",data.relId)>-1){
          //   data.itemSelected = true;
          //   choisedMedicalList.push(data);
          // }
          //
          // if (!data.itemSelected) {
          //   $scope.isChoiseAll = false;
          // }
        });

        if (_initFlag === addDataObj_orderMedicalNos.length) {
          $scope.isChoiseAll = true;
        }

        return choisedMedicalList;
    };

    // 单个药品点击添加与取消添加事件处理
    $scope.handleItemClickEvent = function (item) {

      var _dataSource = $scope.addDataObj.orderMedicalNos;

      if (!$scope.choisedMedicalList) {
        $scope.choisedMedicalList = [];
      }

      if (item.itemSelected) {
        $scope.choisedMedicalList.push(item);
        if ($scope.choisedMedicalList.length === _dataSource.length) {
          $scope.isChoiseAll = true;
        }
      } else {
        angular.forEach($scope.choisedMedicalList, function (data, index) {
          if (data.relId === item.relId && data.productionBatch === item.productionBatch && data.sterilizationBatchNumber === item.sterilizationBatchNumber) {
            $scope.choisedMedicalList.splice(index, 1);
          }
        });
        $scope.isChoiseAll = false;
      }

    };

    // 全选与全不选
    $scope.handleChoiseAllEvent = function () {

      $scope.choisedMedicalList = [];

      var _dataSource = $scope.addDataObj.orderMedicalNos;

      if (!$scope.choisedMedicalList) {
        $scope.choisedMedicalList = [];
      }

      if ($scope.isChoiseAll) {
        angular.forEach(_dataSource, function (data, index) {
          data.itemSelected = true;
          if (data.returnQuantity !== 0) {
            $scope.choisedMedicalList.push(data);
          }
        });
      } else  {
        angular.forEach(_dataSource, function (data, index) {
          data.itemSelected = false;
          $scope.choisedMedicalList = [];
        });
      }

    };

    // 采购退货单模块根据设计变更重写hanleAddDataArray方法,需将选中的数据及id发送到后端进行拆分后将返回数据加载到主页面
    $scope.handleAddData = function (addDataObj_id, addDataObj_orderNo,choisedMedicalList,addDataObj) {

      // 发货单id不能为空,至少选择1条数据
      if (!addDataObj_id || !addDataObj_orderNo || !choisedMedicalList || choisedMedicalList.length === 0) {
        return ;
      }


      //销退单、采退单：销售部门、业务人员、业务类型、 销售类型 应该选择发货单和来货通知单后就带出来
      $scope.formData.salesDepartmentId=addDataObj.salesDepartmentId;
      $scope.formData.salesDepartmentName=addDataObj.salesDepartmentName;
      $scope.formData.purchaseType=addDataObj.purchaseType;
      $scope.formData.orderBusinessType=addDataObj.orderBusinessType;
      $scope.formData.saleUser=addDataObj.saleUser;

      // 清空原有数据
      $scope.formData.relId = addDataObj_id;
      $scope.formData.orderMedicalNos = [];

      // 初始化
      var _data = {
        'arrivalNoticeOrderNo': '',
        'orderMedicalNoSet': []
      };

      _data.arrivalNoticeOrderNo = addDataObj_orderNo;
      angular.forEach(choisedMedicalList, function (data, index) {
        _data.orderMedicalNoSet.push(data);
      });

      var _url = 'rest/authen/purchaseReturnOrder/splitOrderMedicalNos';
      requestData(_url, _data, 'POST', 'parameter-body')
      .then(function (results) {

        var _resultData = results[1].data;

        angular.forEach(_resultData, function (data, index) {
          $scope.formData.orderMedicalNos.push(data);
        });

        modal.closeAll();

      })
      .catch(function (error) {
        if (error) {
          alertError(error || '出错');
        }
      });
    };

    // // 销售退货单模块点击添加要退货的药品列表功能
    $scope.handleAddDataArray = function (addDataObj_id, choisedMedicalList,addDataObj) {

      // 发货单id不能为空,至少选择1条数据
      if (!addDataObj_id || !choisedMedicalList || choisedMedicalList.length === 0) {
        return ;
      }

      // 首次添加数据
      if (!$scope.formData.orderMedicalNos.length) {
        $scope.formData.relId = addDataObj_id;
        $scope.formData.orderMedicalNos = choisedMedicalList;
      } else {    // 修改数据
        $scope.formData.orderMedicalNos = [];     // 清空原有数据
        $scope.formData.orderMedicalNos = choisedMedicalList;
        // $scope.formData.orderMedicalNos = angular.copy(choisedMedicalList);   // 重新添加数据
      }


      //销退单、采退单：销售部门、业务人员、业务类型、 销售类型 应该选择发货单和来货通知单后就带出来
      $scope.formData.salesDepartmentId=addDataObj.salesDepartmentId;
      $scope.formData.salesDepartmentName=addDataObj.salesDepartmentName;
      $scope.formData.salesType=addDataObj.salesType;
      $scope.formData.orderBusinessType=addDataObj.orderBusinessType;
      $scope.formData.saleUser=addDataObj.saleUser;

      //切换发货单时，清空原有数据
      if($scope.formData.relId!=addDataObj_id){
        $scope.formData.orderMedicalNos=[];



      }else{
        //否则删除没选中,再添加选中的
        for(var i=$scope.formData.orderMedicalNos.length-1;i>=0;i--){
          var data=$scope.formData.orderMedicalNos[i];
          if(utils.getObjectIndexByKeyOfArr(choisedMedicalList,"relId",data.relId)==-1){
              $scope.formData.orderMedicalNos.splice(i,1);
          }
        }
      }

      //重新绑定数据
      // $scope.formData.relId = addDataObj_id;
      // //已经添加过的不在添加。（保留已经修改的数据）
      //   angular.forEach(choisedMedicalList, function (data, index) {
      //     if(utils.getObjectIndexByKeyOfArr($scope.formData.orderMedicalNos,"relId",data.relId)==-1){
      //         $scope.formData.orderMedicalNos.push(data);
      //     }
      //
      //   });
      // $scope.formData.orderMedicalNos = angular.copy(choisedMedicalList);

      modal.closeAll();
    };
  }

  /**
   * [saleReturnMedicalItemController 新建销退单药品列表tr控制器]
   * @param  {[type]} $scope [description]
   * @return {[type]}        [description]
   */
  function saleReturnMedicalItemController ($scope) {

    // 错误状态标识
    $scope.quantityError = false;

    // 监视值变化
    $scope.$watch('item.quantity', function (newVal) {
        if ($scope.item.returnQuantity >= 0) {
          if (newVal > $scope.item.returnQuantity) {
            $scope.quantityError = true;
            $scope.$parent.$parent.quantityError = true;
          } else {
            $scope.quantityError = false;
            $scope.$parent.$parent.quantityError = false;
          }
        }
    });
  }

  /**
   * [saleOutstockOrderController 销售出库单控制器]
   * @param  {[type]} $scope [description]
   * @return {[type]}        [description]
   */
  function saleOutstockOrderController ($scope, requestData, utils) {
    // 添加物流信息
    $scope.saveExpressInfo = function (params) {
      var _data = angular.isObject(params) ? params : '';
      var saveUrl = 'rest/authen/wOutstockOrder/kuaidi/save';
      if (_data) {
        requestData(saveUrl, _data, 'POST')
        .then(function (results) {
          if (results[1].code === 200) {
            utils.goOrRefreshHref();
          }
        })
        .catch(function (error) {
          console.log(error || '出错');
        });
      }
    };

    // 编辑物流信息
    $scope.editThisAreaInfo = function (item) {
      $scope.addAreaisShow = true;
      $scope.formData.type = item.type;
      $scope.formData.nu = item.nu;
      $scope.formData.id = item.id;
    };
  }

  /**
   * [getAllExpressController 获取当前单据的所有物流信息]
   * @param  {[type]} $scope [description]
   * @return {[type]}        [description]
   */
  function getAllExpressController ($scope, requestData) {

    var _kuaidiSet = $scope.dialogData.kuaidiSet;
    var _url = 'rest/index/kuaidi/query2.json';
    $scope.expressInfoArray = [];

    angular.forEach(_kuaidiSet, function (data, index) {
      requestData(_url + '?type=' + data.type + '&nu=' + data.nu, {}, 'get')
      .then(function (results) {
        // console.log(results[1]);
        var _tmpObj = results[1];
        _tmpObj.index = index;
        _tmpObj.type = data.type;
        _tmpObj.nu = data.nu;
        $scope.expressInfoArray.push(_tmpObj);
      });
    });
  }

  /**
   * [indexPageController 首页控制器]
   * @param  {[type]} $socpe [description]
   * @return {[type]}        [description]
   */
  function indexPageController ($socpe, utils) {
    // 首页采购部分低库存报警区块发起采购方法

  }

  /**
   * [indexPurchaseSuppleController 首页采购辅助信息处理欲发起采购的动作]
   * @param  {[type]} $scope [注入项]
   * @param  {[type]} utils  [注入项]
   * @return {[type]}        [description]
   */
  function indexPurchaseSuppleController ($scope, utils) {

    $scope.relMedicalStockIdSet = '';

    // 全选与全不选
    $scope.handleChoiseAllEvent = function (data) {
      if ($scope.isChoiseAll && angular.isArray(data)) {
        angular.forEach(data, function (item, index) {
          item.handleFlag = true;
          if (!$scope.relMedicalStockIdSet) {
            $scope.relMedicalStockIdSet += item.id;
          } else {
            $scope.relMedicalStockIdSet += ',' + item.id;
          }
        });
      } else {
        angular.forEach(data, function (item, index) {
          item.handleFlag = false;
          $scope.relMedicalStockIdSet = '';
        });
      }
    };

    // 单选
    $scope.handleItemClickEvent = function (obj,dataList) {
      if (obj.handleFlag) {
        //获取当前点击选项的厂家id
        var _supplierId = obj.supplierId;
        //遍历列表判断那些药品跟当前点击选中的药品列不是一个厂家的
        angular.forEach(dataList, function (item, index) {
          if (item.supplierId !== _supplierId) {
            item.isCloseChiose = true;
          }
        });

        if (!$scope.relMedicalStockIdSet) {
          $scope.relMedicalStockIdSet += obj.id;
        } else {
          $scope.relMedicalStockIdSet += ',' + obj.id;
        }
      } else {
        var _tmp = $scope.relMedicalStockIdSet.split(',');

        angular.forEach(_tmp, function (data, index) {
          if (data === obj.id) {
            _tmp.splice(index, 1);
            return false;
          }
        });

        $scope.relMedicalStockIdSet = _tmp.toString();

        if (!$scope.relMedicalStockIdSet) {
          angular.forEach(dataList, function (item, index) {
            item.isCloseChiose = false;
          });
        }
      }
    };

  }

  /**
   * [historicalPriceController 历史价格查询及操作控制器]
   * @param  {[type]} $scope [注入项]
   * @param  {[type]} utils  [注入项]
   * @return {[type]}        [description]
   */
  function historicalPriceController ($scope, utils) {
    // 用户选择价格
    $scope.choiseThisItem = function (obj,id) {
      // 直接将用户选择的历史价格赋值给表单价格
      if ($scope.formData.orderMedicalNos) {
        angular.forEach($scope.formData.orderMedicalNos, function (item, index) {
          if (item.relId === id) {
            item.strike_price = obj.value;
           }
        });
      }
    };
  }

  /**
   * [editStockbatchNumberCtrl 销售单涉及到多仓库的批号数量选择及操作控制器]
   * @param  {[type]} $scope [注入项]
   * @param  {[type]} utils  [注入项]
   * @return {[type]}        [description]
   */
  function editStockbatchNumberCtrl ($scope, utils, requestData) {

    // 监控listparams对象中属性的更改，刷新结果列表
    $scope.$watchCollection('listParams', function (newVal, oldVal) {
      if ($scope.listParams) {

        if ($scope.dialogData.sourceId) {
          $scope.listParams.warehouseId = $scope.dialogData.sourceId;
        }

        var _url = 'rest/authen/medicalStock/queryStockBatch',
            _data = {
              relMedicalStockId: $scope.dialogData.id,
              logisticsCenterId: $scope.dialogData.logisticsCenterId,
              warehouseId: $scope.listParams.warehouseId,
              createAtBeg: $scope.listParams.createAtBeg,
              createAtEnd: $scope.listParams.createAtEnd,
              q: $scope.listParams.q,
              warehouseType: '正常库'
            };

        requestData(_url, _data, 'GET')
        .then(function (results) {
          if (results[1].data) { $scope.stockBatchList = results[1].data; }
        });
      }
    });

    // 获取用户已选择的药品批次，并将批次id存入数组
    $scope.getChoisedBatchsId = function (choisedBatchList) {
      if (choisedBatchList) {
        $scope.choisedBatchsIdList = [];
        angular.forEach(choisedBatchList, function (data, index) {
          if (data.stockBatchId) {
            $scope.choisedBatchsIdList.push(data.stockBatchId);
          }
        });
      }
    };

    // 用户选择生产批号
    $scope.choseBatch = function (obj,choisedList,id) {

      // 构建临时对象存储批号id、批号名和数量
      var _tmp = {
        stockBatchId: obj.id,                     // 批次号id
        batchNumber: obj.productionBatch,
        quantity: obj.stockModel.salesQuantity,    // 可选数量
        productionBatch: obj.productionBatch,     // 批号名
        validTill:obj.validTill,
        productionDate:obj.productionDate,
        sterilizationBatchNumber: obj.sterilizationBatchNumber,    // 灭菌批号
        warehouseName: obj.warehouseName,       // 仓库名
        warehouseId: obj.warehouseId,        // 仓库名id
        warehouseType: obj.warehouseType     // 仓库类型
      };

      // 初始化已添加的批次数量和
      var _total = 0;

      // 计算当前药品的批次数量和
      if (choisedList) {
        angular.forEach(choisedList, function (data, index) {
          if (data.batchNumber) {
            _total += parseInt(data.quantity, 10);
          }
        });
      }

      // if ($scope.formData.orderMedicalNos) {
      //   angular.forEach($scope.formData.orderMedicalNos, function (data, index) {
      //     if (data.stockBatchs) {
      //       for (var i = 0; i < data.stockBatchs.length; i++) {
      //         if (data.stockBatchs[i].batchNumber)
      //         { _total += parseInt(data.stockBatchs[i].quantity, 10);
      //         }
      //       }
      //     }
      //   });
      // }

      // 如果当前批次数量大于或等于计划采购数量
      if ((obj.stockModel.salesQuantity + _total) > $scope.dialogData.planQuantity) {
        // 将计划采购数量赋值给临时对象
        _tmp.quantity = $scope.dialogData.planQuantity - _total;
      }

      // 根据药品id将批次存入当前药品formData数据中
      if ($scope.formData.orderMedicalNos) {
        angular.forEach($scope.formData.orderMedicalNos, function (data, index) {
          if (data.relId == id) {
            $scope.formData.orderMedicalNos[index].stockBatchs.push(_tmp);
          }
        });
      }

      // 将当前批次的灭菌批号和仓库名传递到列表


    };
  }
  /**
   * [inoutstockDetailQueryCtr 库存报表 > 出入库明细 控制器]
   * @param  {[type]} $scope [description]
   * @return {[type]}        [description]
   */
  function inoutstockDetailQueryCtr ($scope,utils) {
    //表格条目点击跳转方法，根据类型不同跳转页面不同
    $scope.queryItemClick=function(tr){
      var    url="#/otherOutstockOrder/get.html?orderNo=";
      switch (tr.type)
        {
        case "采购入库单":
          url="#/purchaseInstockOrder/get.html?orderNo=";
          break;
        case "采购入库单_红字":
           url="#/purchaseInstockOrder/get.html?orderNo=";
           break;
        case "销售出库单":
          url="#/saleOutstockOrder/get.html?orderNo=";
          break;
        case "销售出库单_红字":
            url="#/saleOutstockOrder/get.html?orderNo=";
            break;

        default :
          {
           if(tr.inoutType){
             if(tr.inoutType=='出库'){
                 url="#/otherOutstockOrder/get.html?orderNo=";
             }else{
                  url="#/otherInstockOrder/get.html?orderNo=";
             }
           }else{//兼容inoutType==null。根据type包含字符判断。不够准确。
             if(tr.type.indexOf('出')>-1){
                 url="#/otherOutstockOrder/get.html?orderNo=";
             }else{
                  url="#/otherInstockOrder/get.html?orderNo=";
             }
           }
          }//default

        }//end switch
        url+=tr.orderNo;


        utils.goTo(url);
        return url;
      };//getUrlByQueryOfType
    }//inoutstockDetailQueryCtr

  /**
   * [infrastructureController manage模块wms实例管理]
   * @return {[type]} [description]
   */
  function infrastructureController ($scope) {

    $scope.buildMapping = function (objName, keyName, valName) {

      if ($scope.formData[keyName] && $scope.formData[valName]) {
        if ($scope.formData[objName]) {
          // 检查key
          var _keys = Object.keys($scope.formData[objName]);
          if (_keys.indexOf($scope.formData[keyName]) != -1) {
            alert('选择的属性已存在'); return;
          }

          // 检查value
          for (var i in $scope.formData[objName]) {
            if ($scope.formData[objName][i] == $scope.formData[valName]) {
              alert('选择的值已存在'); return;
            }
          }
        }

        $scope.formData[objName][$scope.formData[keyName]] = $scope.formData[valName];

        if ($scope.formData[objName]) {
          $scope.formData[keyName] = '';
          $scope.formData[valName] = '';
        }
      }
    };

    // 初始化扩展属性
    $scope.initExtendedAttribute = function (extendedAttrObj) {

      if (angular.isObject(extendedAttrObj)) {
        $scope.extendedAttrList = [];
        for (var i in extendedAttrObj) {
          var _tmp = {name:i, val:extendedAttrObj[i]};
          $scope.extendedAttrList.push(_tmp);
        }

        // console.log($scope.extendedAttrList);
      }
    };

    // 扩展属性选择后操作
    $scope.handleChoiseEvent = function (extendedAttrList, key) {
      angular.forEach(extendedAttrList, function (item, index) {
        if (key == item.name) { $scope.formData.extendedAttributeValue = item.val; }
      });
    };

    // 保存扩展属性更改
    $scope.saveExtendedAttribute = function () {
      // console.log($scope.formData.extendedAttributeValue);
      for (var i in $scope.formData.extendedAttribute) {
        // console.log(i+' => '+$scope.formData.extendedAttributeKey.name);
        if (i == $scope.formData.extendedAttributeKey.name) {
          $scope.formData.extendedAttribute[i] = $scope.formData.extendedAttributeValue;
        }
      }
      // console.log($scope.formData);
    };
  }

  angular.module('manageApp.project')
  .controller('infrastructureController', ['$scope', infrastructureController])
  .controller('inoutstockDetailQueryCtr', ['$scope','utils', inoutstockDetailQueryCtr])
  .controller('historicalPriceController', ['$scope', 'utils', historicalPriceController])
  .controller('editStockbatchNumberCtrl', ['$scope', 'utils', 'requestData', editStockbatchNumberCtrl])
  .controller('indexPurchaseSuppleController', ['$scope', 'utils', indexPurchaseSuppleController])
  .controller('indexPageController', ['$scope', 'utils', indexPageController])
  .controller('getAllExpressController', ['$scope', 'requestData', getAllExpressController])
  .controller('saleOutstockOrderController', ['$scope', 'requestData', 'utils', saleOutstockOrderController])
  .controller('imTaobaoCtr', ['$scope',"requestData",'alertError',"$rootScope", imTaobaoCtr])
  .controller('saleReturnMedicalItemController', ['$scope', saleReturnMedicalItemController])
  .controller('returnOrderAddController', ["$scope", "$rootScope", "modal","utils", "requestData", "alertError", returnOrderAddController])
  .controller('mainCtrlProject',  ["$scope","$rootScope","$http", "$location", "store","utils","modal","OPrinter","UICustomTable","bottomButtonList","saleOrderUtils","purchaseOrderUtils","requestPurchaseOrderUtils","queryItemCardButtonList","customMenuUtils", mainCtrlProject])
  .controller('ScreenFinanceApprovalController', ['$scope', ScreenFinanceApprovalController])
  .controller('ConfirmOrderMedicalController', ['$scope', ConfirmOrderMedicalController])
  .controller('confirmOrderEditCtrl', ['$scope', 'modal', 'alertWarn', 'requestData', 'alertOk', 'alertError', 'dialogConfirm', confirmOrderEditCtrl])
  .controller('confirmOrderEditCtrl2', ['$scope', 'modal', 'alertWarn', 'requestData', 'alertOk', 'alertError', 'watchFormChange', 'saleOrderUtils', confirmOrderEditCtrl2])
  .controller('SalesOrderDetailsController', ['$scope', '$timeout', 'alertOk', 'alertError', 'requestData', SalesOrderDetailsController])
  .controller('editWorkFlowProcessCtrl', ['$scope', 'modal', 'alertWarn', 'requestData', 'alertOk', 'alertError', '$rootScope', editWorkFlowProcessCtrl])
  .controller('QualificationApplyCtrl', ['$scope', 'watchFormChange', 'requestData', 'utils','alertError','alertWarn', QualificationApplyCtrl])
  .controller('SelectedCommodityEditCtrl', ['$scope', 'watchFormChange', 'requestData', 'utils','alertError','alertWarn', SelectedCommodityEditCtrl])
  .controller('hospitalPurchaseContentsCtrl', ['$scope', 'watchFormChange', 'requestData', 'utils','alertError','alertWarn', '$timeout', hospitalPurchaseContentsCtrl])
  .controller('medicalStockCtrl', ['$scope', 'watchFormChange', 'requestData', 'utils','alertError','alertWarn', medicalStockCtrl])
  .controller('customerAddressCtrl', ['$scope', 'watchFormChange', 'requestData', 'utils','alertError','alertWarn', customerAddressCtrl])
  .controller('watchFormCtrl', ['$scope','watchFormChange', watchFormCtrl])
  .controller('intervalCtrl', ['$scope', 'modal','alertWarn','requestData','alertOk','alertError','$rootScope','$interval', intervalCtrl])
  .controller('auditUserApplyOrganizationCtrl', ['$scope', 'modal','alertWarn','requestData','alertOk','alertError','$rootScope','proLoading', auditUserApplyOrganizationCtrl])
  .controller('purchaseOrderEditCtrl', ['$scope', 'modal','alertWarn','alertError','requestData','watchFormChange', 'dialogConfirm', purchaseOrderEditCtrl])
  .controller('allocateOrderEditCtrl', ['$scope', 'modal','alertWarn','alertError','requestData','watchFormChange', allocateOrderEditCtrl])
  .controller('arrivalNoticeOrderEditCtrl', ['$scope', 'modal','alertWarn','alertError','requestData','watchFormChange', arrivalNoticeOrderEditCtrl])
  .controller('requestPurchaseOrderEditCtrl', ['$scope', 'modal','alertWarn','alertError','requestData','watchFormChange', '$timeout', requestPurchaseOrderEditCtrl])
  .controller('noticeCtrl', ['$scope', 'modal','alertWarn','requestData','alertOk','alertError','$rootScope','$interval', noticeCtrl])
  .controller('invoicesOrderCtrl', ['$scope', 'modal','alertWarn','requestData','alertOk','alertError', '$timeout', invoicesOrderCtrl])
  .controller('salesOrderEditCtrl2', ['$scope', 'modal','alertWarn','watchFormChange', 'requestData', salesOrderEditCtrl2])
  .controller('salesOrderEditCtrl', ['$scope', 'modal','alertWarn','watchFormChange', salesOrderEditCtrl])
  .controller('freezeThawOrderEditCtrl', ['$scope', 'modal','alertWarn','watchFormChange', freezeThawOrderEditCtrl])
  .controller('lossOverOrderEditCtrl', ['$scope', 'modal','alertWarn','watchFormChange', lossOverOrderEditCtrl])
  .controller('returnOrderEditCtrl', ['$scope', 'modal','alertWarn','watchFormChange', 'requestData', '$rootScope','alertOk','utils', returnOrderEditCtrl])
  .controller('purchasereturnOrderEditCtrl', ['$scope', 'modal','alertWarn','watchFormChange', 'requestData', '$rootScope','alertOk','utils', purchasereturnOrderEditCtrl])
  .controller('deleteUploaderController', ['$scope', '$timeout', 'alertOk', 'alertError', 'requestData', deleteUploaderController]);
});

/**
 * 项目自定义指令
 */
define('project/directives', ['project/init'], function () {

  /**
    json编辑器

  */
  function textareaJson(utils,alertError) {
    return {
      restrict: 'EA',
      scope: {
          ngModel: "="
      },
      templateUrl:  Config.tplPath +'tpl/project/textareaJson.html',
      link: function ($scope, element, $attrs) {

        $scope.jsonFromNgModel= function () {
          try{

            $scope.jsonString=JSON.stringify(  $scope.ngModel, null, "\t");

          }catch(e){
                console.log(e);
                $scope.jsonString=utils.toJson($scope.ngModel);

          }

        };

          $scope.jsonToNgModel= function (str) {
            try{

                utils.replaceObject($scope.ngModel, $.parseJSON(str));
                $scope.jsonString="";
            }catch(e){
              console.log(e);
              alertError("转换错误："+e.message);
            }

          };
      }
    };
  }



    /**
      html-edit编辑器

      <html-edit ng-model="htmlString"  div-id="divId"></html-edit>
    */

    function htmlEdit() {
      return {
        restrict: 'EA',
        scope: {
              ngModel: "=",
              openButtonId:"@?",//绑定开启弹出编辑模式按钮。
              divId: "@"
        },
        templateUrl:  Config.tplPath +'tpl/project/htmlEdit.html',
        link: function ($scope, element, $attrs) {

          $scope.htmlFromDivId= function () {
            $scope._htmlString=$("#"+$scope.divId).html();

          };

          //绑定开启弹出编辑模式按钮。
          if($scope.openButtonId){
            $('#'+$scope.openButtonId).on('click', function (e) {
              $scope.htmlFromDivId();
              $scope.$digest();
            });
          }

          $scope.cancel= function () {
              $scope._htmlString='';
              $scope.ngModel=    $scope._htmlString;


          };
            $scope.htmlToNgModel= function () {

              $scope._htmlString=$scope.umeditor.getContent();
              console.log("$scope._htmlString",$scope._htmlString);
                $scope.ngModel=    $scope._htmlString;
                $scope._htmlString='';

            };
        }
      };
    }

  /**
    附件文件显示
    attachmentsExtend={"edit":true}
    edit：是否可编辑
  */
  function attachmentsItemShow() {
    return {
      restrict: 'EA',
      scope: {
          attachmentsItemExtend:"=",
          ngModel: "="
      },
      replace: true,
      templateUrl:  Config.tplPath +'tpl/project/attachmentsItemShow.html'
    };
  }
  /**
    附件列表-只读显示
    attachmentsExtend={"title":"审核资料"}
    title：显示标题
  */
  function attachmentsShow() {
    return {
      restrict: 'EA',
      scope: {
          attachmentsExtend:"=",
          ngModel: "="
      },
      replace: true,
      templateUrl:  Config.tplPath +'tpl/project/attachmentsShow.html'
    };
  }
  /**
    附件列表-编辑
    attachmentsExtend={"title":"审核资料","usege":"首营企业申请","addFlag":true}
    title：显示标题
    usege：上传附件用途说明
    addFlag：是否允许添加额外附件
  */
  function attachmentsEdit() {
    return {
      restrict: 'EA',
      scope: {
          attachmentsExtend:"=",
          ngModel: "="
      },
      replace: true,
      templateUrl:  Config.tplPath +'tpl/project/attachmentsEdit.html'
    };
  }

/**
  药械订单列表
*/
function orderMedicals() {
  return {
    restrict: 'EA',
    scope: {
        ngModel: "="
    },
    replace: true,
    templateUrl:  Config.tplPath +'tpl/project/orderMedicalNos.html'
  };
}
/**
  药械订单列表-采购
*/
function orderMedicalsPurchase() {
  return {
    restrict: 'EA',
    scope: {
        ngModel: "="
    },
    replace: true,
    templateUrl:  Config.tplPath +'tpl/project/orderMedicalNosOfPurchaseOrder.html'
  };
}

/**
  药械订单列表-采购
*/
function workflowRejectButton(utils) {
  return {
    restrict: 'EA',
    scope: true,
    replace: true,
    templateUrl:  Config.tplPath +'tpl/project/workflowRejectButton.html',

          link: function ($scope, element, $attrs) {
            if ($attrs.customMenu) {
                $scope.customMenu=utils.fromJson($attrs.customMenu);

            }
          }
  };
}


/**
  工作流-通过菜单
*/
function workflowPassButton(utils) {
  return {
    restrict: 'EA',
    // scope: true,
    scope: {
        beforeAjaxParams: "=?",
        beforeIfEval:"=?"
    },
    replace: true,
    templateUrl:  Config.tplPath +'tpl/project/workflowPassButton.html',

      link: function ($scope, element, $attrs) {
        if ($attrs.customMenu) {
            $scope.customMenu=utils.fromJson($attrs.customMenu);

        }

      //  $scope.passCallback='$root.utils.goOrRefreshHref(customMenu.callBackUrl)';
        //
        if ($attrs.passCallback) {
            $scope.passCallback=$attrs.passCallback;

        }
        if ($attrs.beforeAjaxParameterBody) {
            $scope.beforeAjaxParameterBody=$attrs.beforeAjaxParameterBody;

        }

        if ($attrs.beforeAjaxUrlSubmit) {
            $scope.beforeAjaxUrlSubmit=$attrs.beforeAjaxUrlSubmit;

        }
      }
  };
}


/**
  工作流-通过菜单
*/
function workflowButtonQueryCard(utils) {
  return {
    restrict: 'EA',
    // scope: true,
    scope: {
        beforeAjaxParams: "=?",
        beforeIfEval:"=?"
    },
    replace: true,
    templateUrl:  Config.tplPath +'tpl/project/workflowButtonQueryCard.html',

      link: function ($scope, element, $attrs) {
        if ($attrs.customMenu) {
            $scope.customMenu=utils.fromJson($attrs.customMenu);
        }
        if ($attrs.passCallback) {
            $scope.passCallback=$attrs.passCallback;

        }
        if ($attrs.beforeAjaxParameterBody) {
            $scope.beforeAjaxParameterBody=$attrs.beforeAjaxParameterBody;

        }

        if ($attrs.beforeAjaxUrlSubmit) {
            $scope.beforeAjaxUrlSubmit=$attrs.beforeAjaxUrlSubmit;

        }

      }
  };
}

/**
  工作流菜单列表
*/
function customMenuList(utils) {
  return {
    restrict: 'EA',
    scope: {
        beforeAjaxParams: "=?",
        beforeIfEval:"=?"
    },
    // replace: true,
      // scope: true,
    templateUrl:  Config.tplPath +'tpl/project/customMenuList.html',

      link: function ($scope, element, $attrs) {

        if ($attrs.customMenuArr) {
            $scope.customMenuArr= utils.fromJson($attrs.customMenuArr);

        }else{
              $scope.customMenuArr=$attrs.customMenuArr;
        }

        if ($attrs.passCallback) {
            $scope.passCallback=$attrs.passCallback;

        }
        if ($attrs.beforeAjaxUrlSubmit) {
            $scope.beforeAjaxUrlSubmit=$attrs.beforeAjaxUrlSubmit;

        }
        // if ($attrs.beforeAjaxParams) {
        //     $scope.beforeAjaxParams=$attrs.beforeAjaxParams;
        //
        // }
        // console.log(  $scope.customMenuArr);

      }
  };
}



/**
  药械订单列表-采购
*/
function workflowTaskRunWithAttchments(utils) {
  return {
    restrict: 'EA',
    // scope: {
    //     ngModel: "="
    // },
    // replace: true,
      scope: {
        workflowBottomButton:"=?"
      },
    templateUrl:  Config.tplPath +'tpl/project/workflowTaskRunWithAttchments.html',

      link: function ($scope, element, $attrs) {

        if ($attrs.customMenuArr) {
            $scope.customMenuArr=utils.fromJson($attrs.customMenuArr);

        }else{
              $scope.customMenuArr=$attrs.customMenuArr;
        }

        //返回按钮
        if ($attrs.returnButton) {
            $scope.returnButton= utils.fromJson($attrs.returnButton);
        }
        //附件上传用途
          $scope.attchmentUsege=$attrs.attchmentUsege;

          $scope.passButton=utils.getcustomMenuByKeyOfArr($scope.customMenuArr,'通过');
          $scope.rejectButton=utils.getcustomMenuByKeyOfArr($scope.customMenuArr,'驳回');

          //按钮名字优先去passButton
              $scope.showButton=$scope.passButton||$scope.rejectButton;
              if($scope.showButton)
                  $scope.formData=  $scope.showButton.params;
                  if(!  $scope.formData)  $scope.formData={};
                $scope.formData.attachments=[];

              $scope.scopeExtend={};
              console.log(  $scope.customMenuArr);

      }
  };
}


/**
 * [滚动条美化]
 */
function niceScroll () {
  'use strict';
  return {
    restrict: 'A',
    link: function ($scope, element, $attrs) {
      require(['nicescroll'], function () {
        // 主页面右侧滚动条
        $('html').niceScroll({styler:"fb", cursorcolor:"#65cea7", cursorwidth: '6', cursorborderradius: '0px',
          background: '#424f63', spacebarenabled:false, cursorborder: '0', zindex: '1000'
        });
        // 侧边栏滚动条
        $("#page-side").niceScroll({styler:"fb", cursorcolor:"#65cea7", cursorwidth: '3', cursorborderradius: '0px',
          background: '#424f63', spacebarenabled:false, cursorborder: '0'
        });
        //
        // $('.data-table').niceScroll({styler:"fb", cursorcolor:"#65cea7", cursorwidth: '6', cursorborderradius: '0px',
        //   background: '#424f63', spacebarenabled:false, cursorborder: '0', zindex: '1'
        // });
        // 如果侧边栏被收起
        $("#page-side").getNiceScroll();
        if ($('body').hasClass('left-side-collapsed')) {
            $("#page-side").getNiceScroll().hide();
        }
      });
    }
  };
}
/**
 * [左边栏子菜单点击事件]
 */
function leftMenuChange ($location) {
  'use strict';
  return {
    restrict: 'A',
    link: function ($scope, element, $attrs) {
      //获取当前Url模块名
      var _moduleName = $location.path().split('/')[1];

      if ($attrs.leftMenuChange) {
        if ($attrs.leftMenuChange === _moduleName) {
          changeStyle(element);
        }
      }

      element.on('click', function (e) {
        e.stopPropagation();  // 阻止事件冒泡
        changeStyle(element);
      });

      function changeStyle (ele) {
        var _this = $(ele);
        _this.addClass('active').parent().siblings().each(function () {
          $(this).children().removeClass('active');
        });
      }
    }
  };
}
/**
 *  左边栏一级菜单伸缩
 */
function leftMenuToggle ($location) {
  'use strict';
  return {
    restrict: 'A',
    link: function (scope, element, attrs) {
      //保持状态
      if ($(element).next('.sub-menu-list').length === 0) {   //没有下拉子菜单
        if ($location.absUrl().indexOf(attrs.href) !== -1) {
          $(element).parent().addClass('active').siblings().each(function () {
            $(this).removeClass('active');
          });
        }
      }

      // 一级子菜单点击事件效果
      $(element).on('click', function (event) {
        //阻止冒泡
        if (event && event.stopPropagation) {
          event.stopPropagation();
        }

        var _parent = $(this).parent(); //当前绑定点击事件的父元素

        if ($(this).next('.sub-menu-list').length !== 0) {
          //如果有二级菜单
          var _secondMenuList = $(this).next('.sub-menu-list');
          if (!_secondMenuList.is(':visible')) {  //收起状态
            _secondMenuList.slideDown(200, function () {
              // ...
              _parent.siblings().each(function () {
                // if ($(this).hasClass('active')) {
                //   $(this).removeClass('active');
                // }
                if ($(this).children('.sub-menu-list').is(':visible')) {
                  $(this).children('.sub-menu-list').hide(200).prev().find('span.pr-arrow-up').removeClass('pr-arrow-up').addClass('pr-arrow-down');
                }
              });
              // 右侧箭头指示改变
              $(this).prev().find('span.pr-arrow-down').removeClass('pr-arrow-down').addClass('pr-arrow-up');
            });
          } else {
            _secondMenuList.slideUp(200, function () {
              // 这里是一级菜单收起后的回调函数...
              $(this).prev().find('span.pr-arrow-up').removeClass('pr-arrow-up').addClass('pr-arrow-down');
            });
          }
        } else {
          //如果没有二级菜单
          _parent.addClass('active').siblings().each(function () {
            $(this).removeClass('active').find('.sub-menu-list > li').each(function () {
              $(this).removeClass('active');
            });
            if ($(this).children('.sub-menu-list').is(':visible')) {
              $(this).children('.sub-menu-list').hide(200);
            }
          });
        }
      });
    }
  };
}
/**
 * 订单列表首页订单状态按钮切换样式
 */
function orderStatusChoise () {
  'use strict';
  return {
    restrict: 'A',
    link: function ($scope, element, $attrs) {
      element.on('click', function () {
        $(this).addClass('pr-btn-bg-gold').siblings().each(function () {
          $(this).removeClass('pr-btn-bg-gold');
        });
        $(this).parent().siblings().each(function () {
          $(this).children().each(function () {
            $(this).removeClass('pr-btn-bg-gold');
          });
        });
      });
    }
  };
}


/**
  药械订单列表-采购
*/
function queryOrderStatusButton() {
  return {
    restrict: 'EA',
    scope: {
        ngModel:"=",
        countMap: "="
    },
      require: 'ngModel',
    replace: true,
    templateUrl:  Config.tplPath +'tpl/project/queryOrderStatusButton.html',
    link: function ($scope, element, $attrs,ngModel) {
      $scope.key=$attrs.key;
      $scope.showName=$scope.key;
      if($attrs.showName){
        $scope.showName=$attrs.showName;
      }
      element.on('click', function () {
        $(this).addClass('pr-btn-bg-gold').siblings().each(function () {
          $(this).removeClass('pr-btn-bg-gold');
        });
        $(this).parent().siblings().each(function () {
          $(this).children().each(function () {
            $(this).removeClass('pr-btn-bg-gold');
          });
        });
      });
    }
  };
}

/**
 *  订单页头导航按钮点击事件处理
 */
function orderListTips () {
  'use strict';
  return {
    restrict: 'A',
    link: function ($scope, element, $attrs) {
      element.on('click', function () {
        $(this).hide();
        $(this).siblings().show().on('click',function () {
          $(this).hide();
          $(element).show();
        });
      });
    }
  };
}
/**
 * 点击展开隐藏左边栏
 */
function toggleLeftMenu () {
  'use strict';
  return {
    restrict: 'A',
    link: function ($scope, element, $attrs) {
      $('.toggle-btn').on('click', function () {
        $(".left-side").getNiceScroll().hide();

        if ($('body').hasClass('left-side-collapsed')) {
            $(".left-side").getNiceScroll().hide();
        }

        var body = $('body');
        var bodyposition = body.css('position');

        if (bodyposition != 'relative') {
          if (!body.hasClass('left-side-collapsed')) {
             body.addClass('left-side-collapsed');
             $('.custom-nav ul').attr('style','');
             $(this).addClass('menu-collapsed');
          } else {
             body.removeClass('left-side-collapsed chat-view');
             $('.custom-nav li.active ul').css({display: 'block'});
             $(this).removeClass('menu-collapsed');
          }
        } else {
          if (body.hasClass('left-side-show')) {
            body.removeClass('left-side-show');
          } else {
            body.addClass('left-side-show');
            mainContentHeightAdjust();
          }
        }
      });
    }
  };
}
/**
 * 面板点击收起、展开与关闭
 */
function togglePanel () {
  'use strict';
  return {
    restrict: 'A',
    link: function ($scope, element, $attrs) {
      $(element).on('click', function (e) {
        e.stopPropagation();

        if (!$(this).hasClass('fa-times')) {    //展开与收起
          var el = $(this).parents(".panel").children(".panel-body");
          if ($(this).hasClass("fa-chevron-up")) {
            $(this).removeClass("fa-chevron-up").addClass("fa-chevron-down");
            el.slideUp(200);
          } else {
            $(this).removeClass("fa-chevron-down").addClass("fa-chevron-up");
            el.slideDown(200);
          }
        } else {                                //关闭
          $(this).parents(".panel").parent().remove();
        }
      });
    }
  };
}
/**
 *  morris图表展示
 */
function morris () {
  'use strict';
  return {
    restrict: 'A',
    link: function ($scope, element, $attrs) {
      require(['morris'], function () {
        //定义参数
        var _id = $attrs.id;
        //构建data参数
        var _data = [];
        if (angular.isDefined($attrs.datavalue) && angular.isDefined($attrs.datalabel) && angular.isDefined($attrs.dataformatted)) {
          var _tempObj = {}, i = 0;
          var _value = $attrs.datavalue.split(','),
              _label = $attrs.datalabel.split(','),
              _formatted = $attrs.dataformatted.split(',');
          while (i < _value.length) {
            _tempObj.value = _value[i];
            _tempObj.label = _label[i];
            _tempObj.formatted = _formatted[i];
            _data.push(_tempObj);
            _tempObj = {};
            i++;
          }
        }
        //构建backgroundColor参数,布尔值
        var _backgroundColor = angular.isDefined($attrs.backgroundColor) ? $attrs.backgroundColor : false;
        //构建labelColor参数，字符串十六进制
        var _labelColor = angular.isDefined($attrs.labelColor) ? $attrs.labelColor : '#666';
        //构建区块颜色参数，数组
        var _colors = angular.isDefined($attrs.colors) ? $attrs.colors.split(',') : ['#ff5f39','#fe9302','#e39a27'];

        //初始化
        Morris.Donut({
          element: _id,
          data: _data,
          backgroundColor: _backgroundColor,
          labelColor: _labelColor,
          colors: _colors,
          formatter: function (x, data) { return data.formatted; }
        });
      });
    }
  };
}
/**
 *  iCheck
 */
function icheck () {
  'use strict';
  return {
    restrict: 'A',
    link: function ($scope, element, $attrs) {
      require(['icheck'], function () {

        $(element).children().iCheck({
          checkboxClass: 'icheckbox_square',
          radioClass: 'iradio_square',
          increaseArea: '20%'
        });


        // // 获取元素样式字符
        // var _currenStyleStr = $attrs.class,
        //     i = 0,
        //     _styleNameArr = ['minimal',
        //                      'minimal-red',
        //                      'minimal-green',
        //                      'minimal-blue',
        //                      'minimal-yellow',
        //                      'minimal-purple',
        //                      'square',
        //                      'square-red',
        //                      'square-green',
        //                      'square-blue',
        //                      'square-yellow',
        //                      'square-purple',
        //                      'flat-red',
        //                      'flat-grey',
        //                      'flat-green',
        //                      'flat-blue',
        //                      'flat-yellow',
        //                      'flat-purple'],
        //     _len = _styleNameArr.length;
        //
        // for (i; i < _len; i++) {
        //   if (_currenStyleStr.split(' ')[0] === _styleNameArr[i]) {
        //     run_iCheck(_styleNameArr[i]);
        //     break;
        //   }
        // }
        //
        // function run_iCheck (cName) {
        //   switch (cName) {
        //     case 'minimal': $('.minimal input').iCheck({checkboxClass: 'icheckbox_minimal', radioClass: 'iradio_minimal', increaseArea: '20%'}); break;
        //     case 'minimal-red': $('.minimal-red input').iCheck({checkboxClass: 'icheckbox_minimal-red', radioClass: 'iradio_minimal-red', increaseArea: '20%'}); break;
        //     case 'minimal-green': $('.minimal-green input').iCheck({checkboxClass: 'icheckbox_minimal-green', radioClass: 'iradio_minimal-green', increaseArea: '20%'}); break;
        //     case 'minimal-blue': $('.minimal-blue input').iCheck({checkboxClass: 'icheckbox_minimal-blue', radioClass: 'iradio_minimal-blue', increaseArea: '20%'}); break;
        //     case 'minimal-yellow': $('.minimal-yellow input').iCheck({checkboxClass: 'icheckbox_minimal-yellow', radioClass: 'iradio_minimal-yellow', increaseArea: '20%'}); break;
        //     case 'minimal-purple': $('.minimal-purple input').iCheck({checkboxClass: 'icheckbox_minimal-purple', radioClass: 'iradio_minimal-purple', increaseArea: '20%'}); break;
        //     case 'square': $('.square input').iCheck({checkboxClass: 'icheckbox_square', radioClass: 'iradio_square', increaseArea: '20%'}); break;
        //     case 'square-red': $('.square-red input').iCheck({checkboxClass: 'icheckbox_square-red', radioClass: 'iradio_square-red', increaseArea: '20%'}); break;
        //     case 'square-green': $('.square-green input').iCheck({checkboxClass: 'icheckbox_square-green', radioClass: 'iradio_square-green', increaseArea: '20%'}); break;
        //     case 'square-blue': $('.square-blue input').iCheck({checkboxClass: 'icheckbox_square-blue', radioClass: 'iradio_square-blue', increaseArea: '20%'}); break;
        //     case 'square-yellow': $('.square-yellow input').iCheck({checkboxClass: 'icheckbox_square-yellow', radioClass: 'iradio_square-yellow', increaseArea: '20%'}); break;
        //     case 'square-purple': $('.square-purple input').iCheck({checkboxClass: 'icheckbox_square-purple', radioClass: 'iradio_square-purple', increaseArea: '20%'}); break;
        //     case 'flat-red': $('.flat-red input').iCheck({checkboxClass: 'icheckbox_flat-red', radioClass: 'iradio_flat-red'}); break;
        //     case 'flat-grey': $('.flat-grey input').iCheck({checkboxClass: 'icheckbox_flat-grey', radioClass: 'iradio_flat-grey'}); break;
        //     case 'flat-green': $('.flat-green input').iCheck({checkboxClass: 'icheckbox_flat-green', radioClass: 'iradio_flat-green'}); break;
        //     case 'flat-blue': $('.flat-blue input').iCheck({checkboxClass: 'icheckbox_flat-blue', radioClass: 'iradio_flat-blue'}); break;
        //     case 'flat-yellow': $('.flat-yellow input').iCheck({checkboxClass: 'icheckbox_flat-yellow', radioClass: 'iradio_flat-yellow'}); break;
        //     case 'flat-purple': $('.flat-purple input').iCheck({checkboxClass: 'icheckbox_flat-purple', radioClass: 'iradio_flat-purple'}); break;
        //   }
        // }
      });
    }
  };
}
/**
 *  sparkline 柱状图
 */
function sparkline () {
  'use strict';
  return {
    restrict: 'A',
    link: function ($scope, element, $attrs) {
      require(['sparkline'], function () {
        $(".sparkline").each(function(){
            var $data = $(this).data();

            $data.valueSpots = {'0:': $data.spotColor};

            $(this).sparkline( $data.data || "html", $data,
                {
                    tooltipFormat: '<span style="display:block; padding:0px 10px 12px 0px;">' +
                        '<span style="color: {{color}}">&#9679;</span> {{offset:names}} ({{percent.1}}%)</span>'
                });
        });
        $("#income").sparkline([5,6,7,5,9,6,4,9,8,5,6,7], {
            type: 'bar',
            height: '35',
            barWidth: 5,
            barSpacing: 2,
            barColor: '#fc8675'
        });

        $("#expense").sparkline([3,2,5,8,4,7,5,8,4,6], {
            type: 'bar',
            height: '35',
            barWidth: 5,
            barSpacing: 2,
            barColor: '#65cea7'
        });


        $("#expense2").sparkline([3,2,5,8,4,7,5,8,4,6], {
            type: 'bar',
            height: '35',
            barWidth: 5,
            barSpacing: 2,
            barColor: '#65cea7'
        });

        $("#pro-refund").sparkline([3,2,5,8,4,7,5,8,4,6], {
            type: 'bar',
            height: '35',
            barWidth: 5,
            barSpacing: 2,
            barColor: '#ffffff'
        });

        $("#p-lead-1").sparkline([7,5,9,6,4,9,8,5,6,7], {
            type: 'bar',
            height: '35',
            barWidth: 5,
            barSpacing: 2,
            barColor: '#65cea7'
        });

        $("#p-lead-2").sparkline([3,2,5,8,4,7,5,8,4,6], {
            type: 'bar',
            height: '35',
            barWidth: 5,
            barSpacing: 2,
            barColor: '#fc8675'
        });

        $("#p-lead-3").sparkline([3,2,5,8,4,7,5,8,4,6], {
            type: 'bar',
            height: '35',
            barWidth: 5,
            barSpacing: 2,
            barColor: '#5ab5de'
        });


        $("#visit-1").sparkline([5,6,7,9,9,5,3,2,4,6,7,5,6,8,7,9,5 ], {
            type: 'line',
            width: '100',
            height: '25',
            lineColor: '#55accc',
            fillColor: '#edf7f9'
        });

        $("#visit-2").sparkline([5,6,7,7,9,5,8,5,4,6,7,8,6,8,7,9,5 ], {
            type: 'line',
            width: '100',
            height: '25',
            lineColor: '#55accc',
            fillColor: '#edf7f9'
        });
      });
    }
  };
}
/**
 *  tooltips
 */
function runTooltips () {
  'use strcit';
  return {
    restrict: 'A',
    link: function (scope, element, attrs) {
        $("[data-toggle='tooltip']").tooltip();
    }
  };
}
/**
 *	popover
 */
function runPopovers ($timeout) {
  'use strict';
  return {
    restrict: 'A',
    link: function (scope, element, attrs) {
      //获取当前元素的下一个兄弟元素
      var _modal = $(element).next();
      //..
      $(element).hover(function() {
        _modal.show();
      }, function() {
        _modal.hide();
      });
      //...
      _modal.hover(function() {
        $(this).show();
      }, function() {
        $(this).hide();
      });
    }
  };
}
/**
 * 带确认对话框的按钮点击事件
 */
function handleThisClick ($window, dialogConfirm, requestData, alertOk, alertError,utils) {
  'use strict';
  return {
    restrict: 'A',
    link: function ($scope, element, $attrs) {

      element.on('click', function () {
        //对话框标题
        var _dialogTitle = angular.isDefined($attrs.dialogTitle) ? $attrs.dialogTitle : '询问对话框';
        //对话框内容
        var _dialogContent = angular.isDefined($attrs.dialogContent) ? $attrs.dialogContent : '';
        //对话框引用的模板
        var _dialogTemplate = angular.isDefined($attrs.dialogTemplate) ? $attrs.dialogTemplate : 'tpl/dialog-confirm.html';
        //如果需要跳转地址
        var _jumpUrl = angular.isDefined($attrs.jumpUrl) ? $attrs.jumpUrl : '';
        //如果发送请求的地址
        var _requestUrl = angular.isDefined($attrs.requestUrl) ? $attrs.requestUrl : '';
        //按钮名称
        var _confirmBtnTxt = angular.isDefined($attrs.confirmBtnTxt) ? $attrs.confirmBtnTxt : '确定';
        var _cancelBtnTxt = angular.isDefined($attrs.cancelBtnTxt) ? $attrs.cancelBtnTxt : '取消';

        if(_dialogTemplate=="pr-dialog-return.html"){//编辑页面，取消操作
          if( !angular.isDefined($attrs.dialogTitle)) _dialogTitle = '取消修改?';
          if( !angular.isDefined($attrs.dialogContent)) _dialogContent = '有修改还未保存,是否保存?';
        }



        //回调方法
        function callback(){

          //指定作用域
          if($attrs.callbackScopeKey){
              var appointScope=  utils.getAppointScope($scope,$attrs.callbackScopeKey);
              if(appointScope!==null){
                if ($attrs.callback) {
                    appointScope.$eval($attrs.callback);
                }
                if ($attrs.callBack) {
                    appointScope.$eval($attrs.callBack);
                }

              }

          }

          if ($attrs.callback) {
              $scope.$eval($attrs.callback);
          }

          if ($attrs.parentCallback) {
            $scope.$parent.$eval($attrs.parentCallback);
          }


        }//end callback

        function ajax_submit(){
          //如果操作为点击后发送请求
          var parameterBody = false;
          if (angular.isDefined($attrs.parameterBody)) {
            parameterBody = true;
            if($attrs.parameterBody=="false"){
              parameterBody=false;
            }
          }

          var httpMethod="POST";
          if($attrs.httpMethod){
            httpMethod=$attrs.httpMethod;
          }

            if (!$attrs.requestUrl) {
                callback();
                return;
            }
            var _requestUrl=$attrs.requestUrl;

        {

            var _params={};
            if ($attrs.params) {
                if ($attrs.params.indexOf("{") === 0) {
                      _params = $scope.$eval($attrs.params);
                }
            }


            function requestData_then(results) {
              var _data = results[1];
              if (_data.code === 200) {
                alertOk(_data.msg || '操作成功');
              }
              if ($attrs.$scopeData) $scope[$attrs.$scopeData] = data;
              //执行回调

              callback();

              //操作成功完成向上传播事件
              if ($attrs.emitted) {
                if ($attrs.emitted.indexOf(',') !== -1) {   //多个事件
                  var _arr = $attrs.emitted.split(',');
                  var _len = _arr.length,
                      i = 0;
                  for (i=0; i<_len; i++) {
                    $scope.$emit(_arr[i]);
                  }
                } else {    //单个事件
                  $scope.$emit($attrs.emitted);
                }
              }
            }

            requestData(_requestUrl, _params, httpMethod,parameterBody)
              .then(requestData_then)
              .catch(function (error) {
                alertError(error || '出错');
              });
            return;
          }


        }//ajax_submit



          //ajax_submit_before
                function ajax_submit_before(){
                  //如果操作为点击后发送请求
                  var parameterBody = false;
                  if (angular.isDefined($attrs.beforeAjaxParameterBody)) {
                    parameterBody = true;
                    if($attrs.parameterBody=="false"){
                      parameterBody=false;
                    }
                  }

                  var httpMethod="POST";
                  if($attrs.beforeAjaxHttpMethod){
                    httpMethod=$attrs.beforeAjaxHttpMethod;
                  }
                  var _requestUrl=$attrs.beforeAjaxUrlSubmit;

                {

                    var _params={};
                    if ($attrs.beforeAjaxParams) {

                      if ($attrs.beforeAjaxParams.indexOf("{") === 0) {
                          _params = $scope.$eval($attrs.beforeAjaxParams);
                      } else {
                        _params=$scope[$attrs.beforeAjaxParams];
                      }

                    }


                    function requestData_then(results) {
                      var _data = results[1];
                      ajax_submit();

                    };

                    requestData(_requestUrl, _params, httpMethod,parameterBody)
                      .then(requestData_then)
                      .catch(function (error) {
                        alertError(error || '出错');
                      });
                    return;
                  }


                }//ajax_submit_before



                if($attrs.alertConfirm=="false"){

                  //执行前需要执行
                  if (angular.isDefined($attrs.beforeIfEval) && $attrs.beforeAjaxUrlSubmit) {
                      var tmp=$scope.$eval($attrs.beforeIfEval);
                    if (tmp){
                        ajax_submit_before();
                        return;
                    }

                  }

                    ajax_submit();
                    return;
                }


        //默认弹出窗口
        dialogConfirm(_dialogContent, function (type,dialgForm) {

          //取消对话框操作
          if(type=="cancel"){
            //执行回调
            if ($attrs.cancelCallback) {
              $scope.$eval($attrs.cancelCallback);
            }
            return;
          }

          //type:nosave,save
          //取消对话框操作
          if(type=="nosave"){
            //执行回调
            if ($attrs.nosaveCallback) {
              $scope.$eval($attrs.nosaveCallback);
            }
            if ($attrs.parentNosaveCallback) {
              $scope.$parent.$eval($attrs.parentNosaveCallback);
            }
            return;
          }

          if(type=="save"){
            //执行回调
            if ($attrs.saveCallback) {
              $scope.$eval($attrs.saveCallback);
            }

            if ($attrs.parentSaveCallback) {
              $scope.$parent.$eval($attrs.parentSaveCallback);
            }
            return;
          }
          //如果操作为点击后回退
          // if (!angular.isDefined($attrs.jumpUrl) && !angular.isDefined($attrs.requestUrl)) {
          //   $window.history.go(-1);
          //   return;
          // }
          //如果操作为点击后跳转地址
          if (angular.isDefined($attrs.jumpUrl)) {
            $window.location.assign(_jumpUrl);
              return;
          }




          //执行前需要执行
          if (angular.isDefined($attrs.beforeIfEval) && $attrs.beforeAjaxUrlSubmit) {
              var tmp=$scope.$eval($attrs.beforeIfEval);
            if (tmp){
                ajax_submit_before();
                return;
            }

          }

            ajax_submit();
          //执行回调
          // callback();

        }, _dialogTemplate, _dialogTitle, _confirmBtnTxt, _cancelBtnTxt, _jumpUrl);
      });
    }
  };
}




/**
左侧二级菜
  leftNavigationMenu={"edit":true}
  <div left-navigation-menu="menu" no-author-filter="true"></div>
  edit：是否可编辑
*/
function leftNavigationMenu() {
  return {
    restrict: 'EA',
    scope: {
        noAuthorFilter:"@?",//不验证权限，全部显示用于 预览菜单
        leftNavigationMenu:"="
    },
    replace: true,
    templateUrl:  Config.tplPath +'tpl/project/leftNavigationMenu.html'
  };
}
/**
 *	左侧二级菜单切换效果（临时解决方案，无法与一级菜单点击事件指令集成在一起）
 */
function leftMenuSecondToggle ($location,$rootScope) {

  /**
  *菜单根据网页地址，选中对应菜单
  */
  var LeftMenuObj={
      isStart:false,//监听只启动一个标志。
      routeMap:{},
      last1MenuShowObj:null,
      //执行样式选中
      eleChangeEvent:function(element){
        if(!element||element.length===0){
          // console.log("error:LeftMenuObj.element=null");
        }
        //ul(p5)>li(p4)>ul(p3)>li(p2)>a(p1) left-menu-second-toggle
        var _parent = $(element).parent();
          //p2
        _parent.addClass('active').siblings().each(function () {
          $(this).removeClass('active');
        });
        //p4

        // console.log(_parent.parent().parent());

        _parent.parent().parent().removeClass('active').siblings().each(function () {
          $(this).removeClass('active');

          $(this).find('ul.sub-menu-list').slideUp(200);

          $(this).find('.sub-menu-list > li').each(function () {
              $(this).removeClass('active');
          });
        });
        //隐藏其他的
        if(LeftMenuObj.last1MenuShowObj){
            LeftMenuObj.last1MenuShowObj.hide();
        }
        //p3
        if (!_parent.parent().is(':visible')) {
          _parent.parent().show();
            LeftMenuObj.last1MenuShowObj=_parent.parent();
        }
        //
        $(element).parents('ul.sub-menu-list').prev().children().eq(2).removeClass('pr-arrow-down').addClass('pr-arrow-up');
      },
      //LeftMenuObj.doRoute();
      //根据优先级路由定位菜单
      doRoute:function(newUrl){
        // console.log("getElementMenu1="+url);
        var url=newUrl;// #/purchaseOrder/query.html?t=123
        url=url.split('#')[1];// /purchaseOrder/query.html?t=123
        if(!url)return;

        //全匹配优先级最高
        elementMenu=this.routeMap[url];
        //去掉参数匹配优先级最高
        if(!elementMenu||elementMenu.length===0){
             url=url.split('?')[0];// /purchaseOrder/query.html
            elementMenu=this.routeMap[url];
        }
        //取模块名
        if(!elementMenu||elementMenu.length===0){
             url=url.split('/')[1];  // purchaseOrder
            elementMenu=this.routeMap[url];
        }
        // console.log("getElementMenu2="+url);
        if(!elementMenu||elementMenu.length===0){
          return;
        }
        // console.log("doRoute="+url);
        this.eleChangeEvent(elementMenu);
      },
        //启动监听定义监视器，监控Url变化 LeftMenuObj.startListen($scope)
      startListen:function($scope){
        if(this.isStart)return;
        this.isStart=true;
        $scope.$on('$locationChangeSuccess', function (event, newUrl, currentUrl) {
          // console.log("locationChangeSuccess="+newUrl);
          LeftMenuObj.doRoute(newUrl);
        });
      },//startListen
      //添加路由，支持自定义key
      add:function(keyArr,elementMenu,routeData ){


        if(keyArr&&keyArr.length>0){//  自定义key
          for(var i=0;i<keyArr.length;i++){
              this.routeMap[keyArr[i]]=elementMenu;
          }
        }
        // #/purchaseOrder/query.html?t=123
        var url=  elementMenu.attr("href");
        if(routeData){
          url=routeData;
        }
        if(!url)return;

        url=url.split('#')[1];  // /purchaseOrder/query.html?t=123

        if(url)this.routeMap[url]=elementMenu;
        if(url)url=url.split('?')[0];  // /purchaseOrder/query.html
        if(url)this.routeMap[url]=elementMenu;
        if(url)url=url.split('/')[1]; // purchaseOrder
        if(url)this.routeMap[url]=elementMenu;

      }//end key

  };


  return {
      restrict: 'A',
    scope: {
        leftMenuSecondToggle:"=?",//不验证权限，全部显示用于 预览菜单
        leftNavigationMenu:"="
    },

    link: function ($scope, $element, $attrs) {
      var keyArr=null;
      if($attrs.keyArr){
          keyArr=$scope.$eval($attrs.keyArr);
      }
      LeftMenuObj.add(keyArr,$element,$scope.leftMenuSecondToggle);
      LeftMenuObj.startListen($rootScope);
      LeftMenuObj.doRoute("#"+$location.path());


      //绑定点击事件
      $element.on('click', function (event) {
        //阻止冒泡
        if (event && event.stopPropagation) {
          event.stopPropagation();
        }

        //执行事件
          LeftMenuObj.eleChangeEvent($element);
      });

    }
  };
}//leftMenuSecondToggle
/**
  弃用
 *	左侧二级菜单切换效果（临时解决方案，无法与一级菜单点击事件指令集成在一起）
 */
// function leftMenuSecondToggle_bak ($location) {
//   return {
//     restrict: 'A',
//     link: function (scope, element, attrs) {
//       //刷新页面保持边栏状态
//       if (attrs.href.indexOf($location.path().split('/')[1]) !== -1) {
//         var _par = $(element).parent();
//         _par.addClass('active').siblings().each(function () {
//           $(this).removeClass('active');
//         });
//         $(element).parent().parent().show();
//         //保持图标状态
//         $(element).parents('ul.sub-menu-list').prev().children().eq(2).removeClass('pr-arrow-down').addClass('pr-arrow-up');
//       }
//
//       //绑定点击事件
//       $(element).on('click', function (event) {
//         //阻止冒泡
//         if (event && event.stopPropagation) {
//           event.stopPropagation();
//         }
//
//         //执行事件
//         eleChangeEvent();
//       });
//
//       //定义监视器，监控Url变化
//       scope.$on('$locationChangeSuccess', function (event, newUrl, currentUrl) {
//         console.log("locationChangeSuccess="+attrs.href);
//         if (attrs.href.indexOf(newUrl.split('#')[1].split('/')[1]) !== -1) {
//           eleChangeEvent();
//         }
//       });
//
//       function eleChangeEvent () {
//         var _parent = $(element).parent();
//
//         _parent.addClass('active').siblings().each(function () {
//           $(this).removeClass('active');
//         });
//
//         _parent.parent().parent().removeClass('active').siblings().each(function () {
//           $(this).removeClass('active');
//           $(this).find('.sub-menu-list > li').each(function () {
//               $(this).removeClass('active');
//           });
//         });
//
//         if (!_parent.parent().is(':visible')) {
//           _parent.parent().show();
//         }
//       }
//     }
//   };
// }
/**
 *  个人中心导航切换
 */
function styleToggle ($location) {
  'use strict';
  return {
    restrict: 'A',
    link: function (scope, element, attrs) {

      if (attrs.href.indexOf($location.path().split('/')[2]) !== -1) {
        $(element).addClass('active').parent().siblings().each(function () {
          $(this).children().removeClass('active');
        });
        // $(element).parent().parent().show();
      }

      // $(element).addClass('active');

      // scope.$on('$locationChangeStart', function (event, newUrl, currentUrl) {
      //
      //   if (attrs.href.indexOf(newUrl.split('#')[1].split('/')[2]) !== -1) {
      //     $(element).addClass('active');
      //   }
      // });

      $(element).on('click', function (e) {
        if (!$(this).hasClass('active')) {
          $(this).addClass('active').parent().siblings().each(function () {
            $(this).children().removeClass('active');
          });
        }
      });
    }
  };
}
/**
 * [左边栏子菜单点击事件]
 */
function intervalCountdown ($interval) {
  'use strict';
  return {
      restrict: 'AE',
         scope: false,
    link: function ($scope, element, $attrs) {
      $scope.countdown = function (scopeKey,num) {
        $scope[scopeKey] = num;
          var timeout_upd=$interval(function () {
            if ( $scope[scopeKey] > 0) {
              $scope[scopeKey] -= 1;
            } else {
               $interval.cancel(timeout_upd);
            }
          }, 1000);
      };
      $scope.$on('$destroy',function(){
        try{

             $interval.cancel(timeout_upd);
        }catch(e){}

      });
    }
  };
}

/**
 * []
 canvas-workflow
 */
function canvasWorkflow (modal,utils) {
  'use strict';
  return {
      restrict: 'AE',
      // scope: false,
      scope: {
          workflowTaskData:"=?",
          ngModel:"=?"
      },
    link: function ($scope, element, $attrs) {
      var workflow=null;

      // $scope.ngModel;
      // var data=$scope[$attrs.ngModel];

      $scope.$watch("ngModel", function(value) {
        console.log("watch.workflow.ngModel",value);
        if(workflow)workflow.reload(value);
      }, true);

          var data= $scope.ngModel;
          console.log(data);
          require(['WorkflowProcess'], function(WorkflowProcess) {
            function clickCallback(event,that){

                if(!angular.isDefined($attrs.modalUrl)){
                    return;
                }

                 modal.closeAll();

                // alert(that.currentNode.text);
                  $scope.$parent.currentEvent=that.currentNode.data;
                  modal.open({
                    template: $attrs.modalUrl,
                    className: 'ngdialog-theme-right',
                    cache: false,
                    trapFocus: true,
                    overlay: ($attrs.modalOverlay == "true"),
                    data: that.currentNode.data,
                    scope: $scope.$parent,
                    controller: ["$scope", "$element", function ($scope, $element) {
                        $(".ngdialog-content", $element).width("50%");
                    }]
                });
            }//end clickCallback


            var option={
                showStatus:$attrs.showStatus=="true",
                node:{
                  clickCallback:clickCallback
                }
            };

             workflow=new WorkflowProcess($attrs.id,option);



            if ($attrs.scopeExtend){
                var scopeExtend=utils.getScopeExtend($scope,$attrs.scopeExtend);
                if(scopeExtend){
                  if ($attrs.scopeExtendAttr)scopeExtend[$attrs.scopeExtendAttr]=workflow;
                }

            }

            workflow.addWorkflowProcess(data);


            if($scope.workflowTaskData){
              workflow.addWorkflowTaskData($scope.workflowTaskData);

            }
              //编辑节点回掉函数 新建保存，作用域调用不到该函数
              // $scope.workflowCallback=$scope.$parent.workflowCallback=function(){
              //   modal.closeAll();
              //   workflow.reload();
              //
              // }
              //编辑节点回掉函数 新建保存，作用域调用不到该函数,采用监听标志位

              // if(angular.isDefined($attrs.updateWorkflowFlag)){
              //   $scope.$parent.$watch($attrs.updateWorkflowFlag, function(value) {
              //     modal.closeAll();
              //     workflow.reload();
              //   }, true);
              // }


          });//WorkflowProcess

    }//end link
  };
}//canvasWorkflow




/**
  药械订单列表-采购
*/
function businessFlowShow() {
  return {
    restrict: 'EA',
    scope: {
        businessKey:"@",
        businessType: "@"
    },
    templateUrl:  Config.tplPath +'tpl/project/businessFlowShow.html',
    link: function ($scope, element, $attrs,ngModel) {

    }//link
  };
}
 /**
  * 业务单流程展示
  */
 function canvasBusinessFlow (modal,utils) {
   'use strict';
   return {
       restrict: 'AE',
       // scope: false,
       scope: {
           ngModel:"=?"
       },
     link: function ($scope, element, $attrs) {

       // $scope.ngModel;
       // var data=$scope[$attrs.ngModel];
           var data= $scope.ngModel;
          //  console.log(data);
           var curRelId=$attrs.curRelId;//当前页面业务单id
          //  console.log(data);

           require(['CanvasBusinessFlow'], function(CanvasBusinessFlow) {

             //点击回调方法
             function clickCallback(event,that){
                 if(angular.isDefined($attrs.disableClick)){
                     return;
                 }
               var moduleType=that.currentNode.data.moduleType;
               var relId= that.currentNode.data.relId;
                var subModuleAttribute= that.currentNode.data.subModuleAttribute;
               if(!moduleType||!relId){
                 console.log("moduleType="+moduleType+",relId="+relId);
                 return;
               }

               if(curRelId==relId){//当前页面节点点击不做跳转
                 return;
               }
               var url="#/"+moduleType+"/get.html?id="+relId;

               if(moduleType=='lossOrder'){
                   url="#/lossOverOrder/get-reimburse.html?id="+relId;
               }
               else if(moduleType=='overOrder'){
                   url="#/lossOverOrder/get-overflow.html?id="+relId;
               }

               else if(moduleType=="outstockOrder"){
                    if(subModuleAttribute=="销售出库单"||subModuleAttribute=="销售出库单_红字"){
                           url="#/saleOutstockOrder/get.html?id="+relId;
                    }
                    else{
                         url="#/otherOutstockOrder/get.html?id="+relId;
                    }
               }

               else if(moduleType=="instockOrder"){
                    if(subModuleAttribute=="采购入库单"||subModuleAttribute=="采购入库单_红字"){
                        url="#/purchaseInstockOrder/get.html?id="+relId;
                    }
                    else{
                         url="#/otherInstockOrder/get.html?id="+relId;
                    }
               }

               utils.goTo(url);
             }//end clickCallback

             //参数定义
             var option={

                 node:{
                   clickCallback:clickCallback
                 }
             };
             if($attrs.baseImageUrl){
               option.baseImageUrl=$attrs.baseImageUrl;
             }
             if($attrs.spacingWidth){
               option.spacingWidth=parseInt($attrs.spacingWidth);
             }
             if($attrs.spacingHeight){
               option.spacingWidth=parseInt($attrs.spacingHeight);
             }


             var workflow=new CanvasBusinessFlow($attrs.id,option);
             if ($attrs.scopeExtend){
                 var scopeExtend=utils.getScopeExtend($scope,$attrs.scopeExtend);
                 if(scopeExtend){
                   if ($attrs.scopeExtendAttr)scopeExtend[$attrs.scopeExtendAttr]=workflow;
                 }
             }

             workflow.addCanvasBusinessFlow(data,curRelId);

           });//WorkflowProcess

     }//end link
   };
 }//canvasWorkflow

/**
    打印组件
  */
function lodopFuncs(modal,utils) {
    return {
      restrict: 'EA',
      scope: true,
      replace: true,
      templateUrl:  Config.tplPath +'tpl/lodopFuncs.html',
      link: function ($scope, element, $attrs) {
            var LODOP=null;
            require(['LodopFuncs'], function(LodopFuncs) {

              $scope.LODOP_OB_Id="LODOP_OB_"+new Date().getTime();
              $scope.LODOP_EM_Id="LODOP_EM"+new Date().getTime();
                $scope.Print_Div_id="Print_Div_"+new Date().getTime();


                  function getLODOP(){

                    if(!LODOP){
                      LODOP=LodopFuncs.getLodop(document.getElementById(  $scope.LODOP_OB_Id),document.getElementById($scope.LODOP_EM_Id));
                    }
                    return LODOP;
                  }
                  function CreateOneFormPage(){
                      getLODOP();
                  		LODOP.PRINT_INIT("打印控件功能演示_Lodop功能_表单一");
                  		LODOP.SET_PRINT_STYLE("FontSize",18);
                  		LODOP.SET_PRINT_STYLE("Bold",1);
                  		LODOP.ADD_PRINT_TEXT(50,231,260,39,"打印页面部分内容");
                  		LODOP.ADD_PRINT_HTM(88,200,350,600,document.getElementById($scope.Print_Div_id).innerHTML);
                  	}
                  //打印预览
                  $scope.prn1_preview=function() {
                      getLODOP();
                  		CreateOneFormPage();
                  		LODOP.PREVIEW();
                  	};

                    $scope.$digest();
            });//require
      }//link
    };//return
  }

/**
 *  医院采购目录点击进入编辑模式事件处理
 */
function hospitalPurchaseComeinEdit () {
  return {
    restrict: 'A',
    scope: {},
    link: function (scope, element, attrs) {
      $(element).find('a.edit-link-icon').on('click', function () {
        $(this).hide().next().show();
        $(element).find('span.notEdit').hide();
        $(element).find('span.comeInEdit').show();
      });
    }
  };
}
// 销售出库单物流信息过长处理
function saleOutStockKuaDi () {
  return {
    restrict: 'A',
    scope: {},
    link: function ($scope, $element, $attrs) {
    var lilength=0;
    var modalLength=parseInt($attrs.modalLength);
    var leftShift=modalLength;        // 一次向左移动的长度
    // $('.kuaidiul').animate({'margin-left':'-'+leftShift+'px'});
      $($element).mouseenter(function (e) {
      lilength=$(this).children('ul').children('li').length;
      liWidth=$(this).children('ul').children('li').width()+42;
      console.log(liWidth);
      console.log();
        // 大于一行显示的个数，才出现按钮
        if(lilength>parseInt(modalLength/liWidth)){
          $(this).children('span').css("display", "block");
          // 点击左移按钮后
          $('.button-left').off("click").on('click',function(){
            $('.button-right').removeAttr('disabled','disabled');
            if(leftShift<modalLength*Math.ceil(lilength/parseInt(modalLength/liWidth)))
            {
              $('.kuaidiul').animate({'margin-left':'-'+leftShift+'px'});
              leftShift+=modalLength;
            }
          })
          $('.button-right').off("click").on('click',function(){
            $('.button-left').removeAttr('disabled','disabled');
            if(leftShift>=modalLength)
            {
              leftShift-=modalLength;
              $('.kuaidiul').animate({'margin-left':'-'+leftShift+'px'});
            }
          })
        }
        // 判断是否左右按钮是否可点击
        if(leftShift<modalLength){
          $('.button-right').attr('disabled','disabled');
          $('.button-right:before').css('color','#e5e5e5');
        }
        if(leftShift>=modalLength*Math.ceil(lilength/parseInt(modalLength/liWidth))){
          $('.button-left').attr('disabled','disabled');
          $('.button-left:before').css('color','#e5e5e5');
        }
      });
      $($element).mouseleave(function (e) {
        $(this).children('span').css({
           "display": "none"
         });
      });
    }
  };
}

// 库存明细模块，鼠标移入高亮并显示两个按钮
/**
   *
  	* @Description: 鼠标移入高亮并显示两个按钮
  	* @author liumingquan
  	* @date 2016年12月19日 下午4:32:59
   */

   	   //  关键步骤：
   	    //1.传入参数:url(跳转路径)，className(控制样式的class)
   		//2.mouseenter:表示鼠标移入之后要执行的步骤。
   		//3.mouseleave:表示鼠标移出后执行的步骤。
function medicalStockMouseOver(utils){
  return{
    restrict: 'A',
      link: function ($scope, $element, $attrs) {
        // var btnArray=[];
        //按钮数量，用于计算弹出菜单的div宽度
        var btnCount=0;
        //弹出菜单的div(装两个按钮的div)
        var moveBtnDiv=null;
        //按钮基础数据(mouse-over-buttons-json传入的相关参数，以Jason的数据格式传入)
        // 把按钮基础数据转化为数组类型
        var mouseOverButtons=  $scope.$eval($attrs.mouseOverButtonsJson);
        if(mouseOverButtons && mouseOverButtons.length>0){
          moveBtnDiv=$("<div id='moveBtnDiv'></div>");
          btnCount=mouseOverButtons.length;
        }

        for(var i=0;i<mouseOverButtons.length;i++){
            var bt=mouseOverButtons[i];
            if (bt.progress=='0') {
              return;
            }else{
              var tmp="<a style='width:32px;height:32px;display:inline-block;margin-top:8px;' href='"+bt.url+"' title='"+bt.title+"'><span class='"+bt.className+"'></span></a>";
              var btn1=$(tmp);
              // btn1.appendto(moveBtnDiv);
              moveBtnDiv.append(btn1);
            }
        }

        // 鼠标移入显示按钮
        $($element).mouseenter(function(e){
          $element.addClass("bg-c");
          if(!moveBtnDiv)return;
          //+document.body.scrollLeft+
          moveBtnDivWidth=34*btnCount;
          var y =$element.offset().top -document.body.scrollTop;
          // var x= utils.getMainBodyWidth();
          var x= utils.getwindowWidth()-60-moveBtnDivWidth-document.body.scrollLeft; //有bug，table没有全拼暂满时，弹出按钮不能点击bug。 要求table 宽度 100%

          //
          moveBtnDiv.css({
             "position": "fixed",
             "width":moveBtnDivWidth,
             "height":$element.height(),
             "top": y,
             "left": x
           });

           $(this).append(moveBtnDiv);

        });//mouseenter
        // 鼠标移出按钮消失
        $($element).mouseleave(function(){
          $(this).removeClass("bg-c");
          moveBtnDiv.remove();
        });//mouseleave
      }//link
  };
}


// 医院、经销商/零售商资格申请，首营品种、企业管理模块流程箭头样式。
/**
   *
  	* @Description: 根据走到不同步骤箭头样式发生变化
  	* @author 宋娟
  	* @date 2017年3月7日 上午11:32
   */

   	   //  关键步骤：
   	    //1.传入参数:arrows(箭头的个数)，className(根据状态不同显示样式的class),arrowText(箭头中显示文字的内容)
        //2.divWidth 计算出每个箭头的宽度后，用于后续定义。
        //3.$(window) 监听浏览器窗口大小改变，重新计算每个箭头的宽度，达到箭头宽度自适应的目的。
function stepFlowArrowShow(utils){
  return{
    scope:{},
    restrict: 'A',
    link: function ($scope, $element, $attrs) {
      // 定义一个类，用于css对样式的控制
      $($element).addClass('first-medical-nav');
      //箭头数量，用于计算箭头的个数。
      var arrowCount=0;
      //(step-flow-arrow-json传入的相关参数，以Jason的数据格式传入)
      //基础数据转化为数组类型
      var stepFlowArrow= $scope.$eval($attrs.stepFlowArrowJson);
      arrowCount=stepFlowArrow.length;
      // 当每个箭头创建好之后，定义每个的宽度
      var divWidth=($($element).width()-((arrowCount-1)*30))/arrowCount

            if(stepFlowArrow && stepFlowArrow.length>0){
              // 计算得到每个div的宽度
              for(var i=0;i<stepFlowArrow.length;i++){
                  var step=stepFlowArrow[i];
                  var tmp="<div class='"+step.className+"'><span><em class='circle-step mgr-m'>"+(i+1)+"</em>"+step.arrowText+"</span></div>";
                  $($element).append($(tmp));
                  // 中间箭头的形状定义
                  if(i>0&&i<stepFlowArrow.length-1){
                    if($($element).children('div').eq(i).hasClass('visited')){
                      // 如果有visited这个类，说明是已完成的状态，所以形状要改变。
                      $($element).children('div').eq(i).append("<div class='triangle1'></div><div class='triangle2'></div>");
                      $($element).children('div').eq(i).prepend("<div></div><div></div>");
                    }else{
                      $($element).children('div').eq(i).append("<div></div>");
                      $($element).children('div').eq(i).prepend("<div></div>");
                    }
                  }
              }
              // 箭头创建完成之后，设置宽度
              $('.first-medical-nav>div').css({"width":divWidth});
              // 开始箭头的形状定义
              $($element).children('div').first().append("<div></div><div></div>");
              // 最后一个箭头的形状定义
              $($element).children('div').last().prepend("<div></div>");
          }

        $(window).resize(function () {
          //当浏览器大小变化时,触发方法，重新给箭头计算宽度，并重新设置宽度，达到自适应宽度的目的。
            $('.first-medical-nav>div').css({"width":($($element).width()-((arrowCount-1)*30))/arrowCount});
        });
      }//link
  };
}


// 弹出框文本域内容实时剩余字数提醒
/**
   *
  	* @Description: 显示用户当前输入字数的个数，并限制不能超过规定的字数。
  	* @author 宋娟
  	* @date 2017年3月7日 下午17:20
   */
	   //  关键步骤：
	    //1.传入参数:maxLength输入字数最大限制
      // 2.strResult：用于显示限制字数的变量
  function limitWordShow(utils){
    return{
      scope:{},
      restrict: 'A',
      link: function ($scope, $element, $attrs) {
        var strResult;
        var maxLen=$attrs.maxlength;

        // 最开始加载后，显示字数限制提示
          $scope.$watch($scope.initFlag, function() {
            strResult = '<span class="strResult">(<em class="remainWords">0</em>/'+maxLen+')</span>';
            $($element).after(strResult);
            // 字数限制显示样式定义
            if($attrs.top){
              $('.strResult').css({
                'position':'absolute',
                'top':$attrs.top+'px',
                'right':'35px',
                'z-index':'100',
                'color':'#999'
              });
            }else{
              $('.strResult').css({
                'position':'absolute',
                'top':'63px',
                'right':'35px',
                'z-index':'100',
                'color':'#999'
              });
            }
          });
          // 输入框发生改变触发事件
          $($element).bind("input propertychange change",function(event){
            // 显示当前输入的字数的个数
              $('.remainWords').html($($element).val().length);
            });
        }//link
    };
  }






/**
 * 点击左侧侧边栏选项，改变其样式
 * @return {[type]} [description]
 */
function leftSideActive(){
  return{
    restrict: 'A',
    link: function ($scope, $element, $attrs) {
      //1、点击库存查询页面的侧边子菜单后触发
      $($element).on('click', 'li a', function(e){
        //2、如果含有actived样式，就先去掉样式
        if($('li').hasClass('actived')||$('a').hasClass('actived')||$('span').hasClass('actived')){
          $('li').removeClass('actived');
          $('a').removeClass('actived');
          $('span').removeClass('actived');
        }
        //3、然后把点击的该元素加上actived样式
      $(e.target).addClass('actived');
      });
    }
  };

}

/**
 *  卡片式列表页面内容超出范围的处理(动态宽度)
 */
function handleTextOverflow () {
  return {
    restrict: 'A',
    scope: {},
    link: function (scope, element, attrs) {
      if (!attrs.type) {
        throw new Error('params type is must defined');
      }

      // 处理动态宽度的一行超出范围
      if (attrs.type === 'line') {      // 行内超出
        var _w = $(element).width() ? $(element).width() : '100%',
            _h = attrs.height;

        $(element).attr('style', 'width:'+_w+';'+'height:'+_h+';').addClass('overhide').addClass('w-space-nowrap');
      }

      // 处理动态宽度的块级元素超出范围
      if (attrs.type === 'block') {      // 块级元素超出
        var _wb = $(element).width(),
            _hb = $(element).height();

        $(element).attr('style', 'width:'+_wb+'px;height:'+_hb+'px;').addClass('text-ellips-block');
      }
    }
  };
}

/**
 * [salesorderEditShowDelbtn 新版购需单页面商品列表hover后的删除功能实现]
 * @return {[type]} [description]
 * @author liuzhen
 */
function salesorderEditShowDelbtn () {
  'use strict';
  return {
    restrict: 'A',
    scope: true,
    link: function ($scope, $element, $attrs) {

      // 获取当前元素的最后一个子元素
      var _lastChild = $element.children().last();

      // 绑定鼠标移入移出事件
      $element.hover(function () {
        $(_lastChild).find('div.sales-order-item-delbtn').each(function () {
          $(this).css('z-index','110').show();
        });
      }, function () {
        $(_lastChild).find('div.sales-order-item-delbtn').each(function () {
          $(this).css('z-index','100').hide();
        });
      });

      //为删除按钮绑定点击事件
      $(_lastChild).find('div.sales-order-item-delbtn').each(function () {
        $(this).on('click', function () {
          $(this).find('div.sales-order-confirm-del-area').show();
        });

        $element.on('mouseleave', function () {
          $(this).find('div.sales-order-confirm-del-area').hide();
        });
      });
    }
  };
}

/**
 * [tableItemHandlebtnComponent 自定义表格内条目删除按钮]
 * @param  {[type]} utils [注入utils服务]
 * @return {[type]}       [无返回]
 * @template: {请在表格内任意td内写如下列模板代码}
 * <div class="table-item-handle-btn">
     <div class="table-item-confirm-del-area bg-white">
       <p class="bb-line color-red pd-v">确认删除本条数据?</p>
       <p class="pdt">
         <a href="javascript:;" class="cancelHandle" ng-click="cancelHandle()">取消</a>
         <a href="javascript:;" class="confirm-del-this btn btn-primary pr-btn-xsm pr-btn-bg-gold mgl" ng-click="formData.orderMedicalNos.splice($index,1);">确认</a>
       </p>
     </div>
   </div>
 * @modified {2017.2.14 by LiuZhen}
 */
function tableItemHandlebtnComponent (utils) {
  'use strict';
  return {
    restrict: 'A',
    scope: true,
    link: function (scope, element, attrs) {

      // 操作删除按钮
      var _delBtn = $(element).find('div.table-item-handle-btn');
      // 操作删除层
      var _delArea = $(element).find('div.table-item-confirm-del-area');

      //绑定点击显示操作删除层
      _delBtn.on('click', function () {
        _delArea.show();
      });

      element.hover(function () {
        // 当前行序号
        var _index = attrs.tableItemIndex,
            _orderMedicalNos = scope.formData.orderMedicalNos;

        // 计算当前tr距离顶部的高度
        var _offsetTop = $(element).offset().top - document.body.scrollTop;
        // 计算当前页面宽度
        var _pageWidth = utils.getMainBodyWidth() + 65;

        _delBtn.css({'position':'fixed','top':_offsetTop,'left':_pageWidth}).show();

      }, function () {
        _delBtn.css({'position':'absolute','top':0,'left':0}).hide();
        _delArea.hide();
      });

      //取消操作
      scope.cancelHandle = function () {
        _delBtn.hide();
        _delArea.hide();
      };
    }
  };
}

/**
  	 *
  	* @Description: html编辑器
  	* @method sayMsgToOther
  	* @param
  	* @param
  	* @param msg
  	* @return
  	* @author ecolouds-01
  	* @date 2016年12月15日 下午5:16:02

  	  修改记录：
  	   @Description: TODO(修改了什么)
  	* @author ecolouds-01
  	* @date 2016年12月15日 下午5:16:02

  	    关键步骤：
  	    //1.传如参数：人A，人B
  		//2.如果人B==null，则返回失败标准。
  		//3.A对B说。 该逻辑很复杂，或变化多则单独写成方法
  		//4.返回成功标志。
  	 */
function umeditor ($timeout) {

  var defaultConfig={
          //这里可以选择自己需要的工具按钮名称,此处仅选择如下七个
          toolbar: ['source undo redo bold italic underline'],
          //focus时自动清空初始化时的内容
          autoClearinitialContent: true,
          //关闭字数统计
          wordCount: false,
          //关闭elementPath
          elementPathEnabled: false,

          autoHeightEnabled:false,
          //frame高度
          initialFrameHeight: 400
      };

  return {
    restrict: 'A',
    scope: {
      ngModel:"=?",
      config:"=",
      umeditor:"="

  },
    // replace: true,
      // transclude: true,
    require: 'ngModel',
    // templateUrl:  Config.tplPath +'tpl/umeditor.html',
    link: function ($scope, $element, $attrs,ngModel) {
      var _dom = $element[0];
      //默认样式
      $scope.umStyle={"width":'1000px',"height":"440px"};

      if ($attrs.umStyle) {
          if ($attrs.umStyle.indexOf("{") === 0) {
                $scope.umStyle = $scope.$eval($attrs.umStyle);
          }
      }

        $scope.editorId=$attrs.umeditor;

          var _umeditor =null;
          require(['ueditor_lang'], function(ueditor_lang) {

        function initEditor(){
            if(_umeditor)return;
           //获取当前的DOM元素
                   var _id = '_' + Math.floor(Math.random() * 100).toString() + new Date().getTime().toString();
                   var placeholder= $attrs.placeholder;
                   if(!placeholder)placeholder="";
                   var _placeholder = '<p style="font-size:14px;color:#ccc;">' +
                       placeholder +
                       '</p>';

                        var _config=null;

                       if($scope.config){
                          _config=jQuery.extend(true,{},defaultConfig,$scope.config);
                       }else{
                           _config=jQuery.extend(true,{},defaultConfig);
                       }

                   _dom.setAttribute('id', _id);
                   var _umeditor = UE.getEditor(_id, _config);

                    $scope.umeditor=_umeditor;
                   /**
                    * 对于umeditor添加内容改变事件，内容改变触发ngModel改变.
                    */
                   var editorToModel = function () {

                       if (_umeditor.hasContents())
                           ngModel.$setViewValue(_umeditor.getContent());
                       else
                           ngModel.$setViewValue(undefined);
                   };

                   /**
                    * umeditor准备就绪后，执行逻辑
                    * 如果ngModel存在
                    *   则给在编辑器中赋值
                    *   给编辑器添加内容改变的监听事件.
                    * 如果不存在
                    *   则写入提示文案
                    */

                   _umeditor.ready(function () {


                      if($attrs.initHtmlContentId){
                           _umeditor.setContent($("#"+$attrs.initHtmlContentId).html());
                            ngModel.$setViewValue(_umeditor.getContent());
                        return;
                      }else{
                        if (ngModel.$viewValue) {
                            _umeditor.setContent(ngModel.$viewValue);

                        } else {
                            _umeditor.setContent(_placeholder);
                        }
                      }
                      _umeditor.addListener('contentChange', editorToModel);

                       //_umeditor.execCommand('fontsize', '32px');
                       //_umeditor.execCommand('fontfamily', '"Microsoft YaHei","微软雅黑"')
                   });

                   /**
                    * 添加编辑器被选中事件
                    * 如果ngModel没有赋值
                    *   清空content
                    *   给编辑器添加内容改变的监听事件
                    */
                   _umeditor.addListener('focus', function () {
                        //  if($attrs.initHtmlContentId)return;
                       if (!ngModel.$viewValue) {
                          //  _umeditor.setContent('');
                           _umeditor.addListener('contentChange', editorToModel);
                       }
                   });


                   /**
                    * 添加编辑器取消选中事件
                    * 如content值为空
                    *   取消内容改变的监听事件
                    *   添加content为提示文案
                    */
                   _umeditor.addListener('blur', function () {
                       if (!_umeditor.hasContents()) {
                           _umeditor.removeListener('contentChange', editorToModel);
                           _umeditor.setContent(_placeholder);
                       } else {
                       }
                   });
        }//initEditor

        initEditor();

        //  if ($scope.$last === true) {
        //        $timeout(function () {
        //          console.log("$scope.$last $timeout");
        //           initEditor();
        //        });
        //    }
      });//require

    }//end link
  };
}

/**
	 *
	* @Description: TODO(监听日期下拉选择值，来设置开始时间和结束时间)
	* @method sayMsgToOther
	* @param peopleA
	* @param peopleB
	* @param msg
	* @return
	* @author ecolouds-01
	* @date 2016年12月15日 下午5:16:02

	  修改记录：
	   @Description: TODO(修改了什么)
	* @author ecolouds-01
	* @date 2016年12月15日 下午5:16:02

	    关键步骤：
	    //1.传如参数：人A，人B
		//2.如果人B==null，则返回失败标准。
		//3.A对B说。 该逻辑很复杂，或变化多则单独写成方法
		//4.返回成功标志。
	 */
function datePeriodSelect () {
  return{
    scope:{
      startTime:"=",
      endTime:"=",
      ngModel:"="
    },
    restrict: 'A',
    link: function ($scope, $element, $attrs) {

      /**
       * 开始结束时间设置方法
       * @param {[type]} val [description]
       */
      function  setStartAndEndTime (val){
        // 运用第三方插件moment
            var moment = require('moment');
            var startTime=moment().format("x");
            var endTime=moment().format("x");
            switch (val) {
              case "最近7天":
              startTime= moment().subtract(1, "weeks").format("x");
                break;
              case "最近10天":
              startTime= moment().subtract(10, "days").format("x");
                  break;
              case "最近一个月":
              startTime= moment().subtract(1, "months").format("x");
              break;
              default:
            }
          $scope.startTime=startTime;
          $scope.endTime=endTime;
        }

      //1.监听下拉选择的值，触发开始结束时间设置方法setStartAndEndTime。
          $scope.$watch("ngModel", function(val) {
              //2.根据监听的值设置时间。
              // console.log(val);
              setStartAndEndTime(val);

          });
    }
  };

}

//显示原图
function modalImgShow(ngDialog,utils) {
    return {
        restrict: 'A',
        // scope: {
        //     modalScope: '='
        // },
        link: function ($scope, $elem, $attrs) {

            $elem.on('click', function (e) {


                var url=$attrs.ngSrc||$attrs.src;
                if(!url){
                  console.log("url is null");
                  return;
                }
                url=url.split("@")[0];
                  var modalData='{"url":"'+url+'"}';
                  console.log(modalData);

                ngDialog.open({
                    template:  Config.tplPath +"tpl/show-original-image.html",
                    //className: 'ngdialog-theme-right',
                    cache: false,
                    trapFocus: false,
                    //overlay: false,
                    data:modalData,
                    scope: $scope,
                    controller: ["$scope", "$element", function ($scope, $element) {
                        $(".ngdialog-content", $element).width(utils.getMainBodyWidth());
                          $(".ngdialog-content", $element).height(utils.getwindowHeight());
                    }]
                });


              e.preventDefault();
            });
        }
    };
}

/**
 * 自动补全-药械 生产批次/灭菌批次/数量
 */
function angucompleteMedicalStockBatch($parse, requestData, $sce, $timeout) {
    return {
        restrict: 'EA',
        scope: {
            "placeholder": "@",
            "selectedItem": "=?",
            "url": "@",
            "titleField": "@",
            "descriptionField": "@",
            //"localData": "=?",
            "searchFields": "@",
            "matchClass": "@",
            "ngDisabled": "=?"
        },
        require: "?^ngModel",
        templateUrl: Config.tplPath + 'tpl/project/autocomplete-medicalStockBatch.html',
        link: function($scope, elem, attrs, ngModel) {
            $scope.lastSearchTerm = null;
            $scope.currentIndex = null;
            $scope.justChanged = false;
            $scope.searchTimer = null;
            $scope.hideTimer = null;
            $scope.searching = false;
            $scope.pause = 300;
            $scope.minLength = 1;
            $scope.searchStr = null;

            require(['project/angucomplete'], function(angucomplete) {
                  $scope.angucomplete1=new angucomplete($scope,elem,$parse, requestData, $sce, $timeout,ngModel);

            });//angucomplete

        }
    };
}//angucompleteMedicalStockBatch

/**
 * 自动补全-供应商
 */
function angucompleteSupplier($parse, requestData, $sce, $timeout) {
    return {
        restrict: 'EA',
        scope: {
            "placeholder": "@",
            "selectedItem": "=?",
            "url": "@",
            "titleField": "@",
            "descriptionField": "@",
            "ngModelId": "=?",//绑定返回对象id
            "ngModel": "=",
            "searchFields": "@",
            "matchClass": "@",
            "ngDisabled": "=?"
        },
        require: "?^ngModel",
        templateUrl: Config.tplPath + 'tpl/project/autocomplete-supplier.html',
        link: function($scope, elem, $attrs, ngModel) {
            $scope.lastSearchTerm = null;
            $scope.currentIndex = null;
            $scope.justChanged = false;
            $scope.searchTimer = null;
            $scope.hideTimer = null;
            $scope.searching = false;
            $scope.pause = 300;
            $scope.minLength = 1;
            $scope.searchStr = $scope.searchFields;
            // console.log("$scope.searchFields",$scope.searchFields);
            //绑定返回对象的某个属性值。
            if($attrs.ngModelId){
              $scope.$watch("ngModel", function(value) {
                // console.log("ngModelProperty.watch.ngModel",value);
                if(!value)return;
                $scope.ngModelId=value.id;
                $scope.searchStr=value.data.name;
              }, true);
            }

            require(['project/angucomplete'], function(angucomplete) {
                  $scope.angucomplete1=new angucomplete($scope,elem,$parse, requestData, $sce, $timeout,ngModel);

            });//angucomplete

        }
    };
}

/**
 * 自动补全-药械
 */
function angucompleteMedical($parse, requestData, $sce, $timeout) {
    return {
        restrict: 'EA',
        scope: {
            "id":"@?",
            "placeholder": "@",
            "selectedItem": "=?",
            "url": "@",
            "titleField": "@",
            "descriptionField": "@",
            //"localData": "=?",
            "searchFields": "@",
            "matchClass": "@",
            "ngDisabled": "=?"
        },
        require: "?^ngModel",
        templateUrl: Config.tplPath + 'tpl/project/autocomplete-medicalStock.html',
        link: function($scope, elem, attrs, ngModel) {
            $scope.lastSearchTerm = null;
            $scope.currentIndex = null;
            $scope.justChanged = false;
            $scope.searchTimer = null;
            $scope.hideTimer = null;
            $scope.searching = false;
            $scope.pause = 300;
            $scope.minLength = 1;
            $scope.searchStr = null;



            require(['project/angucomplete'], function(angucomplete) {
              //是否验证合法，允许输入
              var canSelectResult=function(result){

                  try{
                    if (result.data.businessApplication.businessStatus == '已冻结') {
                      return false;
                    }
                  }catch(e){  }
                return true;
              }

              $scope.angucomplete1=new angucomplete($scope,elem,$parse, requestData, $sce, $timeout,ngModel,canSelectResult);

            });//angucomplete

        }
    };
}

/**


<div class="pd-c-l pdt-m"
     flash-add-medical
     ng-model="data1"
     hide-quantity
     hide-import
     ajax-url="rest/authen/medicalStock/query.json?warehouseStocksCode={{formData.warehouseCode}}"
     add-data-callback-fn="flashAddDataCallbackFn(data1)">
</div>
参数说明：
  hide-quantity ：隐藏输入数量控件
  hide-import  :隐藏导入按钮

 * 闪加药械
 ngModel={
 data:{},//药械基本信息
 count：10 //输入数量
}
 */
function flashAddMedical(utils,$timeout) {
    return {
        restrict: 'EA',
        scope: {
            "id":"@?",
            "ngModel": "=",
            "addDataCallbackFn":"&?",
            "formData": "=?"
        },
        require: "?^ngModel",
        templateUrl: Config.tplPath + 'tpl/project/flashAddMedical.html',
        link: function($scope, elem, $attrs, ngModel) {


          //隐藏输入数量控件
            if (angular.isDefined($attrs.hideQuantity)){
              $scope.hideQuantity=true;
            }
            //隐藏导入按钮
            if (angular.isDefined($attrs.hideImport)){
              $scope.hideImport=true;
            }

            //监听变化
          $attrs.$observe("ajaxUrl", function(newVal, oldVal) {
            $scope.ajaxUrl = newVal;
          });

          // 如果属性isDisabledThis未定义，则不开启条件限制查询药械
          if (!angular.isDefined($attrs.isDisabledThis)) { $scope.isCustomerId = true;}

          // 监控用户是否已选择客户或供应商
          $attrs.$observe('isDisabledThis', function (newVal, oldVal) {
            if (newVal) {
              $scope.isCustomerId = true;
            }
          });

          //监听自动补全选中事件。
          $scope.angucompleteMedicalOnChange = function () {
            //隐藏数量输入字段情况下，选择药械，触发添加事件。
            if($scope.hideQuantity){
              $scope.addDataFn();
            }else{//隐藏字段情况下，选择药械，触发添加事件。
              var inputId='flashAddMedical_input_count';
                if($scope.id)inputId+=$scope.id;
              //  $timeout 保障不受其他干扰，最后一个执行。
              utils.focusByInputId(inputId);


            }

          }
          //添加业务数据
          $scope.addDataFn = function () {
            if($scope.addDataCallbackFn){
                var data=  utils.replaceObject({},$scope.ngModel);
              var  flag=$scope.addDataCallbackFn(data);
              if(typeof flag=='function')flag=flag(data)
              if(!flag){//业务逻辑判断添加失败，则不清空数据。
                return false;
              }

            }else{

              console.log("scope.addDataCallback function is null!");

            }

            //清空输入数据
          $scope.ngModel={};
          //自动补全查询输入框获得焦点

          var searchInputId='#angucompleteMedical_searchInputId';
          if($scope.id)searchInputId+=$scope.id;

          //  $timeout 保障不受其他干扰，最后一个执行。
          $timeout(function(){
            $(searchInputId).val("");
            $(searchInputId).trigger('focus');


          },0);

          return false;




          };

          //input输入框回车事件。
          $scope.handleAddThisItem = function (e) {
            var keycode = window.event ? e.keyCode : e.which;
            if (keycode == 13) {
              $scope.addDataFn();
            }
              return false;
          };

        }
    };
}

/**
  用户自定义表结构显示。
*/
function customTable() {
  return {
    restrict: 'EA',
    replace: true,
    //  transclude: true,
    templateUrl:  Config.tplPath +'tpl/project/customTable.html',
    // compile: function() {
    //            return function (scope, element, attrs,$ctrl,transcludeFn) {
    //                transcludeFn(scope, function(clone) {
    //
    //
    //                  console.log(clone);
    //
    //                    var title= element.find('title');
    //                    var time = clone.find('.time');
    //                    var type = clone.find('.type');
    //                    var text= clone.find('.content');
    //
    //                    title.append(time);
    //                    element.append(type);
    //                    element.append(text)
    //                });
    //            };
    //        },
          link: function ($scope, $element, $attrs,$ctrl,$transclude) {

            //
            //   $transclude($scope,function(clone){
            //     console.log(clone);
            //     $element.append(clone);
            // })

            if ($attrs.checkboxShow) {
                $scope._checkboxShow=$attrs.checkboxShow;
            }
            if ($attrs.customTable) {
                $scope._customTableName=$attrs.customTable;
            }
            if ($attrs.customTrMenus) {
                $scope._customTrMenus=$attrs.customTrMenus;
            }
          }
  };
}



// tableTrMouseOverMenu table标签，移动上去显示菜单按钮。
/**
   *
  	* @Description: 鼠标移入高亮并显示两个按钮
  	* @author liumingquan
  	* @date 2016年12月19日 下午4:32:59
   */

   	   //  关键步骤：
   	    //1.传入参数:url(跳转路径)，className(控制样式的class)
   		//2.mouseenter:表示鼠标移入之后要执行的步骤。
   		//3.mouseleave:表示鼠标移出后执行的步骤。
function tableTrMouseOverMenu(utils,$compile,customMenuUtils){
  return{

    restrict: 'A',
      link: function ($scope, $element, $attrs) {

        //弹出菜单的div()
        var  moveBtnDiv=$("<div></div>");

        // 鼠标移入显示按钮
        $($element).mouseenter(function(e){

          var bottomButtonList=$scope[$attrs.tableTrMouseOverMenu];
          var dataObj=$scope[$attrs.businessData];

          $scope._tableTrMouseOverMenus=customMenuUtils.parseVariableMenuList(bottomButtonList,dataObj);
          //创建菜单按钮。
          var tmp_template='<span query-item-card-button-list="_tableTrMouseOverMenus"></span>';
          moveBtnDiv.html(tmp_template);
          $compile(moveBtnDiv.contents())($scope);

          // var btnArray=[];
          //按钮数量，用于计算弹出菜单的div宽度
          var btnCount=0;
          if($scope._tableTrMouseOverMenus){
            btnCount=$scope._tableTrMouseOverMenus.length;
          }
          $element.addClass("bg-c");
          if(!moveBtnDiv)return;
          //+document.body.scrollLeft+
          moveBtnDivWidth=34*btnCount;
          // console.log("document.body.scrollLeft",document.body.scrollLeft);
          var y =$element.offset().top -document.body.scrollTop;
          var x= utils.getwindowWidth()-10-moveBtnDivWidth; //有bug，table没有全拼暂满时，弹出按钮不能点击bug。 要求table 宽度 100%

          // var x=e.clientX+10; //根据鼠标位置定位，解决上面bug。
          if(x<0)x=0;
          //
          moveBtnDiv.css({
             "position": "fixed",
             "width":moveBtnDivWidth,
             "height":$element.height(),
             "top": y,
             "left": x
           });
          //  console.log("moveBtnDivWidth="+moveBtnDivWidth+",x="+x+",y="+y+",utils.getMainBodyWidth()="+utils.getMainBodyWidth());
          //  console.log("e.pageX="+e.pageX+",e.pageY"+e.pageY);

           $(this).append(moveBtnDiv);


        });//mouseenter
        // 鼠标移出按钮消失
        $($element).mouseleave(function(){
          $(this).removeClass("bg-c");
          moveBtnDiv.remove();
          // for(var i=0;i<btnArray.length;i++){
          //     // $(btnArray[i]).remove();
          // }

        });//mouseleave
      }//link
  };
}

/**
  用户自定义表结构显示。
*/
function customTableTd($sce) {
  return {
    restrict: 'EA',
    scope: {
      item:"=",
    },
    replace: true,
    templateUrl:  Config.tplPath +'tpl/project/customTableTd.html',

          link: function ($scope, element, $attrs) {
            post.trustedBody = $sce.trustAsHtml(post.html_body);

            if ($attrs.customTable) {
                $scope.customTableName=$attrs.customTable;
            }
          }
  };
}

/**
    用户自定义表 可以调整宽度指令
*/
function customTablePrint() {
  return {
    restrict: 'EA',
    scope: false,
    replace: true,
    templateUrl:  Config.tplPath +'tpl/project/customTablePrint.html',
      link: function ($scope, element, $attrs) {
        if ($attrs.customTablePrint) {
            $scope.customTablePrintName=$attrs.customTablePrint;
        }
      }
  };
}

   //添加scope 的公共事件，是否显示，点击事件，等
 function addCommonsEventFnToSope($scope){
   //点击按钮事件，
   $scope.ngClick2=function(ngClick){
        var tmp=$scope.$parent.$eval(ngClick);
          console.log("ngClick2",ngClick,tmp);
    };
       //弹出确认框，取消事件
    $scope.cancelCallback=function(ngClick){
         var tmp=$scope.$parent.$eval(ngClick);
           console.log("cancelCallback",ngClick,tmp);
     };
         //按钮显示执行脚本事件
      $scope.ngShow2=function(ngIf){
         //不填写默认true，允许显示
         if(!ngIf)return true;
         var tmp= $scope.$parent.$eval(ngIf);
        //  console.log("ngShow2",ngIf,tmp);
            return tmp;
      };
                   //按钮是否可操作执行脚本事件
     $scope.ngDisabled2=function(ngIf){
       //不填写默认false，允许操作
          if(!ngIf)return false;
         var tmp= $scope.$parent.$eval(ngIf);
          console.log("ngDisabled2",ngIf,tmp);
          return tmp;
    };
 }
/**
  底部按钮列表
*/
function bottomButtonList() {
  return {
    restrict: 'EA',
    scope: {
      spanClass:"=?",
      bottomButtonList:"=?"
    },
    // replace: true,// true时 导致$scope作用域下，属性添加失效。
    templateUrl:  Config.tplPath +'tpl/project/bottomButtonList.html',
    link: function ($scope, $element, $attrs) {
       //添加scope 的公共事件，是否显示，点击事件，等
      addCommonsEventFnToSope($scope);

      if(!$scope.spanClass) { $scope.spanClass="mgl"; }
      $scope.defalutItemClass="btn btn-primary pr-btn-bg-gold pr-btn-save-glodbg";
    }
  };
}

/**
  查询列表(卡片)条目列表
*/
function queryItemCardButtonList() {
  return {
    restrict: 'EA',
    scope: {
       spanClass:"=?",
        queryItemCardButtonList:"=?"
      },
    // replace: true,// true时 导致$scope作用域下，属性添加失效。
    templateUrl:  Config.tplPath +'tpl/project/queryItemCardButtonList.html',
    link: function ($scope, $element, $attrs) {

          //添加scope 的公共事件，是否显示，点击事件，等
         addCommonsEventFnToSope($scope);
          if(!$scope.spanClass)$scope.spanClass="mgl";
          $scope.defalutItemClass="btn btn-primary pr-btn-bg-gold pr-btn-save-glodbg";
    }
  };
}

/**
    用户自定义表结构-打印显示
*/
function resizableColumns() {
  return {
    restrict: 'EA',

          link: function ($scope, $element, $attrs) {

                        require(['store','resizableColumns'], function(store) {
                              $element.resizableColumns({
                                      store: store
                                    });
                        });
          }//end link
  };
}

/**
 * [addressManageComponent 地址管理组件，包含待选、已选地址列表]
 * @param  {[type]} requestData [注入项]
 * @param  {[type]} utils       [注入项]
 * @return {[type]} [description]
 */
function addressManageComponent (requestData, utils) {
  'use strict';
  return {
    restrict: 'EA',
    scope: {
      formData: '=?',
      requestUrl : '@',
      createAddressType: '@',
      requestDataId: '@',
      invoicesGetCallBack: '&',
      reloadTime: '@',
      modifyModalTitle: '@',
      createModalTitle: '@',
      compnentTitle: '@',
      scopeDataPrefix: '@',
      modifyModalUrl: '@',
      createModalUrl: '@',
      setDefaultAddressRequesturl: '@',
      delThisAddressRequesturl: '@',
      contactsNull: '@'
    },
    replace: true,
    transclude: true,
    templateUrl: Config.tplPath + 'tpl/project/addressManageComponent.html',
    link: function (scope, element, attrs) {

      //客户地址列表是否为空的标识
      scope.contactsNull = false;

      // 监控发货方id变化
      scope.$watch('requestDataId', function (newVal, oldVal) {
        if (newVal && newVal!==oldVal) {
          reLoadData(scope);
        }
      });

      // 监视物流中心id变化
      attrs.$observe('logisticsCenterId', function (newVal, oldVal) {
        if (newVal && newVal != oldVal) {
          scope.logisticsCenterId = newVal;
        }
      });

      // 重新加载数据
      var reLoadData = function (scope) {
        var _reqUrl = scope.requestUrl + '?id=' + scope.requestDataId + '&type=' + scope.createAddressType;
        requestData(_reqUrl, {}, 'get')
        .then(function (results) {
          var _data = results[1];
          if (_data.code === 200 && scope.returnAddressObj) {
            scope.returnAddressObj.contacts = _data.data.contacts;
            if (!_data.data.contacts) {
              scope.formData.contactsNull = true;
            }
          }
        })
        .catch(function (error) {
          console.log(error || '出错');
        });
      };

      //响应重新加载列表数据的操作
      scope.$on('reloadAddressList', function () {
        reLoadData(scope);
      });
    },
    controller: ["$scope", "$element", function ($scope, $element) {

      // 定义已选择地址id，用户选择其他地址后，将选择地址id存入，重新读取地址列表后检测此字符串保持用户已选择的地址
      $scope.choisedItemId = '';

      // 判断默认选中
      $scope.chkDefaultChoise = function (_id) {
        if (!$scope.formData.id) {      // 如果是新建，将该参数id与默认返回地址做比较
          if ($scope.returnAddressObj.choisedItemId && $scope.returnAddressObj.choisedItemId === _id) { return true; }
          if ($scope.returnAddressObj.defaultContactId === _id) { return true; }
        } else {        // 如果是编辑
          // if ($scope.returnAddressObj.choisedItemId && $scope.returnAddressObj.choisedItemId === _id) { return true; }
          if ($scope.returnAddressObj.defaultContactId === _id) { return true;}
        }
      };

      //页面加载数据请求成功后立即执行的回调函数
      $scope.addressGetCallBack = function () {

        if (!$scope.returnAddressObj) return false;

        $scope.scopeDataId = $scope.scopeDataPrefix + 'Id';   // 构建地址id名
        $scope.scopeDataContacts = $scope.scopeDataPrefix + 'Contacts';  // 构建地址对象名

        // 创建发送数据体中的地址id
        if (!$scope.formData[$scope.scopeDataId]) {
          $scope.formData[$scope.scopeDataId] = $scope.returnAddressObj.defaultContactId;
        }

        // 如果为新建则将默认地址信息存入formData数据体，否则将返回数据存入数据体
        var _contacts = $scope.returnAddressObj.contacts;

        if (_contacts && !$scope.choisedItemId) {
          for (var i=0; i<_contacts.length; i++) {
            if ($scope.returnAddressObj.defaultContactId === _contacts[i].id) {
              $scope.formData[$scope.scopeDataContacts] = _contacts[i];
            }
          }
        }

        // if (!$scope.formData.id) {
        //   var _contacts = $scope.returnAddressObj.contacts;
        //
        //   if (_contacts && !$scope.choisedItemId) {
        //     for (var i=0; i<_contacts.length; i++) {
        //       if ($scope.returnAddressObj.defaultContactId === _contacts[i].id) {
        //         $scope.formData[$scope.scopeDataContacts] = _contacts[i];
        //       }
        //     }
        //   }
        // }

        //如果是新添加的一条地址数据，则默认放入数据体中
        if ($scope.returnAddressObj.contacts && $scope.returnAddressObj.contacts.length === 1) {
          $scope.formData[$scope.scopeDataContacts] = $scope.returnAddressObj.contacts[0];
          $scope.formData.contactsNull = false;
        }

        // 如果choisedItemId存在，则表示用户已选择其他地址
        if ($scope.choisedItemId) {
          $scope.returnAddressObj.choisedItemId = $scope.choisedItemId;
        }

      };

      // 构建方法返回当前循环的地址item，用于修改地址信息
      $scope.getCurrentIndexAddress = function (index) {

        if (!$scope.returnAddressObj) return false;

        var _tmpObj = {},   // 返回的数据对象
            _contact = $scope.returnAddressObj.contacts[index],
            _moduleAddressId = $scope.scopeDataPrefix + 'AddressId';  // 构建模块id名

        _tmpObj[_moduleAddressId] = $scope.returnAddressObj.id;
        _tmpObj.defaultContactId = $scope.returnAddressObj.defaultContactId;
        _tmpObj.contact = _contact;
        _tmpObj.type = $scope.createAddressType;  // 类型
        _tmpObj.title = $scope.modifyModalTitle;  // 标题

        // 存入物流中心id
        _tmpObj.logisticsCenterId = $scope.logisticsCenterId;

        return _tmpObj;
      };

      // 返回新建地址信息数据对象
      $scope.returnCreateNewAddressObj = function () {

        var _tmpObj = {},   // 返回的数据对象
            _moduleAddressId = $scope.scopeDataPrefix + 'AddressId';  // 构建模块id名

        if ($scope.returnAddressObj) {
          _tmpObj[_moduleAddressId] = $scope.returnAddressObj.id;
        }

        _tmpObj.type = $scope.createAddressType;

        // 根据设置存入标题
        _tmpObj.title = $scope.createModalTitle;

        // 存入物流中心id
        _tmpObj.logisticsCenterId = $scope.logisticsCenterId;

        _tmpObj.contact = {};

        return _tmpObj;
      };

      // 用户点击后选择其他地址
      $scope.choiseOtherItem = function (item, _requestDataId) {
        $scope.formData[$scope.scopeDataId] = _requestDataId;
        $scope.formData[$scope.scopeDataContacts] = item;
        $scope.choisedItemId = item.id;
        // console.log($scope.formData);
      };

      // 设置当前地址为默认地址
      $scope.setThisAddressToDefault = function (contactId) {
        // var _moduleAddressId = $scope.scopeDataPrefix + 'AddressId';  // 构建模块id名
        var _moduleAddressId = 'invoicesAddressId';  // 构建模块id名
        var _data = {};
        // _data[_moduleAddressId] = $scope.returnAddressObj.id;
        _data.id = $scope.returnAddressObj.id;     // 新版多仓库改动，将原Id名更改为id
        _data.contactId = contactId;

        requestData($scope.setDefaultAddressRequesturl, _data, 'POST')
        .then(function (results) {
          // ....
        })
        .catch(function (error) {
          if (error) {
            console.log(error || '出错!');
          }
        });
      };
    }]//controller
  };
}

/**
 * [expressManageComponent 物流信息组件]
 * @param  {[type]} requestData [注入项]
 * @param  {[type]} utils       [注入项]
 * @return {[type]}             []
 */
function expressManageComponent (requestData, utils) {
  'use strict';
  return {
    restrict: 'EA',
    scope: {
      expressData: '=?',  // 请求的物流信息对象
      saveExpressUrl: '@',    // 保存新的物流信息请求Url
      delExpressUrl: '@',    // 删除物流信息请求Url
      orderId: '@'    // 当前单据id
    },
    replace: true,
    transclude: true,
    templateUrl: Config.tplPath + 'tpl/project/expressManageComponent.html',
    link: function (scope, element, attrs) {
      // 如果快递数据未定义
      if (!angular.isDefined(attrs.expressData)) {
        throw new Error('Attr expressData must be defined!');
      }

      //编辑物流信息
      scope.editThisAreaInfo = function (item, id) {
        //获取当前物流信息id名
        var _expressId = 'express-details-' + id;

        $('#'+_expressId).find('div.show-express-info').hide();
        $('#'+_expressId).find('div.edit-express-info').css('top',0);

      };

      //取消编辑物流信息
      scope.cancelEditExpress = function (id) {
        //获取当前物流信息id名
        var _expressId = 'express-details-' + id;

        $('#'+_expressId).find('div.show-express-info').show();
        $('#'+_expressId).find('div.edit-express-info').css('top','-9999px');
      };

    },
    controller: ['$scope', '$element', function ($scope, $element) {

      //保存新的快递信息
      $scope.saveExpressInfo = function (params) {
        var _data = angular.isObject(params) ? params : '';
        var saveUrl = $scope.saveExpressUrl;
        if (_data) {
          requestData(saveUrl, _data, 'POST')
          .then(function (results) {
            if (results[1].code === 200) {
              utils.goOrRefreshHref();
            }
          })
          .catch(function (error) {
            console.log(error || '出错');
          });
        }
      };
    }]
  };
}

/**
 * [pageMainHeaderComponent 模块主内容区域头部通组件]
 * @return {[type]} [description]
 */
function pageMainHeaderComponent () {
  'use strict';
  return {
    restrict: 'EA',
    scope: {
      listParams: '=?',             // 请求查询的参数对象
      crumbsNav: '@',               // 面包屑导航
      componentTitle: '@',          // 头部标题
      createNewUrl: '@',            // 新建URL
      getStatusNumUrl: '@',         // 获取所有单据状态数量URL
      statusGroupData: '@',         // 状态显示数据对象
      getBusinessTypeUrl: '@',      // 获取业务类型查询字段Url
      isShowSelectItem: '@',
      searchPlaceholderInfo: '@',
      getWarehouseListUrl: '@'
    },
    replace: true,
    transclude: true,
    templateUrl: Config.tplPath + 'tpl/project/pageMainHeaderComponent.html',
    link: function (scope, element, attrs) {

      //处理面包屑导航数据
      if (scope.crumbsNav) {
        //将面包屑字符串转换为JSON对象
        var _crumbObj = angular.fromJson(scope.crumbsNav);
        //构建面包屑html代码
        scope.crumbsCode = '';
        angular.forEach(_crumbObj, function (data, index) {
          if ((index+1) !== _crumbObj.length) {   // 不是最后一个
            scope.crumbsCode += '<span class="mgr-s ' + data.style + '">' + data.name + '</span><span class="fa fa-angle-right mgr-s"></span>';
          } else {    //最后一个
            scope.crumbsCode += '<span class="mgr-s ' + data.style + '">' + data.name + '</span>';
          }
        });
        //将代码插入id为crumbsNav的父容器中
        $('#crumbsNav').append(scope.crumbsCode);
      }

      //状态按钮组格式化数据对象
      if (scope.statusGroupData) {
        scope.statusGroupList = angular.fromJson(scope.statusGroupData);
      }

      //拆分数据显示
      scope.splitStringData = function (str) {
        var _tmp = str.split('-');
        _tmp[1] = Boolean(_tmp[1]);
        return _tmp;
      };

      // 处理显示下拉选择功能
      if (scope.isShowSelectItem) {
        scope.selectObj = angular.fromJson(scope.isShowSelectItem);
        scope.itemChooise = scope.selectObj[0].link;
      }

      //是否显示新建按钮
      scope.isShowCreateBtn = angular.isDefined(attrs.isShowCreateBtn) ? attrs.isShowCreateBtn : false;

      //是否显示类型过滤
      scope.isShowTypeFilter = angular.isDefined(attrs.isShowTypeFilter) ? attrs.isShowTypeFilter : false;

      //是否显示仓库过滤
      scope.isShowWarehouseFilter = angular.isDefined(attrs.isShowWarehouseFilter) ? attrs.isShowWarehouseFilter : false;

      //是否显示日期过滤
      scope.isShowDateFilter = angular.isDefined(attrs.isShowDateFilter) ? attrs.isShowDateFilter : false;

      // 是否显示关键字过滤
      scope.isShowKeyFilter = angular.isDefined(attrs.isShowKeyFilter) ? attrs.isShowKeyFilter : false;

      // 是否显示单据状态筛选按钮组模块
      scope.isShowBusinessBtnGroup = angular.isDefined(attrs.isShowBusinessBtnGroup) ? attrs.isShowBusinessBtnGroup : false;

      // 关键字搜索中提示信息定义
      scope.searchPlaceholderInfo = angular.isDefined(attrs.searchPlaceholderInfo) ? attrs.searchPlaceholderInfo : '客户名 / 单据编号';

    }
  };
}

/**
 * [expressBtnToggle 销售出库单中快递模块的删除和编辑域响应hover事件]
 * @return {[type]} [description]
 */
function expressBtnToggle () {
  'use strict';
  return {
    restrict: 'A',
    scope: true,
    link: function (scope, element, attrs) {

      $(element).find('a.origin-ele').hover(function () {
        $(this).next().show();
      }, function () {
        $(this).next().hide();
      });

      $(element).find('div.edit-del-btn').hover(function () {
        $(this).show();
      }, function () {
        $(this).hide();
      });

      $(element).find('a.handle-edit-info').on('click', function (event) {
        event.stopPropagation();    // 组织冒泡

        $(element).find('div.show-express-info').hide();
        $(element).find('div.edit-express-info').css('top',0);
      });

      $(element).find('a.cancel-edit-express').on('click', function (event) {
        event.stopPropagation();    // 组织冒泡

        $(element).find('div.show-express-info').show();
        $(element).find('div.edit-express-info').css('top','-9999px');
      });
    }
  };
}

/**
 * [requestExpressInfoTab 销售出库单中物流信息dialog切换快递请求数据]
 * @return {[type]} [description]
 */
function requestExpressInfoTab (requestData, alertError) {
  'use strict';
  return {
    restrict: 'A',
    scope: {
      expressInfoList: '='
    },
    link: function (scope, element, attrs) {

      $(element).on('click', function (e) {
        //阻止事件冒泡
        e.stopPropagation();
        //替换样式
        $(this).addClass('active').parent().siblings().each(function () {
          $(this).children().removeClass('active');
        });
        //切换
        var _idArray = [];
        $(element).parent().siblings().each(function () {
          var _childId = $(this).children().attr('id');
          _idArray.push('tabContent' + _childId);
        });

        //隐藏其他页面信息
        angular.forEach(_idArray, function (data, index) {
          $('#'+data).addClass('pr-dpy-none');
        });

        //显示当前列表
        $('#tabContent' + attrs.id).removeClass('pr-dpy-none');
      });
    }
  };
}

/**
 * [tableItemMultipleBtn 医院信息管理表格多个操作按钮菜单]
 * @param  {[type]} utils [description]
 * @return {[type]}       [description]
 */
function tableItemMultipleBtn (utils, requestData) {
  'use strict';
  return {
    restrict: 'A',
    scope: true,
    link: function (scope, element, attrs) {

      // 操作按钮组
      var _handleBtnGroup = $(element).find('div.table-item-multiple-btn');
      // 删除按钮
      var _delBtn = $(element).find('div.del-details-btn');
      // 其他操作按钮
      var _handleBtn = $(element).find('div.other-handle-btn');
      // 取消删除按钮
      var _cancelDel=$(element).find('.hide-this-area');



      // 绑定点击显示操作删除层
      _delBtn.on('click', function () {
        $('.del-confirm-area').show();
        });

      // 绑定点击显示其他操作层
      _handleBtn.on('click', function () {
        $('.handle-area-show').show();
      });

      // 绑定取消按钮事件
      $(element).find('.hide-this-area').on('click', function (e) {
        e.stopPropagation();
        $(element).find('div.del-confirm-area').hide();
      });

      element.hover(function () {
        // 计算当前tr距离顶部的高度
        var _offsetTop = $(element).offset().top - document.body.scrollTop + 23;
        // 计算当前页面宽度
        var _pageWidth = utils.getMainBodyWidth() - 23;

        _handleBtnGroup.css({'position':'fixed','top':_offsetTop,'left':_pageWidth}).show();

      }, function () {
        _handleBtnGroup.css({'position':'absolute','top':0,'left':0}).hide();
        $('.del-confirm-area').hide();
        $('.handle-area-show').hide();
      });

      // 执行删除操作
      scope.handleDelDetails = function (id, requestUrl, callbackUrl) {
        if (id && requestUrl && callbackUrl) {
          var _url = requestUrl + '?id=' + id;
          requestData(_url, {}, 'POST')
          .then(function (results) {
            if (results[1].code == 200) {
              utils.goTo(callbackUrl);
            }
          })
          .catch(function (error) {
            if (error) { throw new Error(error); }
          });
        }
      };
    }
  };
}


angular.module('manageApp.project')

  .directive("tableItemMultipleBtn", ['utils', 'requestData', tableItemMultipleBtn])   // 医院信息管理表格多个操作按钮菜单
  .directive("pageMainHeaderComponent", pageMainHeaderComponent)
  .directive("expressManageComponent", ['requestData', 'utils', expressManageComponent])
  .directive("tableItemHandlebtnComponent", ['utils', tableItemHandlebtnComponent])
  .directive("requestExpressInfoTab", ['requestData', 'alertError', requestExpressInfoTab])
  .directive("expressBtnToggle", [expressBtnToggle])
  .directive("htmlEdit", [ htmlEdit]) //html-edit
  .directive("textareaJson", ['utils', 'alertError', textareaJson]) //textarea-json
  .directive("addressManageComponent", ['requestData', 'utils', addressManageComponent])  //地址管理组件，包含待选、已选地址列表
  .directive("attachmentsItemShow", [attachmentsItemShow])//附件文件显示
  .directive("attachmentsShow", [attachmentsShow])//附件只读显示
  .directive("attachmentsEdit", [attachmentsEdit])//附件上传编辑
  .directive("bottomButtonList", [bottomButtonList])//底部自定义菜单
  .directive("queryItemCardButtonList", [queryItemCardButtonList])//查询页面菜单
  .directive("customTablePrint", [customTablePrint])
  .directive("resizableColumns", [resizableColumns])//  用户自定义表 可以调整宽度指令
  .directive("customTable", [customTable])
  .directive("flashAddMedical", ["utils","$timeout",flashAddMedical])
  .directive("angucompleteMedicalStockBatch", ["$parse", "requestData", "$sce", "$timeout",angucompleteMedicalStockBatch])
  .directive("angucompleteMedical", ["$parse", "requestData", "$sce", "$timeout",angucompleteMedical])
  .directive("angucompleteSupplier", ["$parse", "requestData", "$sce", "$timeout",angucompleteSupplier])
  .directive("modalImgShow", ["modal","utils",modalImgShow])//显示原图
  .directive("datePeriodSelect", [datePeriodSelect])
  .directive("umeditor", ["$timeout",umeditor])  // html编辑器
  .directive("salesorderEditShowDelbtn", [salesorderEditShowDelbtn])
  .directive("handleTextOverflow", [handleTextOverflow])  // 卡片式列表页面内容超出范围的处理(动态宽度)
  .directive("hospitalPurchaseComeinEdit", [hospitalPurchaseComeinEdit])  //医院采购目录点击进入编辑模式事件处理
  .directive("saleOutStockKuaDi", [saleOutStockKuaDi])  //销售出库单快递侧边栏显示
  .directive("lodopFuncs", ["modal","utils",lodopFuncs])//打印组件
  .directive("canvasBusinessFlow", ["modal","utils",canvasBusinessFlow])//业务单流程图形展示-canvas
  .directive("businessFlowShow", [businessFlowShow])//业务单流程展示
  .directive("canvasWorkflow", ["modal","utils",canvasWorkflow])//工作流编辑
  .directive("queryOrderStatusButton", queryOrderStatusButton)//查询页面，查询条件：状态按钮
  .directive("intervalCountdown", ["$interval",intervalCountdown])//倒计时标签
  .directive("workflowRejectButton",  ['utils', workflowRejectButton])//工作流配置自定义菜单 驳回
  .directive("workflowPassButton",  ['utils', workflowPassButton])//工作流配置自定义菜单 通过
  .directive("workflowButtonQueryCard",  ['utils', workflowButtonQueryCard])//工作流配置菜单 查询列表使用
  .directive("customMenuList",  ['utils', customMenuList])//自定义菜单。列表显示
  .directive("workflowTaskRunWithAttchments",  ['utils', workflowTaskRunWithAttchments])//待附件审查
  .directive("orderMedicalsPurchase", orderMedicalsPurchase)//药械订单列表-采购
  .directive("orderMedicals", orderMedicals)//药械订单列表
  .directive("niceScroll", niceScroll) //滚动条美化
  .directive("leftMenuChange", ['$location', leftMenuChange]) //左边栏子菜单点击事件
  .directive("leftMenuToggle", ['$location', leftMenuToggle])  //左边栏一级菜单伸缩
  .directive("orderStatusChoise", orderStatusChoise) //订单列表首页订单状态按钮切换样式
  .directive("orderListTips", orderListTips) //订单页头导航按钮点击事件处理
  .directive("toggleLeftMenu", toggleLeftMenu) //点击展开隐藏左边栏
  .directive("togglePanel", togglePanel) //面板点击收起、展开与关闭
  .directive("morris", morris) //morris图表展示
  .directive("icheck", icheck) //iCheck
  .directive("sparkline", sparkline) //sparkline 柱状图
  .directive("runTooltips", runTooltips) //tooltips
  .directive("runPopovers", ['$timeout', runPopovers]) //popover
  .directive("handleThisClick", ['$window', 'dialogConfirm', 'requestData', 'alertOk', 'alertError','utils', handleThisClick]) //带确认对话框的按钮点击事件
  .directive("leftMenuSecondToggle", ['$location',"$rootScope", leftMenuSecondToggle]) //左侧二级菜单切换效果
  .directive("leftNavigationMenu", [ leftNavigationMenu]) //html-edit
  .directive("styleToggle", ['$location', styleToggle])
  .directive("leftSideActive",[leftSideActive])//库存页面侧边导航样式
  .directive("tableTrMouseOverMenu",["utils","$compile","customMenuUtils",tableTrMouseOverMenu])  // tableTrMouseOverMenu table标签，移动上去显示菜单按钮。
  .directive("medicalStockMouseOver",["utils",medicalStockMouseOver])// 库存明细模块，鼠标移入高亮并显示两个按钮
  .directive("stepFlowArrowShow",["utils",stepFlowArrowShow])//医院、经销商/零售商资格申请，首营品种、企业管理模块流程箭头样式。
  .directive("limitWordShow",["utils",limitWordShow]);//弹出框显示限制剩余字数
});

/**
 * Created by hao on 16/1/7.
 */
define('project/filters', ['project/init'], function () {


      /** 数字金额大写转换(可以处理整数,小数,负数) */
        function upDigit(){
          return function(n){
            if(!n)return "";
              var fraction = ['角', '分'];
              var digit = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'];
              var unit = [ ['元', '万', '亿'], ['', '拾', '佰', '仟']  ];
              var head = n < 0? '欠': '';
              n = Math.abs(n);

              var s = '';

              for (var i = 0; i < fraction.length; i++)
              {
                  s += (digit[Math.floor(n * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, '');
              }
              s = s || '整';
              n = Math.floor(n);

              for (i = 0; i < unit[0].length && n > 0; i++)
              {
                  var p = '';
                  for (var j = 0; j < unit[1].length && n > 0; j++)
                  {
                      p = digit[n % 10] + unit[1][j] + p;
                      n = Math.floor(n / 10);
                  }
                  s = p.replace(/(零.)*零$/, '').replace(/^$/, '零')  + unit[0][i] + s;
              }
              return head + s.replace(/(零.)*零元/, '元').replace(/(零.)+/g, '零').replace(/^整$/, '零元整');
          };
        }//end upDigit

        /**
         * [repeatFilter 应用于ng-repeat中的过滤器，过滤掉值等于0的项]
         * @return {[type]} [description]
         */
        function repeatFilter () {
          return function (array) {
            var tmp = [];
            angular.forEach(array, function (item, index) {
              // return item.returnQuantity !== 0;
              if (item.returnQuantity !== 0) {
                tmp.push(item);
              }
            });
            return tmp;
          };
        }


    angular.module('manageApp.project')
    .filter('upDigit',upDigit)
    .filter('repeatFilter', repeatFilter);
});

/**
 * Created by hao on 15/11/11.
 */
define('project/init', ['angular'], function () {
    angular.module('manageApp.project', []);
});
/**
 * Created by hao on 15/11/5.
 */

define('project/registration',['angular'], function () {

  /**
   *  注册模块入口文件
   */

  angular.module('manageApp.registration',[])
  /**
   *  路由
   */
  .config(['$routeProvider', function ($routeProvider) {
    'use strict';
    $routeProvider
      .when('/verify_phone', {
        templateUrl: 'angular/tpl/registration/verify_phone.html',
        controller: 'registrationCtrl'
      })
      .when('/send_info', {
        templateUrl: 'angular/tpl/registration/send_info.html',
        controller: 'registrationCtrl'
      })
      .when('/apply_bind', {
        templateUrl: 'angular/tpl/registration/apply_bind.html',
        controller: 'registrationCtrl'
      })
      .when('/bind_done', {
        templateUrl: 'angular/tpl/registration/bind_done.html',
        controller: 'registrationCtrl'
      })
      .when('/retrievepwd', {
        templateUrl: 'angular/tpl/retrieve-pwd/retrievepwd.html',
        controller: 'registrationCtrl'
      })
      .when('/resetpwd', {
        templateUrl: 'angular/tpl/retrieve-pwd/resetpwd.html',
        controller: 'registrationCtrl'
      })
      .otherwise({redirectTo: '/verify_phone'});
  }])

  /**
   *  注册模块控制器 - 点击发送验证码
   */
  .controller('registrationCtrl', ['$scope', 'requestData', '$interval', '$rootScope', '$location', function ($scope, requestData, $interval, $rootScope, $location) {
    'use strict';
    // 定义全局对象
    $scope.globalData = {
      requestUrlHead: ''
    };

    // 定义验证码发送状态
    $scope.sendVerifyCodeStatus = false;

    $scope.countdown = function (second) {
      $scope.second = second;
        $interval(function () {
          if ($scope.second >= 1) {
            $scope.second -= 1;
          } else {
            clearInterval();
            $scope.sendVerifyCodeStatus = false;
            $rootScope.verifyResult.phone = true;
          }
        }, 1000);
    };

    // 发送验证码
    $scope.sendRegVerifyCode = function () {
      if ($scope.regData.phone) {
        // 状态改变
        $scope.sendVerifyCodeStatus = true;
        // 执行倒计时
        $scope.countdown(59);
        // 请求验证码，区分是否是新用户(注册与其他场景应用)
        var _url = '';
        if ($location.path() === '/verify_phone') {     // 新用户注册
          _url = $scope.mainConfig.serverPath + 'rest/sms/sendVerificationCode.json?isNewUser=true&tel='+ $scope.regData.phone;
          requestData(_url, {})
            .then(function (results) {
              var _data = results[0];
              $scope.validCode = _data.code;
            }).catch(function (msg) {
              $scope.verifyResult.phone = false;
              $scope.verifyResult.msg = msg;
              if ($('.reg-info-prompt').css('display') !== 'none') {
                $scope.verifyResult.msg = msg;
              } else {
                $('.reg-info-prompt').fadeIn(500);
              }
            });
        }
        if ($location.path() === '/retrievepwd') {      // 用户找回密码
          _url = $scope.mainConfig.serverPath + 'rest/sms/sendVerificationCode.json?isNewUser=false&tel='+ $scope.regData.phone;
          requestData(_url, {})
            .then(function (results) {
              var _data = results[0];
              $scope.validCode = _data.code;
            })
            .catch(function (msg) {
              $scope.verifyResult.phone = false;
              $scope.verifyResult.msg = msg;
              if ($('.reg-info-prompt').css('display') !== 'none') {
                $scope.verifyResult.msg = msg;
              } else {
                $('.reg-info-prompt').fadeIn(500);
              }
            });
        }
      }
    };

    // 注册提交
    $scope.bind_done = function () {
        window.location.assign('#/bind_done');
    };

    // 注册提交
    $scope.regSubmit = function () {
      if ($scope.regData) {
        var _url = $scope.mainConfig.serverPath + 'rest/index/register',
            _params = $scope.regData,
            _method = 'POST';
        requestData(_url, _params, _method)
          .then(function (results) {
            var _data = results[1];
            if (_data.code === 200) {
              $('.reg-success-prompt').fadeIn(500);
              setTimeout(function(){
                window.location.href = '#/apply_bind';
              }, 1500);
            }
        }).catch(function (msg) {
          $scope.verifyResult.phone = false;
          $scope.verifyResult.msg = msg;
          if ($('.reg-info-prompt').css('display') !== 'none') {
            $scope.verifyResult.msg = msg;
          } else {
            $('.reg-info-prompt').fadeIn(500);

          }
        });
      }
    };

    // 重置密码提交
    $scope.resetPwdSubmit = function () {
      if ($scope.regData) {
        var _url = $scope.mainConfig.serverPath + 'rest/index/forgetPassword',
            _params = $scope.regData,
            _method = 'POST';
        requestData(_url, _params, _method)
          .then(function (results) {
            var _data = results[1];
            if (_data.code === 200) {
              $('.reg-success-prompt').fadeIn(500);
              setTimeout(function(){
                $scope.pageTo('login.html');
              }, 1500);
            }
        }).catch(function (msg) {
          $scope.verifyResult.phone = false;
          $scope.verifyResult.msg = msg;
          if ($('.reg-info-prompt').css('display') !== 'none') {
            $scope.verifyResult.msg = msg;
          } else {
            $('.reg-info-prompt').fadeIn(500);

          }
        });
      }
    };
  }])
  /**
   *  注册模块过滤器
   */
  .filter('registrationFilter', [function () {
    // 这里定义多个过滤器
  }])
  // /**
  //  *  注册模块服务 - 发送数据请求
  //  */
  .service('registrationService', [function () {

  }])
  /**
   *  注册模块静态值服务
   */
  .value('registrationValue', [function () {
    // 这里定义多个静态值
  }])
  /**
   *  注册模块自定义指令 - 检查用户输入的手机号码
   */
  .directive('regCheckPhone', ['$rootScope', 'requestData', function ($rootScope, requestData) {
    'use strict';
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, element, attrs, ngModel) {
        if (!$rootScope.verifyResult) {
          $rootScope.verifyResult = {};
        }

        element.on('keyup', function () {
          if ($(element).val().length === 11) {
            //去掉空格
            ngModel.$viewValue = $.trim(ngModel.$viewValue);
            // 格式校验
            if (!(/^1(3|4|5|7|8)\d{9}$/.test(ngModel.$viewValue))) {
              $rootScope.verifyResult.phone = false;
              $rootScope.verifyResult.msg = '手机号码不能为空或格式不正确';
              if ($('.reg-info-prompt').css('display') === 'none') {
                $('.reg-info-prompt').fadeIn(500);
                $(element).focus();
              }
            } else {
              // 有效性校验
              var _validUrl = scope.mainConfig.serverPath + 'rest/index/user/isExist?phone=' + ngModel.$viewValue;
              requestData(_validUrl, {}, 'GET')
                .then(function (results) {
                  if (results[1].code === 200) {
                    $rootScope.verifyResult.phone = true;
                    $rootScope.verifyResult.phoneNumber = ngModel.$viewValue;
                    // 号码可注册清除提示信息
                    if ($('.reg-info-prompt').css('display') !== 'none') {
                      $('.reg-info-prompt').fadeOut(200);
                    }
                    // 获取验证码按钮可点击
                    if ($('#getVerifyCodeBtn').attr('disabled') == 'disabled') {
                      $('#getVerifyCodeBtn').removeAttr('disabled');
                    }
                  }
                })
                .catch(function (msg) {
                  $rootScope.verifyResult.phone = false;
                  $rootScope.verifyResult.msg = msg;
                  if ($('.reg-info-prompt').css('display') !== 'none') {
                    $rootScope.verifyResult.msg = msg;
                  } else {
                    $('.reg-info-prompt').fadeIn(500);
                    $(element).focus();
                  }
                });
            }
          } else {
            // 获取验证码不可点击
            $('#getVerifyCodeBtn').attr('disabled', 'disabled');
            // 下一步不可点击
            $('button[type="submit"]').attr('disabled', 'disabled');
          }
        });
      }
    };
  }])
  /**
   *  校验验证码
   */
  .directive('regCheckVerifyCode', ['requestData', '$rootScope', function (requestData, $rootScope) {
    'use strict';
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, element, attrs, ngModel) {
        element.on('keyup', function () {
          var _val = ngModel.$viewValue.toString();
          if (_val.length === 4) {
            var _rUrl = scope.mainConfig.serverPath + 'rest/sms/verifySmsCodey.json',
                _params = {
                  tel: scope.regData.phone,
                  code: scope.regData.verifyCode
                };
            requestData(_rUrl, _params, 'POST')
              .then(function (results) {
                if (results[1].code === 200) {
                  $rootScope.verifyResult.verifyCode = true;
                  $rootScope.verifyResult.phone = true;
                  if ($('.reg-info-prompt').css('display') !== 'none') {
                    $('.reg-info-prompt').fadeOut(200);
                  }
                }
              })
              .catch(function (msg) {
                $rootScope.verifyResult.verifyCode = false;
                $rootScope.verifyResult.msg = msg;
                if ($('.reg-info-prompt').css('display') !== 'none') {
                  $rootScope.verifyResult.msg = msg;
                } else {
                  $('.reg-info-prompt').fadeIn(500);
                  $(element).focus();
                }
              });
          }
        });
      }
    };
  }])
  /**
   *  校验密码及确认密码
   */
  .directive('regCheckPassword', ['$rootScope', function ($rootScope) {
    'use strict';
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, element, attrs, ngModel) {
        if (!$rootScope.verifyResult) {
          $rootScope.verifyResult = {
            msg: '',
            password: false,
            repassword: false
          };
        }

        element.on('keyup', function (event) {
          if (event.keyCode !== 16) {   //屏蔽shift键
            if (attrs.name === 'password') {
              $rootScope.verifyResult = {
                msg: '密码应在6~32位之间且可包含大小写字母、数字、下划线和中划线'
              };
              var _passwordInput = $.trim($(element).val());
              if (_passwordInput.length >= 6) {
                if (!(/[A-Za-z0-9_-]{6,32}/.test(ngModel.$viewValue))) {
                  $rootScope.verifyResult.password = false;
                  $rootScope.verifyResult.repassword = false;
                  if ($('.reg-info-prompt').css('display') === 'none') {
                    $('.reg-info-prompt').fadeIn(200);
                    $(element).focus();
                    return;
                  }
                } else {
                  $rootScope.verifyResult.password = true;
                  if ($('.reg-info-prompt').css('display') !== 'none') {
                    $('.reg-info-prompt').fadeOut(200);
                  }
                }
              }
            }

            if (attrs.name === 'repassword') {
              if ($rootScope.verifyResult.password === false) {
                $rootScope.verifyResult.msg = '密码应在6~32位之间且可包含大小写字母、数字、下划线和中划线';
                if ($('.reg-info-prompt').css('display') === 'none') {
                  $('.reg-info-prompt').fadeIn(200);
                  $(element).focus();
                  return;
                }
              } else {
                $rootScope.verifyResult = {
                  msg: '两次输入的密码不一致',
                  password: true,
                  repassword: false
                };
                var _repasswordInput = $.trim($(element).val());
                if (_repasswordInput.length >= 6) {
                  if (scope.regData.password !== scope.regData.repassword) {
                    $rootScope.verifyResult.msg = '两次输入的密码不一致';
                    if ($('.reg-info-prompt').css('display') === 'none') {
                      $('.reg-info-prompt').fadeIn(200);
                      $(element).focus();
                      return;
                    }
                  } else {
                    $rootScope.verifyResult.repassword = true;
                    if ($('.reg-info-prompt').css('display') !== 'none') {
                      $('.reg-info-prompt').fadeOut(200);
                    }
                  }
                }
              }
            }
          }
        });



        // element.on('blur', function () {
        //   if (attrs.name === 'password') {    // 校验密码
        //     if (!(/[A-Za-z0-9_-]{6,32}/.test(ngModel.$viewValue))) {
        //       $rootScope.verifyResult.password = false;
        //       $rootScope.verifyResult.msg = '密码应在6~32位之间且可包含大小写字母、数字、下划线和中划线';
        //       if ($('.reg-info-prompt').css('display') === 'none') {
        //         $('.reg-info-prompt').fadeIn(500);
        //         $(element).focus();
        //       }
        //     } else {
        //       if ($('.reg-info-prompt').css('display') !== 'none') {
        //         $('.reg-info-prompt').fadeOut(200);
        //       }
        //       $rootScope.verifyResult.password = true;
        //     }
        //   }
        //
        //   if (attrs.name === 'repassword') {    // 校验重复密码
        //     if ((scope.regData.password !== scope.regData.repassword) && verifyResult.password === false) {
        //       $rootScope.verifyResult.repassword = false;
        //       $rootScope.verifyResult.msg = '两次输入的密码不一致';
        //       if ($('.reg-info-prompt').css('display') === 'none') {
        //         $('.reg-info-prompt').fadeIn(500);
        //       }
        //     } else {
        //       if ($('.reg-info-prompt').css('display') !== 'none') {
        //         $('.reg-info-prompt').fadeOut(200);
        //       }
        //       $rootScope.verifyResult.repassword = true;
        //     }
        //   }
        // });
      }
    };
  }])
  /**
   *  校验用户名
   */
  .directive('regCheckName', ['$rootScope', function ($rootScope) {
    'use strict';
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, element, attrs, ngModel) {
        if (!$rootScope.verifyResult) {
          $rootScope.verifyResult = {};
        }

        element.on('keydown', function () {
          var _input = ngModel.$viewValue;
          if (_input !== undefined && _input.length > 16) {
            $rootScope.verifyResult.name = false;
            $rootScope.verifyResult.msg = '用户名为必填项且长度应在1~16位之间';
            if ($('.reg-info-prompt').css('display') === 'none') {
              $('.reg-info-prompt').fadeIn(500);
              $(element).focus();
            }
            return;
          }
          $rootScope.verifyResult.name = true;
          if ($('.reg-info-prompt').css('display') !== 'none') {
            $('.reg-info-prompt').fadeOut(200);
          }
        });
      }
    };
  }])
  /**
   *  找回密码功能手机号码校验
   */
  .directive('repwdCheckPhone', ['$rootScope', 'requestData', function ($rootScope, requestData) {
    'use strict';
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, element, attrs, ngModel) {
        if (!$rootScope.verifyResult) {
          $rootScope.verifyResult = {};
        }

        element.on('keyup', function () {
          if ($(element).val().length === 11) {
            //去掉空格
            ngModel.$viewValue = $.trim(ngModel.$viewValue);
            // 格式校验
            if (!(/^1(3|4|5|7|8)\d{9}$/.test(ngModel.$viewValue))) {
              $rootScope.verifyResult.phone = false;
              $rootScope.verifyResult.msg = '手机号码不能为空或格式不正确';
              if ($('.reg-info-prompt').css('display') === 'none') {
                $('.reg-info-prompt').fadeIn(500);
                $(element).focus();
              }
            } else {
              // 有效性校验
              var _validUrl = scope.mainConfig.serverPath + 'rest/index/user/isExist?phone=' + ngModel.$viewValue;
              requestData(_validUrl, {}, 'GET')
                .then(function (results) {
                  if (results[1].code === 200) {      //未注册的手机号码
                    $rootScope.verifyResult.phone = false;
                    $rootScope.verifyResult.msg = '该手机号码未注册';
                    if ($('.reg-info-prompt').css('display') === 'none') {
                      $('.reg-info-prompt').fadeIn(200);
                    }
                  }
                })
                .catch(function (msg) {
                  $rootScope.verifyResult.phone = true;
                  $rootScope.verifyResult.msg = '';
                  $rootScope.verifyResult.phoneNumber = ngModel.$viewValue;
                  if ($('.reg-info-prompt').css('display') !== 'none') {
                    $('.reg-info-prompt').hide();
                  }
                  // 获取验证码按钮可点击
                  if ($('#getVerifyCodeBtn').attr('disabled') == 'disabled') {
                    $('#getVerifyCodeBtn').removeAttr('disabled');
                  }
                });
            }
          } else {
            // 获取验证码不可点击
            $('#getVerifyCodeBtn').attr('disabled', 'disabled');
            // 下一步不可点击
            $('button[type="submit"]').attr('disabled', 'disabled');
          }
        });
      }
    };
  }]);
});

/**
 * Created by hao on 15/11/18.
 */
define('project/services', ['project/init'], function () {
  /**
   *  项目自定义顶部fixed消息提示tips
   *  Mode: 1.success 2.error 3.prompt(提示)
   */
  function proMessageTips () {
    return function (mode, text, clearTime) {
      var _mode = mode ? mode : 'prompt',
          _text = text ? text : '';
      var _html = '<div class="pr-top-dialog-tips" style="position:fixed;left:50%;top:0;opacity:0;height:42px;line-height:42px;padding:0 15px;color:#fff;background-color:#64c213;animation:topIn 1s;">'+ test +'</div>';
      $(html).append(_html);
    };
  }

          //Loading  bottomButtonList
          //  <a class="{{tr.aclass}}" href="{{tr.ahref}}">{{tr.showName}}</a>
          /**
          bottomButton ={
          aclass ："",//样式，
          ahref："",//连接，
          ngClick:"",//执行函数
          "target":"_blank" //_blank|_self|_parent|_top
          showName："",必填。显示名
          type:"",modalRight(右侧弹出框)，modalCenter（中间弹出框），button（button按钮标签）不填写则为跳转类型。handleThisClick(确认操作框),ngClick(执行函数)
          authority:""，不为空，当前用户有该权限，才能显示。
          ngShow:"",//根据计算脚本布尔值是否显示按钮，angluarjs 模版语法脚本。不填写默认显示
          ngDisabled:""//根据计算脚本布尔值是否可点击按钮,angluarjs 模版语法脚本。不填写默认 可操作。仅type=button
              alertTemplate：type=handleThisClick,填写弹出框的模版地址。
          requestUrl:type=handleThisClick,填写确认后调用请求。
          httpMethod:POST|GET，type=handleThisClick,填写确认后调用请求的请求方式，默认POST
          alertTitle:'确认',type=handleThisClick,标题，默认POST
          alertMsg:"确定该操作",type=handleThisClick,内容，默认POST



        } 属性说明：
          */
          function bottomButtonList ($rootScope) {

              var tmpUtils=  {
                  //业务逻辑判断，是否显示菜单
                  canShowButton:function(bottomButton){

                    if(bottomButton.authority){//当前用户有权限才添加
                      if($rootScope.hasAuthor(bottomButton.authority)){
                           return true;
                      }else{  //没有权限不添加
                        return false;
                      }
                    }
                    return true;
                  },

                  //前台自定义按钮 样例
                  get_ButtonListDemo:function(showData){
                    var arr=[];
                    //aclass ：样式，ahref：连接，showName：显示名
                    var bottomButton={"aclass":"","ahref":"#/firstEnterpriseApplication/query.html","showName":"返回申请单列表"};
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    //权限控制
                    bottomButton={"authority":"采购单新建权限","aclass":"color-orange add-return-order","ahref":"#/firstEnterpriseApplication/query.html","showName":"新建权限"};
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                     bottomButton={"type":"modalRight","modalWidth":"1000","aclass":"color-orange add-return-order","ahref":"#/firstEnterpriseApplication/query.html","showName":"右侧弹出层"};
                  if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                     bottomButton={"type":"modalCenter","modalWidth":"1000","aclass":"color-orange add-return-order","ahref":"#/firstEnterpriseApplication/query.html","showName":"中间弹出层"};
                  if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    bottomButton={"type":"ngClick","modalWidth":"1000","aclass":"color-orange add-return-order","ngClick":"$root.goTo('#/hospitalApplication/query.html?tt='+showData.id)","showName":"自定义方法"};
                 if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                   bottomButton={"showName":"自定义ctr方法","type":"ngClick","modalWidth":"1000","aclass":"color-orange add-return-order","ngClick":"openIm('123','fff')"};
                 if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                 //button
                 bottomButton={"ngDisabled":"!!ngDisabled", "showName":"ngDisabled_button","type":"button","modalWidth":"1000","ngClick":"openIm('123','fff')"};
                 if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                 bottomButton={"ngShow":"!!ngShow", "showName":"ngShow","type":"ngClick","modalWidth":"1000","aclass":"color-orange add-return-order","ngClick":"openIm('123','fff')"};
                 if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                 //button
                 bottomButton={"ngDisabled":"!!ngDisabled", "showName":"handleThisClick","type":"handleThisClick","alertTemplate":"pr-dialog-return.html","ngClick":"openIm('123','fff')"};
                 if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}


                 bottomButton={"ngShow":"editForm.$valid", "showName":"保存","type":"ngClick","modalWidth":"1000","aclass":"color-orange add-return-order","ngClick":"openIm('123','fff')"};
                 if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}



                    if(showData){
                      bottomButton={"aclass":"btn btn-primary pr-btn-bg-gold pr-btn-save-glodbg",
                        "ahref":Config.serverPath+"rest/authen/firstEnterpriseApplication/exportWord?id="+showData.id,
                        "showName":"打印"};
                      if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}
                    }
                    console.log(arr);
                    return arr;
                  },
                  //获取销售单详细页面菜单定义
                  get_confirmOrder:function(showData){
                      var arr=[];
                      var bottomButton={"aclass":"mgr-l","ahref":"#/confirmOrder/query.html","showName":"返回销售单列表"};
                      if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}


                      bottomButton={"ngShow":"formData.orderStatus=='待处理' && formData.inputUserId==mainStatus.id", "showName":"删除",
                      "type":"handleThisClick",
                      "alertTemplate":"dialog-confirm.html",
                      "requestUrl":"rest/authen/salesOrder/delete?id="+showData.id,
                      "aclass":"pr-color-red mgr",
                      "alertTitle":"确认删除?",
                      "alertMsg":"您确认删除这条销售单吗?",
                      "ngClick":"$root.goTo('#/confirmOrder/query.html')"};

                      if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}


                      bottomButton={"aclass":"pr-btn-save-glodbg mgr color-white",
                      "ahref":"indexOfPrint.html#/print/confirmOrderPrint.html?id="+showData.id,
                      "target":"_blank",
                      "showName":"打印预览"};
                      if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}


                      return arr;
                    },//get_firstEnterpriseApplication
                  //获取首营企业菜单定义
                  get_firstEnterpriseApplication:function(showData){
                      var arr=[];
                      //aclass ：样式，ahref：连接，showName：显示名
                      var bottomButton={"aclass":"","ahref":"#/firstEnterpriseApplication/query.html","showName":"返回申请单列表"};
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}
                  //     bottomButton={"type":"modalRight","modalWidth":"800","aclass":"color-orange add-return-order mgl-s",
                  //     "requestUrl":"rest/authen/versionFlow/query?businessKey="+showData.id,
                  //     "httpMethod":"GET",
                  //     "ahref":"views/versionFlow/get-right-side.html?businessKey="+showData.id,
                  //     "showName":"查看操作记录"};
                   //
                  //  if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}
                      // if(showData){
                      //   bottomButton={"aclass":"btn btn-primary pr-btn-bg-gold pr-btn-save-glodbg",
                      //     "ahref":Config.serverPath+"rest/authen/firstEnterpriseApplication/exportWord?id="+showData.id,
                      //     "showName":"打印"};
                      //   if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}
                      // }

                      return arr;
                    }//get_firstEnterpriseApplication
                    //获取首营药械菜单定义
                      ,get_firstMedicalApplication:function(showData){

                        var arr=[];
                        //aclass ：样式，ahref：连接，showName：显示名
                        var bottomButton={"aclass":"","ahref":"#/firstMedicalApplication/query.html","showName":"返回申请单列表"};
                      if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    //     bottomButton={"type":"modalRight","modalWidth":"800","aclass":"color-orange add-return-order mgl-s",
                    //     "requestUrl":"rest/authen/versionFlow/query?businessKey="+showData.id,
                    //     "httpMethod":"GET",
                    //     "ahref":"views/versionFlow/get-right-side.html?businessKey="+showData.id,
                    //     "showName":"查看操作记录"};
                     //
                    //  if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                        // if(showData){
                        //   bottomButton={"aclass":"btn btn-primary pr-btn-bg-gold pr-btn-save-glodbg",
                        //     "ahref":Config.serverPath+"rest/authen/firstMedicalApplication/exportWord?id="+showData.id,
                        //     "showName":"打印"};
                        //   if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}
                        // }

                        return arr;
                      }//get_firstEnterpriseApplication

                    //获取品种信息管理菜单定义
                      ,get_medicalStock:function(showData){

                        var arr=[];
                        //aclass ：样式，ahref：连接，showName：显示名
                        var bottomButton={"type":"modalRight","modalWidth":"800","aclass":"color-orange add-return-order mgl-s",
                        "requestUrl":"rest/authen/versionFlow/query?businessKey="+showData.id,
                        "httpMethod":"GET",
                        "ahref":"views/versionFlow/get-right-side.html?businessKey="+showData.id,
                        "showName":"查看操作记录"};

                     if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                        return arr;
                      }
                      // 客户管理模块
                      ,get_customerAddress:function(showData){

                        var arr=[];
                        //aclass ：样式，ahref：连接，showName：显示名
                        var bottomButton={"type":"modalRight","modalWidth":"800","aclass":"color-orange add-return-order mgl-s",
                        "requestUrl":"rest/authen/versionFlow/query?businessKey="+showData.id,
                        "httpMethod":"GET",
                        "ahref":"views/versionFlow/get-right-side.html?businessKey="+showData.id,
                        "showName":"查看操作记录"};

                     if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                        return arr;
                      }


                      //获取医院资格声请菜单定义
                        ,get_hospitalApplication:function(showData){
                          var arr=[];
                          //aclass ：样式，ahref：连接，showName：显示名
                          var bottomButton={"aclass":"","ahref":"#/hospitalApplication/query.html","showName":"返回申请单列表"};
                        if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                          return arr;
                        }//get_hospitalApplication

                      //获取医院采购目录菜单定义
                        ,get_hospitalPurchaseContents:function(showData){
                          var arr=[];
                          //aclass ：样式，ahref：连接，showName：显示名
                          var bottomButton={"type":"modalRight","modalWidth":"800","aclass":"color-orange add-return-order mgl-s",
                        "requestUrl":"rest/authen/versionFlow/query?businessKey="+showData.id,
                        "httpMethod":"GET",
                        "ahref":"views/versionFlow/get-right-side.html?businessKey="+showData.id,
                        "showName":"查看操作记录"};

                        if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}
                          return arr;
                        }//get_hospitalApplication

                        //获取医院资格声请菜单定义
                          ,get_otherCustomerApplication:function(showData){
                            var arr=[];
                            //aclass ：样式，ahref：连接，showName：显示名
                            var bottomButton={"aclass":"","ahref":"#/otherCustomerApplication/query.html","showName":"返回申请单列表"};
                          if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                            return arr;
                          }//get_otherCustomerApplication
                };//end return
              return tmpUtils;
        }




        //Loading  bottomButtonList
        //  <a class="{{tr.aclass}}" href="{{tr.ahref}}">{{tr.showName}}</a>
        /**
        bottomButton ={
        aclass ："",//样式，
        ahref："",//连接，
        "target":"_blank" //_blank|_self|_parent|_top
        showName："",必填。显示名
        type:"",modalRight(右侧弹出框)，modalCenter（中间弹出框），button（button按钮标签）不填写则为跳转类型。handleThisClick(确认操作框)
        authority:""，不为空，当前用户有该权限，才能显示。
        ngShow:"",//根据计算脚本布尔值是否显示按钮，angluarjs 模版语法脚本。不填写默认显示
        ngDisabled:""//根据计算脚本布尔值是否可点击按钮,angluarjs 模版语法脚本。不填写默认 可操作。仅type=button
            alertTemplate：type=handleThisClick,填写弹出框的模版地址。
        requestUrl:type=handleThisClick,填写确认后调用请求。
        httpMethod:POST|GET，type=handleThisClick,填写确认后调用请求的请求方式，默认POST
        alertTitle:'确认',type=handleThisClick,标题，默认POST
        alertMsg:"确定该操作",type=handleThisClick,内容，默认POST



      } 属性说明：
        */
        function queryItemCardButtonList ($rootScope) {

            var tmpUtils=  {
                //业务逻辑判断，是否显示菜单
                canShowButton:function(bottomButton){
                  if(bottomButton.authority){//当前用户有权限才添加
                    if($rootScope.hasAuthor(bottomButton.authority)){
                         return true;
                    }else{  //没有权限不添加
                      return false;
                    }
                  }
                  return true;
                },

                //前台自定义按钮 样例
                get_ButtonListDemo:function(showData){
                  var arr=[];
                  //aclass ：样式，ahref：连接，showName：显示名
                  var bottomButton={"aclass":"","ahref":"#/firstEnterpriseApplication/query.html","showName":"返回申请单列表"};
                  if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}
                  //权限控制
                  bottomButton={"authority":"采购单新建权限","aclass":"color-orange add-return-order","ahref":"#/firstEnterpriseApplication/query.html","showName":"新建权限"};
                  if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                   bottomButton={"type":"modalRight","modalWidth":"1000","aclass":"color-orange add-return-order","ahref":"#/firstEnterpriseApplication/query.html","showName":"右侧弹出层"};
                if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                   bottomButton={"type":"modalCenter","modalWidth":"1000","aclass":"color-orange add-return-order","ahref":"#/firstEnterpriseApplication/query.html","showName":"中间弹出层"};
                if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                  bottomButton={"type":"ngClick","modalWidth":"1000","aclass":"color-orange add-return-order","ngClick":"$root.goTo('#/hospitalApplication/query.html?tt='+showData.id)","showName":"自定义方法"};
               if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                 bottomButton={"showName":"自定义ctr方法","type":"ngClick","modalWidth":"1000","aclass":"color-orange add-return-order","ngClick":"openIm('123','fff')"};
               if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

               //button
               bottomButton={"ngDisabled":"!!ngDisabled", "showName":"ngDisabled_button","type":"button","modalWidth":"1000","ngClick":"openIm('123','fff')"};
               if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

               bottomButton={"ngShow":"!!ngShow", "showName":"ngShow","type":"ngClick","modalWidth":"1000","aclass":"color-orange add-return-order","ngClick":"openIm('123','fff')"};
               if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

               //button
               bottomButton={"ngDisabled":"!!ngDisabled", "showName":"handleThisClick","type":"handleThisClick","alertTemplate":"pr-dialog-return.html","ngClick":"openIm('123','fff')"};
               if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}


               bottomButton={"ngShow":"editForm.$valid", "showName":"保存","type":"ngClick","modalWidth":"1000","aclass":"color-orange add-return-order","ngClick":"openIm('123','fff')"};
               if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                  if(showData){
                    bottomButton={"aclass":"btn btn-primary pr-btn-bg-gold pr-btn-save-glodbg",
                      "ahref":Config.serverPath+"rest/authen/firstEnterpriseApplication/exportWord?id="+showData.id,
                      "showName":"打印"};
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}
                  }
                  console.log(arr);
                  return arr;
                },

                //购需单列表页
                getQuery_salesOrder:function(showData){

                  var arr=[];

                  var bottomButton = {
                      "iconClass":"View-Logistics-icon","showName":"查看物流",
                      "ngShow":"tr.orderStatus=='已发货'",
                      "aclass":"btn-link pd-m rect-s mr--4",
                      "ahref":"#/salesOrder/get.html?openWuliu=true&id="+showData.id
                    };
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}


                    bottomButton = {
                      "iconClass":"edit-link-icon",
                      "showName":"编辑",
                      "ngShow":"tr.orderStatus!='已处理' && $root.hasAuthor('购需单编辑')",
                      "aclass":"btn-link pd-m rect-s",
                      "ahref":"#/salesOrder/edit2.html?id="+showData.id
                    };
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    bottomButton = {
                      "iconClass":"watch-detail-icon",
                      "showName":"查看详情",
                      "ngShow":"tr.orderStatus=='已处理' || !$root.hasAuthor('购需单编辑')",
                      "aclass":"btn-link pd-m rect-s",
                      "ahref":"#/salesOrder/get.html?id="+showData.id
                    };
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    bottomButton = {
                      "ngShow":"tr.orderStatus=='待处理' && tr.inputUserId==mainStatus.id",
                      "showName":"删除",
                      "iconClass":"delete-link-icon",
                      "type":"handleThisClick",
                      "alertTemplate":"pr-dialog-submit.html",
                      "requestUrl":"rest/authen/salesOrder/delete?id="+showData.id,
                      "aclass":"btn-link pd-m rect-s mr--4",
                      "alertTitle":"确认删除?",
                      "alertMsg":"删除后将无法恢复,确认删除?",
                      "ngClick":"$root.goTo('#/salesOrder/query.html')"
                    };
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}
                    return arr;
                  },

                //获取销售单详细页面菜单定义
                getQuery_confirmOrder:function(showData){
                  var arr=[];
                  var bottomButton = {
                      "iconClass":"edit-link-icon","showName":"编辑",
                      "ngShow":"tr.orderStatus=='未提交'||tr.orderStatus=='未通过'",
                      "aclass":"btn-link pd-m rect-s",
                      "ahref":"#/confirmOrder/edit.html?id="+showData.id
                    };
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    bottomButton = {
                      "iconClass":"examine-approve","showName":"立即审核",
                      "ngShow":"tr.orderStatus=='待审核'",
                      "aclass":"btn-link pd-m rect-s",
                      "ahref":"#/confirmOrder/get.html?id="+showData.id
                    };
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    bottomButton = {
                      "iconClass":"watch-detail-icon","showName":"查看详情",
                      "ngShow":"tr.orderStatus!='待审核'&&tr.orderStatus!='未提交'&&tr.orderStatus!='未通过'",
                      "aclass":"btn-link pd-m rect-s",
                      "ahref":"#/confirmOrder/get.html?id="+showData.id};
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    bottomButton={
                     "ngShow":"tr.orderStatus=='未提交'||tr.orderStatus=='未通过'", "showName":"删除",
                     "iconClass":"delete-link-icon",
                     "type":"handleThisClick",
                     "alertTemplate":"pr-dialog-submit.html",
                     "requestUrl":"rest/authen/confirmOrder/delete?id="+showData.id,
                     "aclass":"btn-link pd-m rect-s mr--4",
                     "alertTitle":"确认删除?",
                     "alertMsg":"删除后将无法恢复,确认删除?",
                     "ngClick":"$root.goTo('#/confirmOrder/query.html')"};
                     if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);
                     }
                    return arr;
                  },

                //获取发货单详细页面菜单定义
                getQuery_invoicesOrder:function(showData){
                  var arr=[];
                  var  bottomButton = {
                      "iconClass":"edit-link-icon","showName":"编辑",
                      "ngShow":"tr.orderStatus=='未提交'",
                      "aclass":"btn-link pd-m rect-s",
                      "ahref":"#/invoicesOrder/edit.html?id="+showData.id
                    };
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    bottomButton = {
                      "iconClass":"watch-detail-icon","showName":"查看详情",
                      "ngShow":"tr.orderStatus!='未提交'",
                      "aclass":"btn-link pd-m rect-s",
                      "ahref":"#/invoicesOrder/get.html?id="+showData.id};
                    if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    bottomButton={"ngShow":"tr.orderStatus=='未提交'", "showName":"删除",
                     "iconClass":"delete-link-icon",
                     "type":"handleThisClick",
                     "alertTemplate":"pr-dialog-submit.html",
                     "requestUrl":"rest/authen/invoicesOrder/delete?id="+showData.id,
                     "aclass":"btn-link pd-m rect-s mr--4",
                     "alertTitle":"确认删除?",
                     "alertMsg":"删除后将无法恢复,确认删除?",
                     "ngClick":"$root.goTo('#/invoicesOrder/query.html')"};
                     if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}
                    return arr;
                  },

                //获取销售退货单列表页菜单定义
                getQuery_saleReturnOrder:function(showData){
                  var arr=[];
                  // var  bottomButton = {
                  //   "ngShow":"tr.orderStatus=='待出库'",
                  //   "showName":"生成出库",
                  //   "iconClass":"outStork-icon",
                  //   "type":"handleThisClick",
                  //   "alertTemplate":"pr-dialog-submit.html",
                  //   "requestUrl":"rest/authen/saleReturnOrder/updateStatus?id="+showData.id+"&status=已出库",
                  //   "aclass":"btn-link pd-m rect-s",
                  //   "alertTitle":"确认生成出库单?",
                  //   "alertMsg":"生成出库单(红字)后,将完成销退出库?",
                  //   "ngClick":"$root.utils.goTo('#/saleReturnOrder/query.html')"
                  // };
                  // if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                  var bottomButton = {
                    "iconClass":"edit-link-icon",
                    "showName":"编辑",
                    "ngShow":"tr.orderStatus=='未提交'",
                    "aclass":"btn-link pd-m rect-s",
                    "ahref":"#/saleReturnOrder/edit.html?id="+showData.id
                  };
                  if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                  bottomButton = {
                    "iconClass":"watch-detail-icon",
                    "showName":"查看详情",
                    "ngShow":"tr.orderStatus=='处理中' || tr.orderStatus=='已处理'",
                    "aclass":"btn-link pd-m rect-s",
                    "ahref":"#/saleReturnOrder/get.html?id="+showData.id
                  };
                  if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                  bottomButton={
                    "ngShow":"tr.orderStatus=='未提交'",
                    "showName":"删除",
                    "iconClass":"delete-link-icon",
                    "type":"handleThisClick",
                    "alertTemplate":"pr-dialog-submit.html",
                    "requestUrl":"rest/authen/saleReturnOrder/delete?id="+showData.id,
                    "aclass":"btn-link pd-m rect-s mr--4",
                    "alertTitle":"确认删除?",
                    "alertMsg":"删除后将无法恢复,确认删除?",
                    "ngClick":"$root.goTo('#/saleReturnOrder/query.html')"
                  };
                  if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    return arr;
                  },

                //获取销医院采购目录菜单定义
                getQuery_hospitalPurchaseContents:function(showData){

                  var arr=[];

                  bottomButton = {
                    "iconClass":"watch-detail-icon",
                    "showName":"查看详情",
                    "ngShow":"",
                    "aclass":"btn-link pd-m rect-s",
                    "ahref":"#/hospitalPurchaseContents/get.html?id="+showData.id
                  };

                  if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                  var bottomButton = {
                    "ngShow":"tr.businessApplication.businessStatus!='已冻结' || tr.businessApplication.businessStatus!='已终止'",
                    "iconClass":"edit-link-icon",
                    "showName":"编辑",
                    "aclass":"btn-link pd-m rect-s",
                    "ahref":"#/hospitalPurchaseContents/edit.html?id="+showData.id
                  };

                  if(tmpUtils.canShowButton(bottomButton)) { arr.push(bottomButton); }

                  bottomButton={
                    "ngShow":"tr.orderStatus=='未提交'",
                    "showName":"删除",
                    "iconClass":"delete-link-icon",
                    "type":"handleThisClick",
                    "alertTemplate":"pr-dialog-submit.html",
                    "requestUrl":"rest/authen/saleReturnOrder/delete?id="+showData.id,
                    "aclass":"btn-link pd-m rect-s mr--4",
                    "alertTitle":"确认删除?",
                    "alertMsg":"删除后将无法恢复,确认删除?",
                    "ngClick":"$root.goTo('#/saleReturnOrder/query.html')"
                  };

                  if(tmpUtils.canShowButton(bottomButton)){arr.push(bottomButton);}

                    return arr;
                  }

              };
            return tmpUtils;
      }

        /**
         *  项目自定义顶部fixed消息提示tips
         *  Mode: 1.success 2.error 3.prompt(提示)
         */
        function saleOrderUtils (utils) {
          var  tmpObj = {
            // 含税单价：tr.price*tr.discountRate/100
            getHanShuiDanJian : function (item) {
              // if(!item.discountRate)return 0;
              var tmp;
              tmp = utils.numberDiv(item.discountRate, 100);
              tmp = utils.numberMul(item.strike_price, tmp);
              return tmp;
            },
            //无税单价  //tr.price*tr.quantity/(100+tr.taxRate)/100/tr.quantity
            getWuSuiDanJian:function(item){
                //item.price*(100-item.taxRate)/100-item.discountPrice;
                //tr.price/(100+tr.taxRate)/100

                // var tmp=utils.numberAdd(100,item.taxRate);
                // tmp=utils.numberDiv(tmp,100);
                // tmp=utils.numberDiv(item.taxPrice,tmp);

              var tmp;
              tmp = utils.numberDiv(item.tax,100);
              tmp = 1 + tmp;
              tmp = utils.numberDiv(tmpObj.getHanShuiDanJian(item),tmp);
              return tmp;
            },
            //无税金额 item.price*(1-item.taxRate)*item.quantity
            getWuSuiJinE:function(item, orderBusinessType){
              //item.price*(100-item.taxRate)/100*item.quantity
              //100-item.taxRate
              var tmp;
              tmp = tmpObj.getWuSuiDanJian(item);

              if (!orderBusinessType) {
                tmp = utils.numberMul(tmp,item.quantity);
                return tmp;
              } else {
                // 如果用户选择直运直销
                tmp = utils.numberMul(tmp,item.planQuantity);
                return tmp;
              }
            },
            //税额 tr.price*tr.quantity-(tr.price*tr.quantity/(1+tr.taxRate/100)
            getSuiE:function(item, orderBusinessType){
                //100-item.taxRate
                var tmp = tmpObj.getWuSuiDanJian(item),
                    total;


                if (!orderBusinessType) {
                  tmp=utils.numberMul(tmp,item.quantity);
                  total = tmpObj.getJiaSuiHeJi(item);
                  tmp=utils.numberSub(total,tmp);
                  return tmp;
                } else {
                  tmp=utils.numberMul(tmp,item.planQuantity);
                  total = tmpObj.getJiaSuiHeJi(item, orderBusinessType);
                  tmp=utils.numberSub(total,tmp);
                  return tmp;
                }

            },
            //价税合计 item.price*item.quantity
            getJiaSuiHeJi:function(item, orderBusinessType){
              //item.price*item.quantity
              // var tmp=utils.numberMul(item.taxPrice,item.quantity);
              var tmp;
              tmp = tmpObj.getHanShuiDanJian(item);

              if (!orderBusinessType) {
                tmp = utils.numberMul(tmp, item.quantity);
                return tmp;
              } else {
                tmp = utils.numberMul(tmp, item.planQuantity);
                return tmp;
              }

            }

          };//tmpObj

          return tmpObj;
        }//SaleOrderUtils

        // 采购单编辑页面计算原币单价，原币金额，原币价税合计字段
        function purchaseOrderUtils (utils) {
          var  tmpObj = {
            //原币单价(无税单价)  //tr.price*tr.quantity/(100+tr.taxRate)/100/tr.quantity
            getWuSuiDanJian:function(item){
              var tmp;
              tmp = utils.numberDiv(item.tax,100);
              tmp = 1 + tmp;
              tmp = utils.numberDiv(item.strike_price,tmp);
              return tmp;
            },
            //原币金额（无税金额） item.price*(1-item.taxRate)*item.quantity
            getWuSuiJinE:function(item){
              //item.price*(100-item.taxRate)/100*item.quantity
              //100-item.taxRate
              var tmp;
              tmp = tmpObj.getWuSuiDanJian(item);
              tmp = utils.numberMul(tmp,item.quantity);
              return tmp;
            },
            //价税合计 item.price*item.quantity
            getJiaSuiHeJi:function(item){
              //item.purchasePrice*item.quantity
              // var tmp=utils.numberMul(item.taxPrice,item.quantity);
              var tmp;
              tmp = utils.numberMul(item.strike_price, item.quantity);
              return tmp;
            },
            getSuiE:function(item, orderBusinessType){
                //100-item.taxRate
                var tmp = tmpObj.getWuSuiDanJian(item),
                    total;


                if (!orderBusinessType) {
                  tmp=utils.numberMul(tmp,item.quantity);
                  total = tmpObj.getJiaSuiHeJi(item);
                  tmp=utils.numberSub(total,tmp);
                  return tmp;
                } else {
                  tmp=utils.numberMul(tmp,item.planQuantity);
                  total = tmpObj.getJiaSuiHeJi(item, orderBusinessType);
                  tmp=utils.numberSub(total,tmp);
                  return tmp;
                }

            },
          };//tmpObj
          return tmpObj;
        }

        // 请购单相关计算
        function requestPurchaseOrderUtils (utils) {
          var  tmpObj = {
            //原币单价(无税单价)  //tr.price*tr.quantity/(100+tr.taxRate)/100/tr.quantity
            getWuSuiDanJian:function(item){
              var tmp;
              tmp = utils.numberDiv(item.taxRate,100);
              tmp = 1 + tmp;
              tmp = utils.numberDiv(item.purchasePrice,tmp);
              return tmp;
            },
            //原币金额（无税金额） item.price*(1-item.taxRate)*item.quantity
            getWuSuiJinE:function(item){
              //item.price*(100-item.taxRate)/100*item.quantity
              //100-item.taxRate
              var tmp;
              tmp = tmpObj.getWuSuiDanJian(item);
              tmp = utils.numberMul(tmp,item.quantity);
              return tmp;
            },
            //价税合计 item.price*item.quantity
            getJiaSuiHeJi:function(item){
              //item.purchasePrice*item.quantity
              // var tmp=utils.numberMul(item.taxPrice,item.quantity);
              var tmp;
              tmp = utils.numberMul(item.purchasePrice, item.quantity);
              return tmp;
            }
          };//tmpObj
          return tmpObj;
        }

        // 自定义菜单服务
        function customMenuUtils (utils) {
          var  tmpObj = {
            /**
                 *
                * @Description: 将模版变量字符串转化为具体数据。模版变量定义为：{{id}}
                * @method parseVariableMenuList
                * @param buttonList 菜单定义列表，带变量表达式
                * @param obj 业务对象
                * @return buttonList 菜单定义列表，带变量表达式转换结果
                * @author liumingquan
                样例：
              buttonList=[{
                "type":"" ,
                  "aclass":"",
                  "ahref":"#/uICustomMenu/edit.html?id={{id}}",
                  "showName":"编辑",
                  "authority":"",
                  "ngShow":"",
                  "ngDisabled":"",
                  "alertTemplate":"",
                  "requestUrl":"",
                  "httpMethod":"",
                  "alertTitle":"",
                  "alertMsg":"",
                  "target":"_blank"
                }]
                obj={"id":"1234"}
                =>
                [{
                  "type":"" ,
                    "aclass":"",
                    "ahref":"#/uICustomMenu/edit.html?id=1234",
                    "showName":"编辑",
                    "authority":"",
                    "ngShow":"",
                    "ngDisabled":"",
                    "alertTemplate":"",
                    "requestUrl":"",
                    "httpMethod":"",
                    "alertTitle":"",
                    "alertMsg":"",
                    "target":"_blank"
                  }]
                * @date 2017年2月8日
                 */
            parseVariableMenuList:function(buttonList,obj){
              if(!buttonList)return buttonList;
                var returnArr=[];
               for(var i=0;i<buttonList.length;i++){
                 var tmpMenu=$.extend( true,{},  buttonList[i]);
                 for(var propterty in tmpMenu){
                  var tmp=utils.parseVariableString(tmpMenu[propterty],obj);
                  // if(tmp)  console.log(tmpMenu[propterty],"=>",tmp);
                  tmpMenu[propterty]=tmp;
                 }
                 returnArr.push(tmpMenu);
               }
               return returnArr;
            }
          };//tmpObj
          return tmpObj;
        }

  angular.module('manageApp.project')
    .factory('customMenuUtils', ["utils",customMenuUtils])
    .factory('saleOrderUtils', ["utils",saleOrderUtils])
    .factory('purchaseOrderUtils', ["utils",purchaseOrderUtils])
    .factory('requestPurchaseOrderUtils', ["utils",requestPurchaseOrderUtils])
    .factory('bottomButtonList', ["$rootScope",bottomButtonList])
    .factory('queryItemCardButtonList', ["$rootScope",queryItemCardButtonList])
    .factory('proMessageTips', [proMessageTips]);
});

/**
 * Created by hao on 15/11/15.
 */

define('upload/directives', ['upload/init'], function () {

  function uploader() {
        return {
            restrict: 'EA',
            scope: {
                ngModel: "=",
                uploadMax: "@",
                uploadSize: "@",
                width: "@",
                height: "@"
            },
            replace: true,
          templateUrl:  Config.tplPath +'tpl/uploader.html',
            // templateUrl: 'tpl/uploader2.html',
            link: function ($scope, $element, $attrs) {
                var $fileIpt = $('<input type="file" multiple/>');
                var fileType = $attrs.uploadType || "image";
                var initFiles = angular.fromJson($attrs.files || []);
                $scope.fileList = [];
                $scope.delFile = delFile;

                $scope.ngModel = $scope.ngModel || [];
                $scope.uploadMax = $scope.uploadMax || 99;
                $scope.uploadSize = $scope.uploadSize || 10000;
                $scope.width = $scope.width ? $scope.width : 120 + "px";
                $scope.height = $scope.height ? $scope.height : 100 + "px";


                $scope.styleName = $attrs.styleName ||'styleName';

                //获取初始值
                angular.forEach(initFiles, function (_file) {
                    _file.data = angular.copy(_file);
                    _file.status = "finished";
                    if (/\.(jpe?g|png|gif)$/.test(_file.url)) {
                        _file.imgSrc = _file.url;
                    }
                    $scope.fileList.push(_file);
                    $scope.ngModel.push(_file.id);
                });

                //对外提供方法
                $scope.$parent.resetPic = function () {
                    $scope.ngModel = [];
                    $scope.fileList = [];
                };



                $scope.uploadBtn_click= function () {


                    $fileIpt.trigger("click");
                };
//
                var $uploadBtn = $(".uploadBtn", $element);
                $uploadBtn.on("click", function () {


                    $fileIpt.trigger("click");
                });
                $fileIpt.on("change", fileSelected);

                //监听选择文件信息
                function fileSelected() {
                    //HTML5文件API操作
                    var files = $fileIpt[0].files;
                    for (var i = 0, l = files.length; i < l; i++) {

                        if (files[i].size / 1024 > $scope.uploadSize) {
                            alert("文件大小不能超过 " + $scope.uploadSize + " K");
                            return;
                        }
                        switch (fileType) {
                            case "*":
                                var _fileObj = {
                                    status: 'uploading',
                                    file: files[i],
                                    progress: 0,
                                    text: '上传中...',
                                    name: files[i].name,
                                    data: {}
                                };
                                $scope.fileList.push(_fileObj);
                                uploadFile(_fileObj);
                                break;
                            case "image":
                                if (/image/g.test(files[i].type)) {
                                    var _fileObj = {
                                        status: 'uploading',
                                        file: files[i],
                                        progress: 0,
                                        text: '上传中...',
                                        name: files[i].name,
                                        data: {},
                                        imgSrc: window.URL.createObjectURL(new Blob([files[i]], {type: files[i].type}))
                                    };
                                    $scope.fileList.push(_fileObj);
                                    $scope.$digest();
                                    uploadFile(_fileObj);
                                    //console.log($scope.fileList);
                                } else {
                                    alert('只能上传图片');
                                }
                                break;
                            default:
                                if (!files[i].type||new RegExp(fileType).test(files[i].type)) {
                                    var _fileObj = {
                                        status: 'uploading',
                                        file: files[i],
                                        progress: 0,
                                        text: '上传中...',
                                        data: {}
                                    };
                                    $scope.fileList.push(_fileObj);
                                    $scope.$digest();
                                    uploadFile(_fileObj);
                                } else {
                                    alert('上传格式错误');
                                }
                        }
                    }
                }

                //删除图片
                function delFile(file) {



                    var _files = [];
                    var _index = $scope.fileList.indexOf(file);
                    if (_index > -1) {
                        $scope.fileList.splice(_index, 1);
                    }
                    angular.forEach($scope.fileList, function (_file, _key) {
                        _files.push(_file.data.id);
                    });
                    $scope.ngModel = _files;
                }

                //上传文件
                function uploadFile(_fileObj) {
                    var xhr = new XMLHttpRequest();
                    var fd = new FormData();
                    //关联表单数据,可以是自定义参数
                    fd.append("fileData", _fileObj.file);

                    //监听事件
                    xhr.upload.addEventListener("progress", function (evt) {
                        var tmp = Math.round(evt.loaded * 100 / evt.total);
                        if(tmp==100)tmp=99;
                        _fileObj.progress=tmp;
                        //上传进度最多99%，防止id还没返回时，用户就提交后，附件丢失bug。返回id后更新为100%
                        $scope.$digest();
                    }, false);
                    xhr.addEventListener("load", function (evt) {
                        var _data = angular.fromJson(evt.target.responseText);
                        _fileObj.progress = 100;
                        _fileObj.status = "finished";
                        _fileObj.text = '上传成功！';
                        _fileObj.data = _data.data;
                        $scope.ngModel.push(_data.data.id);
                        $scope.$apply();

                        //解决文件上传成功后，删除文件，再上传相同文件失败
                        $fileIpt.val("");

                    }, false);
                    xhr.addEventListener("loadend", function (evt) {
                        if (evt.target.status != 200) {
                            _fileObj.status = "error";
                            _fileObj.text = '上传失败！';
                            $scope.$apply();
                        }
                    });
                    //发送文件和表单自定义参数
                    var _url=$attrs.uploader;
                    if(Config.serverPath){
                      if (_url.indexOf("http://") !==0 && _url.indexOf("https://") !== 0) {
                        _url=Config.serverPath+_url;
                      }
                    }


                    xhr.open("POST", _url);
                    xhr.withCredentials = true;
                    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                    xhr.send(fd);
                }
            }
        }
    };



    function uploaderOne(alertError,alertOk,proLoading) {
          return {
              restrict: 'EA',
              scope: {
                  ngModel: "=?",
                  upFile:"=?",
                  params:"=?",
                  responseList:"=?",
                  uploadSize: "@",
                  width: "@",
                  height: "@"
              },

              // templateUrl: 'tpl/uploader2.html',
              link: function ($scope, $element, $attrs) {
                  var $fileIpt = $('<input type="file"/>');
                  //image,*.upload-type="image"
                  var fileType = $attrs.uploadType || "*";

                  $scope.delFile = delFile;

                  $scope.ngModel = $scope.ngModel;
                  $scope.uploadSize = $scope.uploadSize || 10000;
                  $scope.width = $scope.width ? $scope.width : 120 + "px";
                  $scope.height = $scope.height ? $scope.height : 100 + "px";


                  $scope.styleName = $attrs.styleName ||'styleName';


                  //对外提供方法
                  $scope.$parent.resetPic = function () {
                      $scope.ngModel = [];
                  };


                  $element.on("click", function () {
                      $fileIpt.trigger("click");
                  });
                  $fileIpt.on("change", fileSelected);

                  //监听选择文件信息
                  function fileSelected() {
                      //HTML5文件API操作
                      var files = $fileIpt[0].files;
                      for (var i = 0, l = files.length; i < l; i++) {

                          if (files[i].size / 1024 > $scope.uploadSize) {
                              alert("文件大小不能超过 " + $scope.uploadSize + " K");
                              return;
                          }
                          switch (fileType) {
                              case "*":
                                  var _fileObj = {
                                      status: 'uploading',
                                      file: files[i],
                                      progress: 0,
                                      text: '上传中...',
                                      name: files[i].name,
                                      data: ""
                                  };

                                    if($scope.upFile)$scope.upFile=_fileObj;
                                  // $scope.fileList.push(_fileObj);
                                  uploadFile(_fileObj);
                                  break;
                              case "image":
                                  if (/image/g.test(files[i].type)) {
                                    _fileObj = {
                                      status: 'uploading',
                                      file: files[i],
                                      progress: 0,
                                      text: '上传中...',
                                      name: files[i].name,
                                      data: "",
                                      imgSrc: window.URL.createObjectURL(new Blob([files[i]], {type: files[i].type}))
                                    };
                                      // $scope.fileList.push(_fileObj);
                                          if($scope.upFile)$scope.upFile=_fileObj;
                                      $scope.$digest();
                                      uploadFile(_fileObj);
                                      //console.log($scope.fileList);
                                  } else {
                                      alert('只能上传图片');
                                  }
                                  break;
                              default:
                                  if (!files[i].type||new RegExp(fileType).test(files[i].type)) {
                                    _fileObj = {
                                      status: 'uploading',
                                      file: files[i],
                                      progress: 0,
                                      text: '上传中...',
                                      data: {}
                                    };
                                          if($scope.upFile)$scope.upFile=_fileObj;
                                      // $scope.fileList.push(_fileObj);
                                      $scope.$digest();
                                      uploadFile(_fileObj);
                                  } else {
                                      alert('上传格式错误');
                                  }
                          }
                      }
                  }

                  //删除图片
                  function delFile(file) {
                      $scope.ngModel = "";
                  }

                  //上传文件
                  function uploadFile(_fileObj) {
                      var xhr = new XMLHttpRequest();
                      var fd = new FormData();
                      //关联表单数据,可以是自定义参数

                      //添加自定义参数
                      if(  angular.isObject($scope.params)){
                        for (var variable in $scope.params) {
                            fd.append(variable,$scope.params[variable]);
                        }
                      }
                        if($attrs.usege){
                            fd.append("usege", $attrs.usege);
                        }

                      fd.append("fileData", _fileObj.file);



                      var maskObj=null;
                      if (!$attrs.noshowLoading) {
                        maskObj=proLoading($element);
                        //  if(maskObj)maskObj.hide();
                      }

                      //监听事件
                      xhr.upload.addEventListener("progress", function (evt) {
                          var tmp = Math.round(evt.loaded * 100 / evt.total);
                          if(tmp==100)tmp=99;
                          _fileObj.progress=tmp;
                          //上传进度最多99%，防止id还没返回时，用户就提交后，附件丢失bug。返回id后更新为100%
                          $scope.$digest();
                      }, false);
                      xhr.addEventListener("load", function (evt) {
                            if(maskObj)maskObj.hide();
                        //解决文件上传成功后，删除文件，再上传相同文件失败
                       $fileIpt.val("");

                          var _data = angular.fromJson(evt.target.responseText);

                            if (angular.isDefined($attrs.responseList)){
                                if(!$scope.responseList)  $scope.responseList=[];
                                _data._responseTime=new Date().getTime();
                                $scope.responseList.push(_data);
                            }

                            if (!_data || _data.code != 200) {
                                alertError(_data.msg || '出错了');
                                return;
                            }


                            if (angular.isDefined($attrs.alertOk)) alertOk(_data.msg);



                          _fileObj.progress = 100;
                          _fileObj.status = "finished";
                          _fileObj.text = '上传成功！';
                          _fileObj.data = _data.data;
                          // _data.data="http://stimg3.tuicool.com/JNzQre.png";

                          if(angular.isString(_data.data)){
                                $scope.ngModel=_data.data;
                          }else{
                            if(_data.data) 
                                $scope.ngModel=_data.data.key;
                          }

                          if($scope.upFile)$scope.upFile.data=_data.data;


                          $scope.$apply();
                          //callback 放在  $scope.$apply(); 之后，才能及时刷新
                          if ($attrs.callback) {
                              $scope.$parent.$eval($attrs.callback);
                          }
                          $scope.$apply();

                      }, false);
                      xhr.addEventListener("loadend", function (evt) {

                            if(maskObj)maskObj.hide();

                          if (evt.target.status != 200) {
                              _fileObj.status = "error";
                              _fileObj.text = '上传失败！';
                              // $scope.$apply();
                          }
                      });
                      //发送文件和表单自定义参数
                      var _url=$attrs.uploaderOne;
                      if(Config.serverPath){
                        if (_url.indexOf("http://") !==0 && _url.indexOf("https://") !== 0) {
                          _url=Config.serverPath+_url;
                        }
                      }


                      xhr.open("POST", _url);
                      xhr.withCredentials = true;
                      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                      xhr.send(fd);
                  }
              }
          };
      }

//
    angular.module('manageApp.upload')
    .directive("uploaderOne", ["alertError","alertOk","proLoading",uploaderOne])
    .directive("uploader", uploader);
});

/**
 * Created by hao on 15/11/15.
 */
define('upload/init', ['angular'], function () {
    angular.module('manageApp.upload', []);
});